// Package qapi provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package apiclient

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// ActiveOAuth2Token defines model for ActiveOAuth2Token.
type ActiveOAuth2Token struct {

	// OAuth2クライアントUUID
	ClientId string `json:"clientId"`

	// トークンUUID
	Id string `json:"id"`

	// 発行日時
	IssuedAt time.Time `json:"issuedAt"`

	// スコープ
	Scopes []OAuth2Scope `json:"scopes"`
}

// ActivityTimelineMessage defines model for ActivityTimelineMessage.
type ActivityTimelineMessage struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`

	// メッセージ本文
	Content string `json:"content"`

	// 投稿日時
	CreatedAt time.Time `json:"createdAt"`

	// メッセージUUID
	Id string `json:"id"`

	// 編集日時
	UpdatedAt time.Time `json:"updatedAt"`

	// 投稿者UUID
	UserId string `json:"userId"`
}

// Bot defines model for Bot.
type Bot struct {

	// BOTユーザーUUID
	BotUserId string `json:"botUserId"`

	// 作成日時
	CreatedAt time.Time `json:"createdAt"`

	// 説明
	Description string `json:"description"`

	// BOT開発者UUID
	DeveloperId string `json:"developerId"`

	// BOT UUID
	Id string `json:"id"`

	// BOT状態
	// 0: 停止
	// 1: 有効
	// 2: 一時停止
	State BotState `json:"state"`

	// BOTが購読しているイベントの配列
	SubscribeEvents []string `json:"subscribeEvents"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// BotDetail defines model for BotDetail.
type BotDetail struct {

	// BOTユーザーUUID
	BotUserId string `json:"botUserId"`

	// BOTが参加しているチャンネルのUUID配列
	Channels []string `json:"channels"`

	// 作成日時
	CreatedAt time.Time `json:"createdAt"`

	// 説明
	Description string `json:"description"`

	// BOT開発者UUID
	DeveloperId string `json:"developerId"`

	// BOTサーバーエンドポイント
	Endpoint string `json:"endpoint"`

	// BOT UUID
	Id string `json:"id"`

	// 特権BOTかどうか
	Privileged bool `json:"privileged"`

	// BOT状態
	// 0: 停止
	// 1: 有効
	// 2: 一時停止
	State BotState `json:"state"`

	// BOTが購読しているイベントの配列
	SubscribeEvents []string `json:"subscribeEvents"`

	// BOTのトークン情報
	Tokens BotTokens `json:"tokens"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// BotEventLog defines model for BotEventLog.
type BotEventLog struct {

	// BOT UUID
	BotId string `json:"botId"`

	// ステータスコード
	Code int32 `json:"code"`

	// イベント日時
	Datetime time.Time `json:"datetime"`

	// イベントタイプ
	Event string `json:"event"`

	// リクエストUUID
	RequestId string `json:"requestId"`
}

// BotState defines model for BotState.
type BotState int32

// BotTokens defines model for BotTokens.
type BotTokens struct {

	// BOTアクセストークン
	AccessToken string `json:"accessToken"`

	// Verification Token
	VerificationToken string `json:"verificationToken"`
}

// BotUser defines model for BotUser.
type BotUser struct {

	// BOTユーザーUUID
	BotUserId string `json:"botUserId"`

	// BOT UUID
	Id string `json:"id"`
}

// Channel defines model for Channel.
type Channel struct {

	// チャンネルがアーカイブされているかどうか
	Archived bool `json:"archived"`

	// 子チャンネルのUUID配列
	Children []string `json:"children"`

	// 強制通知チャンネルかどうか
	Force bool `json:"force"`

	// チャンネルUUID
	Id string `json:"id"`

	// チャンネル名
	Name string `json:"name"`

	// 親チャンネルUUID
	ParentId *string `json:"parentId"`

	// チャンネルトピック
	Topic string `json:"topic"`
}

// ChannelEvent defines model for ChannelEvent.
type ChannelEvent struct {

	// イベント日時
	Datetime time.Time `json:"datetime"`

	// イベント内容
	Detail interface{} `json:"detail"`

	// イベントタイプ
	Type string `json:"type"`
}

// ChannelList defines model for ChannelList.
type ChannelList struct {

	// ダイレクトメッセージチャンネルの配列
	Dm []DMChannel `json:"dm"`

	// パブリックチャンネルの配列
	Public []Channel `json:"public"`
}

// ChannelStats defines model for ChannelStats.
type ChannelStats struct {

	// 統計情報日時
	Datetime time.Time `json:"datetime"`

	// チャンネルの総投稿メッセージ数(削除されたものも含む)
	TotalMessageCount int32 `json:"totalMessageCount"`
}

// ChannelSubscribeLevel defines model for ChannelSubscribeLevel.
type ChannelSubscribeLevel int

// ChannelTopic defines model for ChannelTopic.
type ChannelTopic struct {

	// トピック
	Topic string `json:"topic"`
}

// ChannelViewState defines model for ChannelViewState.
type ChannelViewState string

// List of ChannelViewState
const (
	ChannelViewState_editing    ChannelViewState = "editing"
	ChannelViewState_monitoring ChannelViewState = "monitoring"
	ChannelViewState_none       ChannelViewState = "none"
)

// ChannelViewer defines model for ChannelViewer.
type ChannelViewer struct {

	// 閲覧状態
	State ChannelViewState `json:"state"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`

	// ユーザーUUID
	UserId string `json:"userId"`
}

// ChildCreatedEvent defines model for ChildCreatedEvent.
type ChildCreatedEvent struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`

	// 作成者UUID
	UserId string `json:"userId"`
}

// ClipFolder defines model for ClipFolder.
type ClipFolder struct {

	// 作成日時
	CreatedAt time.Time `json:"createdAt"`

	// 説明
	Description string `json:"description"`

	// フォルダUUID
	Id string `json:"id"`

	// フォルダ名
	Name string `json:"name"`

	// フォルダ所有者UUID
	OwnerId string `json:"ownerId"`
}

// ClippedMessage defines model for ClippedMessage.
type ClippedMessage struct {

	// クリップした日時
	ClippedAt time.Time `json:"clippedAt"`

	// メッセージ
	Message Message `json:"message"`
}

// DMChannel defines model for DMChannel.
type DMChannel struct {

	// チャンネルUUID
	Id string `json:"id"`

	// 送信先相手のUUID
	UserId string `json:"userId"`
}

// ExternalProviderUser defines model for ExternalProviderUser.
type ExternalProviderUser struct {

	// 外部アカウント名
	ExternalName string `json:"externalName"`

	// 紐付けた日時
	LinkedAt string `json:"linkedAt"`

	// 外部サービス名
	ProviderName string `json:"providerName"`
}

// FileInfo defines model for FileInfo.
type FileInfo struct {

	// 属しているチャンネルUUID
	ChannelId *string `json:"channelId"`

	// アップロード日時
	CreatedAt time.Time `json:"createdAt"`

	// ファイルUUID
	Id string `json:"id"`

	// MD5ハッシュ
	Md5 string `json:"md5"`

	// MIMEタイプ
	Mime string `json:"mime"`

	// ファイル名
	Name string `json:"name"`

	// ファイルサイズ
	Size int64 `json:"size"`

	// サムネイル情報
	// サムネイルが存在しない場合はnullになります
	Thumbnail *struct {

		// サムネイル高さ
		Height *int32 `json:"height,omitempty"`

		// MIMEタイプ
		Mime *string `json:"mime,omitempty"`

		// サムネイル幅
		Width *int32 `json:"width,omitempty"`
	} `json:"thumbnail"`

	// アップロード者UUID
	UploaderId *string `json:"uploaderId"`
}

// ForcedNotificationChangedEvent defines model for ForcedNotificationChangedEvent.
type ForcedNotificationChangedEvent struct {

	// 変更後強制通知状態
	Force bool `json:"force"`

	// 変更者UUID
	UserId string `json:"userId"`
}

// LoginSession defines model for LoginSession.
type LoginSession struct {

	// セッションUUID
	Id string `json:"id"`

	// 発行日時
	IssuedAt time.Time `json:"issuedAt"`
}

// Message defines model for Message.
type Message struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`

	// メッセージ本文
	Content string `json:"content"`

	// 投稿日時
	CreatedAt time.Time `json:"createdAt"`

	// メッセージUUID
	Id string `json:"id"`

	// ピン留めされているかどうか
	Pinned bool `json:"pinned"`

	// 押されているスタンプの配列
	Stamps []MessageStamp `json:"stamps"`

	// スレッドUUID
	ThreadId *string `json:"threadId"`

	// 編集日時
	UpdatedAt time.Time `json:"updatedAt"`

	// 投稿者UUID
	UserId string `json:"userId"`
}

// MessageClip defines model for MessageClip.
type MessageClip struct {

	// クリップされた日時
	ClippedAt time.Time `json:"clippedAt"`

	// クリップされているフォルダのID
	FolderId string `json:"folderId"`
}

// MessagePin defines model for MessagePin.
type MessagePin struct {

	// ピン留めされた日時
	PinnedAt time.Time `json:"pinnedAt"`

	// ピン留めしたユーザーUUID
	UserId string `json:"userId"`
}

// MessageStamp defines model for MessageStamp.
type MessageStamp struct {

	// スタンプ数
	Count int32 `json:"count"`

	// スタンプが最初に押された日時
	CreatedAt time.Time `json:"createdAt"`

	// スタンプUUID
	StampId string `json:"stampId"`

	// スタンプが最後に押された日時
	UpdatedAt time.Time `json:"updatedAt"`

	// ユーザーUUID
	UserId string `json:"userId"`
}

// MyUserDetail defines model for MyUserDetail.
type MyUserDetail struct {

	// 自己紹介(biography)
	Bio string `json:"bio"`

	// BOTかどうか
	Bot bool `json:"bot"`

	// ユーザー表示名
	DisplayName string `json:"displayName"`

	// 所属グループのUUIDの配列
	Groups []string `json:"groups"`

	// ホームチャンネル
	HomeChannel *string `json:"homeChannel"`

	// アイコンファイルUUID
	IconFileId string `json:"iconFileId"`

	// ユーザーUUID
	Id string `json:"id"`

	// 最終オンライン日時
	LastOnline *time.Time `json:"lastOnline"`

	// ユーザー名
	Name string `json:"name"`

	// 所有している権限の配列
	Permissions []UserPermission `json:"permissions"`

	// ユーザーアカウント状態
	// 0: 停止
	// 1: 有効
	// 2: 一時停止
	State UserAccountState `json:"state"`

	// タグリスト
	Tags []UserTag `json:"tags"`

	// Twitter ID
	TwitterId string `json:"twitterId"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// NameChangedEvent defines model for NameChangedEvent.
type NameChangedEvent struct {

	// 変更後チャンネル名
	After string `json:"after"`

	// 変更前チャンネル名
	Before string `json:"before"`

	// 変更者UUID
	UserId string `json:"userId"`
}

// OAuth2Authorization defines model for OAuth2Authorization.
type OAuth2Authorization struct {
	ClientId            string              `json:"client_id"`
	CodeChallenge       *string             `json:"code_challenge,omitempty"`
	CodeChallengeMethod *string             `json:"code_challenge_method,omitempty"`
	Nonce               *string             `json:"nonce,omitempty"`
	Prompt              *OAuth2Prompt       `json:"prompt,omitempty"`
	RedirectUri         *string             `json:"redirect_uri,omitempty"`
	ResponseType        *OAuth2ResponseType `json:"response_type,omitempty"`
	Scope               *string             `json:"scope,omitempty"`
	State               *string             `json:"state,omitempty"`
}

// OAuth2Client defines model for OAuth2Client.
type OAuth2Client struct {

	// 説明
	Description string `json:"description"`

	// クライアント開発者UUID
	DeveloperId string `json:"developerId"`

	// クライアントUUID
	Id string `json:"id"`

	// クライアント名
	Name string `json:"name"`

	// 要求スコープの配列
	Scopes []OAuth2Scope `json:"scopes"`
}

// OAuth2ClientDetail defines model for OAuth2ClientDetail.
type OAuth2ClientDetail struct {

	// コールバックURL
	CallbackUrl string `json:"callbackUrl"`

	// 説明
	Description string `json:"description"`

	// クライアント開発者UUID
	DeveloperId string `json:"developerId"`

	// クライアントUUID
	Id string `json:"id"`

	// クライアント名
	Name string `json:"name"`

	// 要求スコープの配列
	Scopes []OAuth2Scope `json:"scopes"`

	// クライアントシークレット
	Secret string `json:"secret"`
}

// OAuth2Decide defines model for OAuth2Decide.
type OAuth2Decide struct {

	// 承諾する場合は"approve"
	Submit string `json:"submit"`
}

// OAuth2Prompt defines model for OAuth2Prompt.
type OAuth2Prompt string

// List of OAuth2Prompt
const (
	OAuth2Prompt_none OAuth2Prompt = "none"
)

// OAuth2ResponseType defines model for OAuth2ResponseType.
type OAuth2ResponseType string

// List of OAuth2ResponseType
const (
	OAuth2ResponseType_code  OAuth2ResponseType = "code"
	OAuth2ResponseType_none  OAuth2ResponseType = "none"
	OAuth2ResponseType_token OAuth2ResponseType = "token"
)

// OAuth2Scope defines model for OAuth2Scope.
type OAuth2Scope string

// List of OAuth2Scope
const (
	OAuth2Scope_manage_bot OAuth2Scope = "manage_bot"
	OAuth2Scope_read       OAuth2Scope = "read"
	OAuth2Scope_write      OAuth2Scope = "write"
)

// OAuth2Token defines model for OAuth2Token.
type OAuth2Token struct {
	AccessToken  string  `json:"access_token"`
	ExpiresIn    *int    `json:"expires_in,omitempty"`
	IdToken      *string `json:"id_token,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
	Scope        *string `json:"scope,omitempty"`
	TokenType    string  `json:"token_type"`
}

// Ogp defines model for Ogp.
type Ogp struct {
	Description *string     `json:"description,omitempty"`
	Images      *[]OgpMedia `json:"images,omitempty"`
	Title       *string     `json:"title,omitempty"`
	Type        *string     `json:"type,omitempty"`
	Url         *string     `json:"url,omitempty"`
	Videos      *[]OgpMedia `json:"videos,omitempty"`
}

// OgpMedia defines model for OgpMedia.
type OgpMedia struct {
	Height    *int    `json:"height"`
	SecureUrl *string `json:"secureUrl"`
	Type      *string `json:"type"`
	Url       *string `json:"url,omitempty"`
	Width     *int    `json:"width"`
}

// ParentChangedEvent defines model for ParentChangedEvent.
type ParentChangedEvent struct {

	// 変更後親チャンネルUUID
	After string `json:"after"`

	// 変更前親チャンネルUUID
	Before string `json:"before"`

	// 変更者UUID
	UserId string `json:"userId"`
}

// PatchBotRequest defines model for PatchBotRequest.
type PatchBotRequest struct {

	// BOTの説明
	Description *string `json:"description,omitempty"`

	// 移譲先の開発者UUID
	DeveloperId *string `json:"developerId,omitempty"`

	// BOTユーザー表示名
	DisplayName *string `json:"displayName,omitempty"`

	// BOTサーバーエンドポイント
	Endpoint *string `json:"endpoint,omitempty"`

	// 特権
	Privileged *bool `json:"privileged,omitempty"`

	// 購読するイベント
	SubscribeEvents *[]string `json:"subscribeEvents,omitempty"`
}

// PatchChannelRequest defines model for PatchChannelRequest.
type PatchChannelRequest struct {

	// アーカイブされているかどうか
	Archived *bool `json:"archived,omitempty"`

	// 強制通知チャンネルかどうか
	Force *bool `json:"force,omitempty"`

	// チャンネル名
	Name *string `json:"name,omitempty"`

	// 親チャンネルUUID
	Parent *string `json:"parent,omitempty"`
}

// PatchChannelSubscribersRequest defines model for PatchChannelSubscribersRequest.
type PatchChannelSubscribersRequest struct {

	// 通知をオフにするユーザーのUUID配列
	Off *[]string `json:"off,omitempty"`

	// 通知をオンにするユーザーのUUID配列
	On *[]string `json:"on,omitempty"`
}

// PatchClientRequest defines model for PatchClientRequest.
type PatchClientRequest struct {

	// コールバックURL
	CallbackUrl *string `json:"callbackUrl,omitempty"`

	// 説明
	Description *string `json:"description,omitempty"`

	// クライアント開発者UUID
	DeveloperId *string `json:"developerId,omitempty"`

	// クライアント名
	Name *string `json:"name,omitempty"`
}

// PatchClipFolderRequest defines model for PatchClipFolderRequest.
type PatchClipFolderRequest struct {

	// 説明
	Description *string `json:"description,omitempty"`

	// フォルダ名
	Name *string `json:"name,omitempty"`
}

// PatchGroupMemberRequest defines model for PatchGroupMemberRequest.
type PatchGroupMemberRequest struct {

	// ユーザーの役割
	Role string `json:"role"`
}

// PatchMeRequest defines model for PatchMeRequest.
type PatchMeRequest struct {

	// 自己紹介(biography)
	Bio *string `json:"bio,omitempty"`

	// 新しい表示名
	DisplayName *string `json:"displayName,omitempty"`

	// ホームチャンネルのUUID
	// `00000000-0000-0000-0000-000000000000`を指定すると、ホームチャンネルが`null`に設定されます
	HomeChannel *string `json:"homeChannel,omitempty"`

	// TwitterID
	TwitterId *string `json:"twitterId,omitempty"`
}

// PatchStampPaletteRequest defines model for PatchStampPaletteRequest.
type PatchStampPaletteRequest struct {

	// 説明
	Description *string `json:"description,omitempty"`

	// パレット名
	Name *string `json:"name,omitempty"`

	// パレット内のスタンプUUIDの配列
	Stamps *[]string `json:"stamps,omitempty"`
}

// PatchStampRequest defines model for PatchStampRequest.
type PatchStampRequest struct {

	// 作成者UUID
	CreatorId *string `json:"creatorId,omitempty"`

	// スタンプ名
	Name *string `json:"name,omitempty"`
}

// PatchUserGroupRequest defines model for PatchUserGroupRequest.
type PatchUserGroupRequest struct {

	// グループ説明
	Description *string `json:"description,omitempty"`

	// グループ名
	Name *string `json:"name,omitempty"`

	// グループタイプ
	Type *string `json:"type,omitempty"`
}

// PatchUserRequest defines model for PatchUserRequest.
type PatchUserRequest struct {

	// 新しい表示名
	DisplayName *string `json:"displayName,omitempty"`

	// ユーザーロール
	Role *string `json:"role,omitempty"`

	// ユーザーアカウント状態
	// 0: 停止
	// 1: 有効
	// 2: 一時停止
	State *UserAccountState `json:"state,omitempty"`

	// TwitterID
	TwitterId *string `json:"twitterId,omitempty"`
}

// PatchUserTagRequest defines model for PatchUserTagRequest.
type PatchUserTagRequest struct {

	// タグのロック状態
	IsLocked bool `json:"isLocked"`
}

// PatchWebhookRequest defines model for PatchWebhookRequest.
type PatchWebhookRequest struct {

	// デフォルトの投稿先チャンネルUUID
	ChannelId *string `json:"channelId,omitempty"`

	// 説明
	Description *string `json:"description,omitempty"`

	// Webhookユーザー表示名
	Name *string `json:"name,omitempty"`

	// 移譲先のユーザーUUID
	OwnerId *string `json:"ownerId,omitempty"`

	// Webhookシークレット
	Secret *string `json:"secret,omitempty"`
}

// Pin defines model for Pin.
type Pin struct {

	// メッセージ
	Message Message `json:"message"`

	// ピン留めされた日時
	PinnedAt time.Time `json:"pinnedAt"`

	// ピン留めしたユーザーUUID
	UserId string `json:"userId"`
}

// PinAddedEvent defines model for PinAddedEvent.
type PinAddedEvent struct {

	// メッセージUUID
	MessageId string `json:"messageId"`

	// 変更者UUID
	UserId string `json:"userId"`
}

// PinRemovedEvent defines model for PinRemovedEvent.
type PinRemovedEvent struct {

	// メッセージUUID
	MessageId string `json:"messageId"`

	// 変更者UUID
	UserId string `json:"userId"`
}

// PostBotActionJoinRequest defines model for PostBotActionJoinRequest.
type PostBotActionJoinRequest struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`
}

// PostBotActionLeaveRequest defines model for PostBotActionLeaveRequest.
type PostBotActionLeaveRequest struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`
}

// PostBotRequest defines model for PostBotRequest.
type PostBotRequest struct {

	// BOTの説明
	Description string `json:"description"`

	// BOTユーザー表示名
	DisplayName string `json:"displayName"`

	// BOTサーバーエンドポイント
	Endpoint string `json:"endpoint"`

	// BOTユーザーID
	// 自動的に接頭辞"BOT_"が付与されます
	Name string `json:"name"`
}

// PostChannelRequest defines model for PostChannelRequest.
type PostChannelRequest struct {

	// チャンネル名
	Name string `json:"name"`

	// 親チャンネルのUUID
	// ルートに作成する場合はnullを指定
	Parent *string `json:"parent"`
}

// PostClientRequest defines model for PostClientRequest.
type PostClientRequest struct {

	// コールバックURL
	CallbackUrl string `json:"callbackUrl"`

	// 説明
	Description string `json:"description"`

	// クライアント名
	Name string `json:"name"`

	// 要求スコープの配列
	Scopes []OAuth2Scope `json:"scopes"`
}

// PostClipFolderMessageRequest defines model for PostClipFolderMessageRequest.
type PostClipFolderMessageRequest struct {

	// メッセージUUID
	MessageId string `json:"messageId"`
}

// PostClipFolderRequest defines model for PostClipFolderRequest.
type PostClipFolderRequest struct {

	// 説明
	Description string `json:"description"`

	// フォルダ名
	Name string `json:"name"`
}

// PostFileRequest defines model for PostFileRequest.
type PostFileRequest struct {

	// アップロード先チャンネルUUID
	ChannelId string `json:"channelId"`

	// ファイル本体
	File string `json:"file"`
}

// PostLinkExternalAccount defines model for PostLinkExternalAccount.
type PostLinkExternalAccount struct {

	// 外部サービス名
	ProviderName string `json:"providerName"`
}

// PostLoginRequest defines model for PostLoginRequest.
type PostLoginRequest struct {

	// ユーザー名
	Name string `json:"name"`

	// パスワード
	Password string `json:"password"`
}

// PostMessageRequest defines model for PostMessageRequest.
type PostMessageRequest struct {

	// メッセージ本文
	Content string `json:"content"`

	// メンション・チャンネルリンクを自動埋め込みするか
	Embed *bool `json:"embed,omitempty"`
}

// PostMessageStampRequest defines model for PostMessageStampRequest.
type PostMessageStampRequest struct {

	// 押す数
	Count int32 `json:"count"`
}

// PostMyFCMDeviceRequest defines model for PostMyFCMDeviceRequest.
type PostMyFCMDeviceRequest struct {

	// FCMのデバイストークン
	Token string `json:"token"`
}

// PostOAuth2Revoke defines model for PostOAuth2Revoke.
type PostOAuth2Revoke struct {

	// 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン
	Token string `json:"token"`
}

// PostOAuth2Token defines model for PostOAuth2Token.
type PostOAuth2Token struct {
	ClientId     *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`
	Code         *string `json:"code,omitempty"`
	CodeVerifier *string `json:"code_verifier,omitempty"`
	GrantType    string  `json:"grant_type"`
	Password     *string `json:"password,omitempty"`
	RedirectUri  *string `json:"redirect_uri,omitempty"`
	RefreshToken *string `json:"refresh_token,omitempty"`
	Scope        *string `json:"scope,omitempty"`
	Username     *string `json:"username,omitempty"`
}

// PostStampPaletteRequest defines model for PostStampPaletteRequest.
type PostStampPaletteRequest struct {

	// 説明
	Description string `json:"description"`

	// パレット名
	Name string `json:"name"`

	// パレット内のスタンプのUUID配列
	Stamps []string `json:"stamps"`
}

// PostStampRequest defines model for PostStampRequest.
type PostStampRequest struct {

	// スタンプ画像(1MBまでのpng, jpeg, gif)
	File string `json:"file"`

	// スタンプ名
	Name string `json:"name"`
}

// PostStarRequest defines model for PostStarRequest.
type PostStarRequest struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`
}

// PostUnlinkExternalAccount defines model for PostUnlinkExternalAccount.
type PostUnlinkExternalAccount struct {

	// 外部サービス名
	ProviderName string `json:"providerName"`
}

// PostUserGroupAdminRequest defines model for PostUserGroupAdminRequest.
type PostUserGroupAdminRequest struct {

	// 追加するユーザーのUUID
	Id string `json:"id"`
}

// PostUserGroupRequest defines model for PostUserGroupRequest.
type PostUserGroupRequest struct {

	// 説明
	Description string `json:"description"`

	// グループ名
	Name string `json:"name"`

	// グループタイプ
	Type string `json:"type"`
}

// PostUserRequest defines model for PostUserRequest.
type PostUserRequest struct {

	// ユーザー名
	Name string `json:"name"`

	// パスワード
	Password *string `json:"password,omitempty"`
}

// PostUserTagRequest defines model for PostUserTagRequest.
type PostUserTagRequest struct {

	// タグ文字列
	Tag string `json:"tag"`
}

// PostWebRTCAuthenticateRequest defines model for PostWebRTCAuthenticateRequest.
type PostWebRTCAuthenticateRequest struct {

	// ピアID
	PeerId string `json:"peerId"`
}

// PostWebhookRequest defines model for PostWebhookRequest.
type PostWebhookRequest struct {

	// デフォルトの投稿先チャンネルUUID
	ChannelId string `json:"channelId"`

	// 説明
	Description string `json:"description"`

	// Webhookユーザーの表示名
	Name string `json:"name"`

	// Webhookシークレット
	Secret string `json:"secret"`
}

// PutChannelSubscribeLevelRequest defines model for PutChannelSubscribeLevelRequest.
type PutChannelSubscribeLevelRequest struct {

	// チャンネル購読レベル
	// 0：無し
	// 1：未読管理
	// 2：未読管理+通知
	Level ChannelSubscribeLevel `json:"level"`
}

// PutChannelSubscribersRequest defines model for PutChannelSubscribersRequest.
type PutChannelSubscribersRequest struct {

	// 通知をオンにするユーザーのUUID配列
	On []string `json:"on"`
}

// PutChannelTopicRequest defines model for PutChannelTopicRequest.
type PutChannelTopicRequest struct {

	// トピック
	Topic string `json:"topic"`
}

// PutMyPasswordRequest defines model for PutMyPasswordRequest.
type PutMyPasswordRequest struct {

	// 新しいパスワード
	NewPassword string `json:"newPassword"`

	// 現在のパスワード
	Password string `json:"password"`
}

// PutUserIconRequest defines model for PutUserIconRequest.
type PutUserIconRequest struct {

	// アイコン画像(1MBまでのpng, jpeg, gif)
	File string `json:"file"`
}

// PutUserPasswordRequest defines model for PutUserPasswordRequest.
type PutUserPasswordRequest struct {

	// 新しいパスワード
	NewPassword string `json:"newPassword"`
}

// Stamp defines model for Stamp.
type Stamp struct {

	// 作成日時
	CreatedAt time.Time `json:"createdAt"`

	// 作成者UUID
	CreatorId string `json:"creatorId"`

	// ファイルUUID
	FileId string `json:"fileId"`

	// スタンプUUID
	Id string `json:"id"`

	// Unicode絵文字か
	IsUnicode bool `json:"isUnicode"`

	// スタンプ名
	Name string `json:"name"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// StampHistoryEntry defines model for StampHistoryEntry.
type StampHistoryEntry struct {

	// 使用日時
	Datetime time.Time `json:"datetime"`

	// スタンプUUID
	StampId string `json:"stampId"`
}

// StampPalette defines model for StampPalette.
type StampPalette struct {

	// パレット作成日時
	CreatedAt time.Time `json:"createdAt"`

	// 作成者UUID
	CreatorId string `json:"creatorId"`

	// パレット説明
	Description string `json:"description"`

	// スタンプパレットUUID
	Id string `json:"id"`

	// パレット名
	Name string `json:"name"`

	// パレット内のスタンプのUUID配列
	Stamps []string `json:"stamps"`

	// パレット更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// SubscribersChangedEvent defines model for SubscribersChangedEvent.
type SubscribersChangedEvent struct {

	// オフにされたユーザーのUUID配列
	Off []string `json:"off"`

	// オンにされたユーザーのUUID配列
	On []string `json:"on"`

	// 変更者UUID
	UserId string `json:"userId"`
}

// Tag defines model for Tag.
type Tag struct {

	// タグUUID
	Id string `json:"id"`

	// タグ文字列
	Tag string `json:"tag"`

	// タグがつけられているユーザーのUUID配列
	Users []string `json:"users"`
}

// TopicChangedEvent defines model for TopicChangedEvent.
type TopicChangedEvent struct {

	// 変更後トピック
	After string `json:"after"`

	// 変更前トピック
	Before string `json:"before"`

	// 変更者UUID
	UserId string `json:"userId"`
}

// UnreadChannel defines model for UnreadChannel.
type UnreadChannel struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`

	// 未読メッセージ数
	Count int32 `json:"count"`

	// 自分宛てメッセージが含まれているかどうか
	Noticeable bool `json:"noticeable"`

	// チャンネルの最古の未読メッセージの日時
	Since time.Time `json:"since"`

	// チャンネルの最新の未読メッセージの日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// User defines model for User.
type User struct {

	// BOTかどうか
	Bot bool `json:"bot"`

	// ユーザー表示名
	DisplayName string `json:"displayName"`

	// アイコンファイルUUID
	IconFileId string `json:"iconFileId"`

	// ユーザーUUID
	Id string `json:"id"`

	// ユーザー名
	Name string `json:"name"`

	// ユーザーアカウント状態
	// 0: 停止
	// 1: 有効
	// 2: 一時停止
	State UserAccountState `json:"state"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserAccountState defines model for UserAccountState.
type UserAccountState int32

// UserDetail defines model for UserDetail.
type UserDetail struct {

	// 自己紹介(biography)
	Bio string `json:"bio"`

	// BOTかどうか
	Bot bool `json:"bot"`

	// ユーザー表示名
	DisplayName string `json:"displayName"`

	// 所属グループのUUIDの配列
	Groups []string `json:"groups"`

	// ホームチャンネル
	HomeChannel *string `json:"homeChannel"`

	// アイコンファイルUUID
	IconFileId string `json:"iconFileId"`

	// ユーザーUUID
	Id string `json:"id"`

	// 最終オンライン日時
	LastOnline *time.Time `json:"lastOnline"`

	// ユーザー名
	Name string `json:"name"`

	// ユーザーアカウント状態
	// 0: 停止
	// 1: 有効
	// 2: 一時停止
	State UserAccountState `json:"state"`

	// タグリスト
	Tags []UserTag `json:"tags"`

	// Twitter ID
	TwitterId string `json:"twitterId"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserGroup defines model for UserGroup.
type UserGroup struct {

	// グループ管理者のUUIDの配列
	Admins []string `json:"admins"`

	// 作成日時
	CreatedAt time.Time `json:"createdAt"`

	// グループ説明
	Description string `json:"description"`

	// グループUUID
	Id string `json:"id"`

	// グループメンバーの配列
	Members []UserGroupMember `json:"members"`

	// グループ名
	Name string `json:"name"`

	// グループタイプ
	Type string `json:"type"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserGroupMember defines model for UserGroupMember.
type UserGroupMember struct {

	// ユーザーUUID
	Id string `json:"id"`

	// ユーザーの役割
	Role string `json:"role"`
}

// UserPermission defines model for UserPermission.
type UserPermission string

// List of UserPermission
const (
	UserPermission_access_others_bot            UserPermission = "access_others_bot"
	UserPermission_access_others_webhook        UserPermission = "access_others_webhook"
	UserPermission_add_message_stamp            UserPermission = "add_message_stamp"
	UserPermission_bot_action_join_channel      UserPermission = "bot_action_join_channel"
	UserPermission_bot_action_leave_channel     UserPermission = "bot_action_leave_channel"
	UserPermission_change_my_icon               UserPermission = "change_my_icon"
	UserPermission_change_my_password           UserPermission = "change_my_password"
	UserPermission_change_parent_channel        UserPermission = "change_parent_channel"
	UserPermission_connect_notification_stream  UserPermission = "connect_notification_stream"
	UserPermission_create_bot                   UserPermission = "create_bot"
	UserPermission_create_channel               UserPermission = "create_channel"
	UserPermission_create_client                UserPermission = "create_client"
	UserPermission_create_clip_folder           UserPermission = "create_clip_folder"
	UserPermission_create_message_pin           UserPermission = "create_message_pin"
	UserPermission_create_special_user_group    UserPermission = "create_special_user_group"
	UserPermission_create_stamp                 UserPermission = "create_stamp"
	UserPermission_create_stamp_palette         UserPermission = "create_stamp_palette"
	UserPermission_create_user_group            UserPermission = "create_user_group"
	UserPermission_create_webhook               UserPermission = "create_webhook"
	UserPermission_delete_bot                   UserPermission = "delete_bot"
	UserPermission_delete_channel               UserPermission = "delete_channel"
	UserPermission_delete_clip_folder           UserPermission = "delete_clip_folder"
	UserPermission_delete_file                  UserPermission = "delete_file"
	UserPermission_delete_message               UserPermission = "delete_message"
	UserPermission_delete_message_pin           UserPermission = "delete_message_pin"
	UserPermission_delete_my_client             UserPermission = "delete_my_client"
	UserPermission_delete_my_sessions           UserPermission = "delete_my_sessions"
	UserPermission_delete_stamp                 UserPermission = "delete_stamp"
	UserPermission_delete_stamp_palette         UserPermission = "delete_stamp_palette"
	UserPermission_delete_unread                UserPermission = "delete_unread"
	UserPermission_delete_user_group            UserPermission = "delete_user_group"
	UserPermission_delete_webhook               UserPermission = "delete_webhook"
	UserPermission_download_file                UserPermission = "download_file"
	UserPermission_edit_bot                     UserPermission = "edit_bot"
	UserPermission_edit_channel                 UserPermission = "edit_channel"
	UserPermission_edit_channel_star            UserPermission = "edit_channel_star"
	UserPermission_edit_channel_subscription    UserPermission = "edit_channel_subscription"
	UserPermission_edit_channel_topic           UserPermission = "edit_channel_topic"
	UserPermission_edit_clip_folder             UserPermission = "edit_clip_folder"
	UserPermission_edit_me                      UserPermission = "edit_me"
	UserPermission_edit_message                 UserPermission = "edit_message"
	UserPermission_edit_my_client               UserPermission = "edit_my_client"
	UserPermission_edit_my_external_account     UserPermission = "edit_my_external_account"
	UserPermission_edit_other_users             UserPermission = "edit_other_users"
	UserPermission_edit_stamp                   UserPermission = "edit_stamp"
	UserPermission_edit_stamp_created_by_others UserPermission = "edit_stamp_created_by_others"
	UserPermission_edit_stamp_palette           UserPermission = "edit_stamp_palette"
	UserPermission_edit_user_group              UserPermission = "edit_user_group"
	UserPermission_edit_user_tag                UserPermission = "edit_user_tag"
	UserPermission_edit_webhook                 UserPermission = "edit_webhook"
	UserPermission_get_bot                      UserPermission = "get_bot"
	UserPermission_get_channel                  UserPermission = "get_channel"
	UserPermission_get_channel_star             UserPermission = "get_channel_star"
	UserPermission_get_channel_subscription     UserPermission = "get_channel_subscription"
	UserPermission_get_clients                  UserPermission = "get_clients"
	UserPermission_get_clip_folder              UserPermission = "get_clip_folder"
	UserPermission_get_me                       UserPermission = "get_me"
	UserPermission_get_message                  UserPermission = "get_message"
	UserPermission_get_message_reports          UserPermission = "get_message_reports"
	UserPermission_get_my_external_account      UserPermission = "get_my_external_account"
	UserPermission_get_my_sessions              UserPermission = "get_my_sessions"
	UserPermission_get_my_stamp_history         UserPermission = "get_my_stamp_history"
	UserPermission_get_my_tokens                UserPermission = "get_my_tokens"
	UserPermission_get_stamp                    UserPermission = "get_stamp"
	UserPermission_get_stamp_palette            UserPermission = "get_stamp_palette"
	UserPermission_get_unread                   UserPermission = "get_unread"
	UserPermission_get_user                     UserPermission = "get_user"
	UserPermission_get_user_group               UserPermission = "get_user_group"
	UserPermission_get_user_qr_code             UserPermission = "get_user_qr_code"
	UserPermission_get_user_tag                 UserPermission = "get_user_tag"
	UserPermission_get_webhook                  UserPermission = "get_webhook"
	UserPermission_manage_others_client         UserPermission = "manage_others_client"
	UserPermission_post_message                 UserPermission = "post_message"
	UserPermission_register_fcm_device          UserPermission = "register_fcm_device"
	UserPermission_register_user                UserPermission = "register_user"
	UserPermission_remove_message_stamp         UserPermission = "remove_message_stamp"
	UserPermission_report_message               UserPermission = "report_message"
	UserPermission_revoke_my_token              UserPermission = "revoke_my_token"
	UserPermission_upload_file                  UserPermission = "upload_file"
	UserPermission_web_rtc                      UserPermission = "web_rtc"
)

// UserSubscribeState defines model for UserSubscribeState.
type UserSubscribeState struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`

	// チャンネル購読レベル
	// 0：無し
	// 1：未読管理
	// 2：未読管理+通知
	Level ChannelSubscribeLevel `json:"level"`
}

// UserTag defines model for UserTag.
type UserTag struct {

	// タグ付与日時
	CreatedAt time.Time `json:"createdAt"`

	// タグがロックされているか
	IsLocked bool `json:"isLocked"`

	// タグ文字列
	Tag string `json:"tag"`

	// タグUUID
	TagId string `json:"tagId"`

	// タグ更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// Version defines model for Version.
type Version struct {
	Flags struct {

		// 有効な外部ログインプロバイダ
		ExternalLogin []string `json:"externalLogin"`
	} `json:"flags"`

	// traQ(サーバー)リビジョン
	Revision string `json:"revision"`

	// traQ(サーバー)バージョン
	Version string `json:"version"`
}

// VisibilityChangedEvent defines model for VisibilityChangedEvent.
type VisibilityChangedEvent struct {

	// 変更者UUID
	UserId string `json:"userId"`

	// 変更後可視状態
	Visibility bool `json:"visibility"`
}

// WebRTCAuthenticateResult defines model for WebRTCAuthenticateResult.
type WebRTCAuthenticateResult struct {

	// 認証トークン
	AuthToken string `json:"authToken"`

	// ピアID
	PeerId string `json:"peerId"`

	// タイムスタンプ
	Timestamp int64 `json:"timestamp"`

	// TTL
	Ttl int32 `json:"ttl"`
}

// WebRTCUserState defines model for WebRTCUserState.
type WebRTCUserState struct {

	// チャンネルUUID
	ChannelId string `json:"channelId"`

	// セッションの配列
	Sessions []struct {

		// セッションID
		SessionId string `json:"sessionId"`

		// 状態
		State string `json:"state"`
	} `json:"sessions"`

	// ユーザーUUID
	UserId string `json:"userId"`
}

// WebRTCUserStates defines model for WebRTCUserStates.
type WebRTCUserStates []WebRTCUserState

// Webhook defines model for Webhook.
type Webhook struct {

	// WebhookユーザーUUID
	BotUserId string `json:"botUserId"`

	// デフォルトの投稿先チャンネルUUID
	ChannelId string `json:"channelId"`

	// 作成日時
	CreatedAt time.Time `json:"createdAt"`

	// 説明
	Description string `json:"description"`

	// Webhookユーザー表示名
	DisplayName string `json:"displayName"`

	// WebhookUUID
	Id string `json:"id"`

	// オーナーUUID
	OwnerId string `json:"ownerId"`

	// セキュアWebhookかどうか
	Secure bool `json:"secure"`

	// 更新日時
	UpdatedAt time.Time `json:"updatedAt"`
}

// BotIdInPath defines model for botIdInPath.
type BotIdInPath string

// ChannelIdInPath defines model for channelIdInPath.
type ChannelIdInPath string

// ClientIdInPath defines model for clientIdInPath.
type ClientIdInPath string

// FileIdInPath defines model for fileIdInPath.
type FileIdInPath string

// FolderIdInPath defines model for folderIdInPath.
type FolderIdInPath string

// GroupIdInPath defines model for groupIdInPath.
type GroupIdInPath string

// InclusiveInQuery defines model for inclusiveInQuery.
type InclusiveInQuery bool

// LimitInQuery defines model for limitInQuery.
type LimitInQuery int

// MessageIdInPath defines model for messageIdInPath.
type MessageIdInPath string

// OffsetInQuery defines model for offsetInQuery.
type OffsetInQuery int

// OrderInQuery defines model for orderInQuery.
type OrderInQuery string

// List of OrderInQuery
const (
	OrderInQuery_asc  OrderInQuery = "asc"
	OrderInQuery_desc OrderInQuery = "desc"
)

// PaletteIdInPath defines model for paletteIdInPath.
type PaletteIdInPath string

// RedirectInQuery defines model for redirectInQuery.
type RedirectInQuery string

// SessionIdInPath defines model for sessionIdInPath.
type SessionIdInPath string

// SinceInQuery defines model for sinceInQuery.
type SinceInQuery time.Time

// StampIdInPath defines model for stampIdInPath.
type StampIdInPath string

// TagIdInPath defines model for tagIdInPath.
type TagIdInPath string

// TokenIdInPath defines model for tokenIdInPath.
type TokenIdInPath string

// UntilInQuery defines model for untilInQuery.
type UntilInQuery time.Time

// UserIdInPath defines model for userIdInPath.
type UserIdInPath string

// WebhookIdInPath defines model for webhookIdInPath.
type WebhookIdInPath string

// GetActivityTimelineParams defines parameters for GetActivityTimeline.
type GetActivityTimelineParams struct {

	// 取得する件数
	Limit *int `json:"limit,omitempty"`

	// 全てのチャンネルのタイムラインを取得する
	All *bool `json:"all,omitempty"`

	// 同じチャンネルのメッセージは最新のもののみ取得するか
	PerChannel *bool `json:"per_channel,omitempty"`
}

// GetBotsParams defines parameters for GetBots.
type GetBotsParams struct {

	// 全てのBOTを取得するかどうか
	All *bool `json:"all,omitempty"`
}

// CreateBotJSONBody defines parameters for CreateBot.
type CreateBotJSONBody PostBotRequest

// GetBotParams defines parameters for GetBot.
type GetBotParams struct {

	// 詳細情報を含めるかどうか
	Detail *bool `json:"detail,omitempty"`
}

// EditBotJSONBody defines parameters for EditBot.
type EditBotJSONBody PatchBotRequest

// LetBotJoinChannelJSONBody defines parameters for LetBotJoinChannel.
type LetBotJoinChannelJSONBody PostBotActionJoinRequest

// LetBotLeaveChannelJSONBody defines parameters for LetBotLeaveChannel.
type LetBotLeaveChannelJSONBody PostBotActionLeaveRequest

// GetBotLogsParams defines parameters for GetBotLogs.
type GetBotLogsParams struct {

	// 取得する件数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するオフセット
	Offset *OffsetInQuery `json:"offset,omitempty"`
}

// GetChannelsParams defines parameters for GetChannels.
type GetChannelsParams struct {

	// ダイレクトメッセージチャンネルをレスポンスに含めるかどうか
	IncludeDm *bool `json:"include-dm,omitempty"`
}

// CreateChannelJSONBody defines parameters for CreateChannel.
type CreateChannelJSONBody PostChannelRequest

// EditChannelJSONBody defines parameters for EditChannel.
type EditChannelJSONBody PatchChannelRequest

// GetChannelEventsParams defines parameters for GetChannelEvents.
type GetChannelEventsParams struct {

	// 取得する件数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するオフセット
	Offset *OffsetInQuery `json:"offset,omitempty"`

	// 取得する時間範囲の開始日時
	Since *SinceInQuery `json:"since,omitempty"`

	// 取得する時間範囲の終了日時
	Until *UntilInQuery `json:"until,omitempty"`

	// 範囲の端を含めるかどうか
	Inclusive *InclusiveInQuery `json:"inclusive,omitempty"`

	// 昇順か降順か
	Order *OrderInQuery `json:"order,omitempty"`
}

// GetMessagesParams defines parameters for GetMessages.
type GetMessagesParams struct {

	// 取得する件数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するオフセット
	Offset *OffsetInQuery `json:"offset,omitempty"`

	// 取得する時間範囲の開始日時
	Since *SinceInQuery `json:"since,omitempty"`

	// 取得する時間範囲の終了日時
	Until *UntilInQuery `json:"until,omitempty"`

	// 範囲の端を含めるかどうか
	Inclusive *InclusiveInQuery `json:"inclusive,omitempty"`

	// 昇順か降順か
	Order *OrderInQuery `json:"order,omitempty"`
}

// PostMessageJSONBody defines parameters for PostMessage.
type PostMessageJSONBody PostMessageRequest

// EditChannelSubscribersJSONBody defines parameters for EditChannelSubscribers.
type EditChannelSubscribersJSONBody PatchChannelSubscribersRequest

// SetChannelSubscribersJSONBody defines parameters for SetChannelSubscribers.
type SetChannelSubscribersJSONBody PutChannelSubscribersRequest

// EditChannelTopicJSONBody defines parameters for EditChannelTopic.
type EditChannelTopicJSONBody PutChannelTopicRequest

// GetClientsParams defines parameters for GetClients.
type GetClientsParams struct {

	// 全てのクライアントを取得するかどうか
	All *bool `json:"all,omitempty"`
}

// CreateClientJSONBody defines parameters for CreateClient.
type CreateClientJSONBody PostClientRequest

// GetClientParams defines parameters for GetClient.
type GetClientParams struct {

	// 詳細情報を含めるかどうか
	Detail *bool `json:"detail,omitempty"`
}

// EditClientJSONBody defines parameters for EditClient.
type EditClientJSONBody PatchClientRequest

// CreateClipFolderJSONBody defines parameters for CreateClipFolder.
type CreateClipFolderJSONBody PostClipFolderRequest

// EditClipFolderJSONBody defines parameters for EditClipFolder.
type EditClipFolderJSONBody PatchClipFolderRequest

// GetClipsParams defines parameters for GetClips.
type GetClipsParams struct {

	// 取得する件数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するオフセット
	Offset *OffsetInQuery `json:"offset,omitempty"`

	// 昇順か降順か
	Order *OrderInQuery `json:"order,omitempty"`
}

// ClipMessageJSONBody defines parameters for ClipMessage.
type ClipMessageJSONBody PostClipFolderMessageRequest

// GetFilesParams defines parameters for GetFiles.
type GetFilesParams struct {

	// アップロード先チャンネルUUID
	ChannelId *string `json:"channelId,omitempty"`

	// 取得する件数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するオフセット
	Offset *OffsetInQuery `json:"offset,omitempty"`

	// 取得する時間範囲の開始日時
	Since *SinceInQuery `json:"since,omitempty"`

	// 取得する時間範囲の終了日時
	Until *UntilInQuery `json:"until,omitempty"`

	// 範囲の端を含めるかどうか
	Inclusive *InclusiveInQuery `json:"inclusive,omitempty"`

	// 昇順か降順か
	Order *OrderInQuery `json:"order,omitempty"`

	// アップロード者が自分のファイルのみを取得するか
	Mine *bool `json:"mine,omitempty"`
}

// GetFileParams defines parameters for GetFile.
type GetFileParams struct {

	// 1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます
	Dl *int `json:"dl,omitempty"`
}

// CreateUserGroupJSONBody defines parameters for CreateUserGroup.
type CreateUserGroupJSONBody PostUserGroupRequest

// EditUserGroupJSONBody defines parameters for EditUserGroup.
type EditUserGroupJSONBody PatchUserGroupRequest

// AddUserGroupAdminJSONBody defines parameters for AddUserGroupAdmin.
type AddUserGroupAdminJSONBody PostUserGroupAdminRequest

// AddUserGroupMemberJSONBody defines parameters for AddUserGroupMember.
type AddUserGroupMemberJSONBody UserGroupMember

// EditUserGroupMemberJSONBody defines parameters for EditUserGroupMember.
type EditUserGroupMemberJSONBody PatchGroupMemberRequest

// LoginJSONBody defines parameters for Login.
type LoginJSONBody PostLoginRequest

// LoginParams defines parameters for Login.
type LoginParams struct {

	// リダイレクト先
	Redirect *RedirectInQuery `json:"redirect,omitempty"`
}

// LogoutParams defines parameters for Logout.
type LogoutParams struct {

	// リダイレクト先
	Redirect *RedirectInQuery `json:"redirect,omitempty"`

	// 全てのセッションでログアウトするかどうか
	All *bool `json:"all,omitempty"`
}

// EditMessageJSONBody defines parameters for EditMessage.
type EditMessageJSONBody PostMessageRequest

// AddMessageStampJSONBody defines parameters for AddMessageStamp.
type AddMessageStampJSONBody PostMessageStampRequest

// GetOAuth2AuthorizeParams defines parameters for GetOAuth2Authorize.
type GetOAuth2AuthorizeParams struct {
	ResponseType        *OAuth2ResponseType `json:"response_type,omitempty"`
	ClientId            string              `json:"client_id"`
	RedirectUri         *string             `json:"redirect_uri,omitempty"`
	Scope               *string             `json:"scope,omitempty"`
	State               *string             `json:"state,omitempty"`
	CodeChallenge       *string             `json:"code_challenge,omitempty"`
	CodeChallengeMethod *string             `json:"code_challenge_method,omitempty"`
	Nonce               *string             `json:"nonce,omitempty"`
	Prompt              *OAuth2Prompt       `json:"prompt,omitempty"`
}

// RevokeOAuth2TokenJSONBody defines parameters for RevokeOAuth2Token.
type RevokeOAuth2TokenJSONBody PostOAuth2Revoke

// GetOgpParams defines parameters for GetOgp.
type GetOgpParams struct {

	// OGPを取得したいURL
	Url *string `json:"url,omitempty"`
}

// CreateStampPaletteJSONBody defines parameters for CreateStampPalette.
type CreateStampPaletteJSONBody PostStampPaletteRequest

// EditStampPaletteJSONBody defines parameters for EditStampPalette.
type EditStampPaletteJSONBody PatchStampPaletteRequest

// GetStampsParams defines parameters for GetStamps.
type GetStampsParams struct {

	// Unicode絵文字を含ませるかどうか
	IncludeUnicode *bool `json:"include-unicode,omitempty"`
}

// EditStampJSONBody defines parameters for EditStamp.
type EditStampJSONBody PatchStampRequest

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {

	// アカウントがアクティブでないユーザーを含めるかどうか
	IncludeSuspended *bool `json:"include-suspended,omitempty"`
}

// CreateUserJSONBody defines parameters for CreateUser.
type CreateUserJSONBody PostUserRequest

// EditMeJSONBody defines parameters for EditMe.
type EditMeJSONBody PatchMeRequest

// LinkExternalAccountJSONBody defines parameters for LinkExternalAccount.
type LinkExternalAccountJSONBody PostLinkExternalAccount

// UnlinkExternalAccountJSONBody defines parameters for UnlinkExternalAccount.
type UnlinkExternalAccountJSONBody PostUnlinkExternalAccount

// RegisterFCMDeviceJSONBody defines parameters for RegisterFCMDevice.
type RegisterFCMDeviceJSONBody PostMyFCMDeviceRequest

// ChangeMyPasswordJSONBody defines parameters for ChangeMyPassword.
type ChangeMyPasswordJSONBody PutMyPasswordRequest

// GetMyQRCodeParams defines parameters for GetMyQRCode.
type GetMyQRCodeParams struct {

	// 画像でなくトークン文字列で返すかどうか
	Token *bool `json:"token,omitempty"`
}

// GetMyStampHistoryParams defines parameters for GetMyStampHistory.
type GetMyStampHistoryParams struct {

	// 件数
	Limit *int `json:"limit,omitempty"`
}

// AddMyStarJSONBody defines parameters for AddMyStar.
type AddMyStarJSONBody PostStarRequest

// SetChannelSubscribeLevelJSONBody defines parameters for SetChannelSubscribeLevel.
type SetChannelSubscribeLevelJSONBody PutChannelSubscribeLevelRequest

// AddMyUserTagJSONBody defines parameters for AddMyUserTag.
type AddMyUserTagJSONBody PostUserTagRequest

// EditMyUserTagJSONBody defines parameters for EditMyUserTag.
type EditMyUserTagJSONBody PatchUserTagRequest

// EditUserJSONBody defines parameters for EditUser.
type EditUserJSONBody PatchUserRequest

// GetDirectMessagesParams defines parameters for GetDirectMessages.
type GetDirectMessagesParams struct {

	// 取得する件数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するオフセット
	Offset *OffsetInQuery `json:"offset,omitempty"`

	// 取得する時間範囲の開始日時
	Since *SinceInQuery `json:"since,omitempty"`

	// 取得する時間範囲の終了日時
	Until *UntilInQuery `json:"until,omitempty"`

	// 範囲の端を含めるかどうか
	Inclusive *InclusiveInQuery `json:"inclusive,omitempty"`

	// 昇順か降順か
	Order *OrderInQuery `json:"order,omitempty"`
}

// PostDirectMessageJSONBody defines parameters for PostDirectMessage.
type PostDirectMessageJSONBody PostMessageRequest

// ChangeUserPasswordJSONBody defines parameters for ChangeUserPassword.
type ChangeUserPasswordJSONBody PutUserPasswordRequest

// AddUserTagJSONBody defines parameters for AddUserTag.
type AddUserTagJSONBody PostUserTagRequest

// EditUserTagJSONBody defines parameters for EditUserTag.
type EditUserTagJSONBody PatchUserTagRequest

// GetWebhooksParams defines parameters for GetWebhooks.
type GetWebhooksParams struct {

	// 全てのWebhookを取得します。権限が必要です。
	All *bool `json:"all,omitempty"`
}

// CreateWebhookJSONBody defines parameters for CreateWebhook.
type CreateWebhookJSONBody PostWebhookRequest

// EditWebhookJSONBody defines parameters for EditWebhook.
type EditWebhookJSONBody PatchWebhookRequest

// PostWebhookParams defines parameters for PostWebhook.
type PostWebhookParams struct {

	// メンション・チャンネルリンクを自動埋め込みする場合に1を指定する
	Embed *int `json:"embed,omitempty"`

	// リクエストボディシグネチャ(Secretが設定されている場合は必須)
	XTRAQSignature *string `json:"X-TRAQ-Signature,omitempty"`

	// 投稿先のチャンネルID(変更する場合)
	XTRAQChannelId *string `json:"X-TRAQ-Channel-Id,omitempty"`
}

// GetWebhookMessagesParams defines parameters for GetWebhookMessages.
type GetWebhookMessagesParams struct {

	// 取得する件数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するオフセット
	Offset *OffsetInQuery `json:"offset,omitempty"`

	// 取得する時間範囲の開始日時
	Since *SinceInQuery `json:"since,omitempty"`

	// 取得する時間範囲の終了日時
	Until *UntilInQuery `json:"until,omitempty"`

	// 範囲の端を含めるかどうか
	Inclusive *InclusiveInQuery `json:"inclusive,omitempty"`

	// 昇順か降順か
	Order *OrderInQuery `json:"order,omitempty"`
}

// PostWebRTCAuthenticateJSONBody defines parameters for PostWebRTCAuthenticate.
type PostWebRTCAuthenticateJSONBody PostWebRTCAuthenticateRequest

// CreateBotRequestBody defines body for CreateBot for application/json ContentType.
type CreateBotJSONRequestBody CreateBotJSONBody

// EditBotRequestBody defines body for EditBot for application/json ContentType.
type EditBotJSONRequestBody EditBotJSONBody

// LetBotJoinChannelRequestBody defines body for LetBotJoinChannel for application/json ContentType.
type LetBotJoinChannelJSONRequestBody LetBotJoinChannelJSONBody

// LetBotLeaveChannelRequestBody defines body for LetBotLeaveChannel for application/json ContentType.
type LetBotLeaveChannelJSONRequestBody LetBotLeaveChannelJSONBody

// CreateChannelRequestBody defines body for CreateChannel for application/json ContentType.
type CreateChannelJSONRequestBody CreateChannelJSONBody

// EditChannelRequestBody defines body for EditChannel for application/json ContentType.
type EditChannelJSONRequestBody EditChannelJSONBody

// PostMessageRequestBody defines body for PostMessage for application/json ContentType.
type PostMessageJSONRequestBody PostMessageJSONBody

// EditChannelSubscribersRequestBody defines body for EditChannelSubscribers for application/json ContentType.
type EditChannelSubscribersJSONRequestBody EditChannelSubscribersJSONBody

// SetChannelSubscribersRequestBody defines body for SetChannelSubscribers for application/json ContentType.
type SetChannelSubscribersJSONRequestBody SetChannelSubscribersJSONBody

// EditChannelTopicRequestBody defines body for EditChannelTopic for application/json ContentType.
type EditChannelTopicJSONRequestBody EditChannelTopicJSONBody

// CreateClientRequestBody defines body for CreateClient for application/json ContentType.
type CreateClientJSONRequestBody CreateClientJSONBody

// EditClientRequestBody defines body for EditClient for application/json ContentType.
type EditClientJSONRequestBody EditClientJSONBody

// CreateClipFolderRequestBody defines body for CreateClipFolder for application/json ContentType.
type CreateClipFolderJSONRequestBody CreateClipFolderJSONBody

// EditClipFolderRequestBody defines body for EditClipFolder for application/json ContentType.
type EditClipFolderJSONRequestBody EditClipFolderJSONBody

// ClipMessageRequestBody defines body for ClipMessage for application/json ContentType.
type ClipMessageJSONRequestBody ClipMessageJSONBody

// CreateUserGroupRequestBody defines body for CreateUserGroup for application/json ContentType.
type CreateUserGroupJSONRequestBody CreateUserGroupJSONBody

// EditUserGroupRequestBody defines body for EditUserGroup for application/json ContentType.
type EditUserGroupJSONRequestBody EditUserGroupJSONBody

// AddUserGroupAdminRequestBody defines body for AddUserGroupAdmin for application/json ContentType.
type AddUserGroupAdminJSONRequestBody AddUserGroupAdminJSONBody

// AddUserGroupMemberRequestBody defines body for AddUserGroupMember for application/json ContentType.
type AddUserGroupMemberJSONRequestBody AddUserGroupMemberJSONBody

// EditUserGroupMemberRequestBody defines body for EditUserGroupMember for application/json ContentType.
type EditUserGroupMemberJSONRequestBody EditUserGroupMemberJSONBody

// LoginRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// EditMessageRequestBody defines body for EditMessage for application/json ContentType.
type EditMessageJSONRequestBody EditMessageJSONBody

// AddMessageStampRequestBody defines body for AddMessageStamp for application/json ContentType.
type AddMessageStampJSONRequestBody AddMessageStampJSONBody

// RevokeOAuth2TokenRequestBody defines body for RevokeOAuth2Token for application/json ContentType.
type RevokeOAuth2TokenJSONRequestBody RevokeOAuth2TokenJSONBody

// CreateStampPaletteRequestBody defines body for CreateStampPalette for application/json ContentType.
type CreateStampPaletteJSONRequestBody CreateStampPaletteJSONBody

// EditStampPaletteRequestBody defines body for EditStampPalette for application/json ContentType.
type EditStampPaletteJSONRequestBody EditStampPaletteJSONBody

// EditStampRequestBody defines body for EditStamp for application/json ContentType.
type EditStampJSONRequestBody EditStampJSONBody

// CreateUserRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody CreateUserJSONBody

// EditMeRequestBody defines body for EditMe for application/json ContentType.
type EditMeJSONRequestBody EditMeJSONBody

// LinkExternalAccountRequestBody defines body for LinkExternalAccount for application/json ContentType.
type LinkExternalAccountJSONRequestBody LinkExternalAccountJSONBody

// UnlinkExternalAccountRequestBody defines body for UnlinkExternalAccount for application/json ContentType.
type UnlinkExternalAccountJSONRequestBody UnlinkExternalAccountJSONBody

// RegisterFCMDeviceRequestBody defines body for RegisterFCMDevice for application/json ContentType.
type RegisterFCMDeviceJSONRequestBody RegisterFCMDeviceJSONBody

// ChangeMyPasswordRequestBody defines body for ChangeMyPassword for application/json ContentType.
type ChangeMyPasswordJSONRequestBody ChangeMyPasswordJSONBody

// AddMyStarRequestBody defines body for AddMyStar for application/json ContentType.
type AddMyStarJSONRequestBody AddMyStarJSONBody

// SetChannelSubscribeLevelRequestBody defines body for SetChannelSubscribeLevel for application/json ContentType.
type SetChannelSubscribeLevelJSONRequestBody SetChannelSubscribeLevelJSONBody

// AddMyUserTagRequestBody defines body for AddMyUserTag for application/json ContentType.
type AddMyUserTagJSONRequestBody AddMyUserTagJSONBody

// EditMyUserTagRequestBody defines body for EditMyUserTag for application/json ContentType.
type EditMyUserTagJSONRequestBody EditMyUserTagJSONBody

// EditUserRequestBody defines body for EditUser for application/json ContentType.
type EditUserJSONRequestBody EditUserJSONBody

// PostDirectMessageRequestBody defines body for PostDirectMessage for application/json ContentType.
type PostDirectMessageJSONRequestBody PostDirectMessageJSONBody

// ChangeUserPasswordRequestBody defines body for ChangeUserPassword for application/json ContentType.
type ChangeUserPasswordJSONRequestBody ChangeUserPasswordJSONBody

// AddUserTagRequestBody defines body for AddUserTag for application/json ContentType.
type AddUserTagJSONRequestBody AddUserTagJSONBody

// EditUserTagRequestBody defines body for EditUserTag for application/json ContentType.
type EditUserTagJSONRequestBody EditUserTagJSONBody

// CreateWebhookRequestBody defines body for CreateWebhook for application/json ContentType.
type CreateWebhookJSONRequestBody CreateWebhookJSONBody

// EditWebhookRequestBody defines body for EditWebhook for application/json ContentType.
type EditWebhookJSONRequestBody EditWebhookJSONBody

// PostWebRTCAuthenticateRequestBody defines body for PostWebRTCAuthenticate for application/json ContentType.
type PostWebRTCAuthenticateJSONRequestBody PostWebRTCAuthenticateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOnlineUsers request
	GetOnlineUsers(ctx context.Context) (*http.Response, error)

	// GetActivityTimeline request
	GetActivityTimeline(ctx context.Context, params *GetActivityTimelineParams) (*http.Response, error)

	// GetBots request
	GetBots(ctx context.Context, params *GetBotsParams) (*http.Response, error)

	// CreateBot request  with any body
	CreateBotWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateBot(ctx context.Context, body CreateBotJSONRequestBody) (*http.Response, error)

	// DeleteBot request
	DeleteBot(ctx context.Context, botId BotIdInPath) (*http.Response, error)

	// GetBot request
	GetBot(ctx context.Context, botId BotIdInPath, params *GetBotParams) (*http.Response, error)

	// EditBot request  with any body
	EditBotWithBody(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditBot(ctx context.Context, botId BotIdInPath, body EditBotJSONRequestBody) (*http.Response, error)

	// ActivateBot request
	ActivateBot(ctx context.Context, botId BotIdInPath) (*http.Response, error)

	// InactivateBot request
	InactivateBot(ctx context.Context, botId BotIdInPath) (*http.Response, error)

	// LetBotJoinChannel request  with any body
	LetBotJoinChannelWithBody(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*http.Response, error)

	LetBotJoinChannel(ctx context.Context, botId BotIdInPath, body LetBotJoinChannelJSONRequestBody) (*http.Response, error)

	// LetBotLeaveChannel request  with any body
	LetBotLeaveChannelWithBody(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*http.Response, error)

	LetBotLeaveChannel(ctx context.Context, botId BotIdInPath, body LetBotLeaveChannelJSONRequestBody) (*http.Response, error)

	// ReissueBot request
	ReissueBot(ctx context.Context, botId BotIdInPath) (*http.Response, error)

	// GetBotIcon request
	GetBotIcon(ctx context.Context, botId BotIdInPath) (*http.Response, error)

	// ChangeBotIcon request  with any body
	ChangeBotIconWithBody(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*http.Response, error)

	// GetBotLogs request
	GetBotLogs(ctx context.Context, botId BotIdInPath, params *GetBotLogsParams) (*http.Response, error)

	// GetChannels request
	GetChannels(ctx context.Context, params *GetChannelsParams) (*http.Response, error)

	// CreateChannel request  with any body
	CreateChannelWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateChannel(ctx context.Context, body CreateChannelJSONRequestBody) (*http.Response, error)

	// GetChannel request
	GetChannel(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// EditChannel request  with any body
	EditChannelWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditChannel(ctx context.Context, channelId ChannelIdInPath, body EditChannelJSONRequestBody) (*http.Response, error)

	// GetChannelBots request
	GetChannelBots(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// GetChannelEvents request
	GetChannelEvents(ctx context.Context, channelId ChannelIdInPath, params *GetChannelEventsParams) (*http.Response, error)

	// GetMessages request
	GetMessages(ctx context.Context, channelId ChannelIdInPath, params *GetMessagesParams) (*http.Response, error)

	// PostMessage request  with any body
	PostMessageWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error)

	PostMessage(ctx context.Context, channelId ChannelIdInPath, body PostMessageJSONRequestBody) (*http.Response, error)

	// GetChannelPins request
	GetChannelPins(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// GetChannelStats request
	GetChannelStats(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// GetChannelSubscribers request
	GetChannelSubscribers(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// EditChannelSubscribers request  with any body
	EditChannelSubscribersWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditChannelSubscribers(ctx context.Context, channelId ChannelIdInPath, body EditChannelSubscribersJSONRequestBody) (*http.Response, error)

	// SetChannelSubscribers request  with any body
	SetChannelSubscribersWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error)

	SetChannelSubscribers(ctx context.Context, channelId ChannelIdInPath, body SetChannelSubscribersJSONRequestBody) (*http.Response, error)

	// GetChannelTopic request
	GetChannelTopic(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// EditChannelTopic request  with any body
	EditChannelTopicWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditChannelTopic(ctx context.Context, channelId ChannelIdInPath, body EditChannelTopicJSONRequestBody) (*http.Response, error)

	// GetChannelViewers request
	GetChannelViewers(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// GetClients request
	GetClients(ctx context.Context, params *GetClientsParams) (*http.Response, error)

	// CreateClient request  with any body
	CreateClientWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateClient(ctx context.Context, body CreateClientJSONRequestBody) (*http.Response, error)

	// DeleteClient request
	DeleteClient(ctx context.Context, clientId ClientIdInPath) (*http.Response, error)

	// GetClient request
	GetClient(ctx context.Context, clientId ClientIdInPath, params *GetClientParams) (*http.Response, error)

	// EditClient request  with any body
	EditClientWithBody(ctx context.Context, clientId ClientIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditClient(ctx context.Context, clientId ClientIdInPath, body EditClientJSONRequestBody) (*http.Response, error)

	// GetClipFolders request
	GetClipFolders(ctx context.Context) (*http.Response, error)

	// CreateClipFolder request  with any body
	CreateClipFolderWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateClipFolder(ctx context.Context, body CreateClipFolderJSONRequestBody) (*http.Response, error)

	// DeleteClipFolder request
	DeleteClipFolder(ctx context.Context, folderId FolderIdInPath) (*http.Response, error)

	// GetClipFolder request
	GetClipFolder(ctx context.Context, folderId FolderIdInPath) (*http.Response, error)

	// EditClipFolder request  with any body
	EditClipFolderWithBody(ctx context.Context, folderId FolderIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditClipFolder(ctx context.Context, folderId FolderIdInPath, body EditClipFolderJSONRequestBody) (*http.Response, error)

	// GetClips request
	GetClips(ctx context.Context, folderId FolderIdInPath, params *GetClipsParams) (*http.Response, error)

	// ClipMessage request  with any body
	ClipMessageWithBody(ctx context.Context, folderId FolderIdInPath, contentType string, body io.Reader) (*http.Response, error)

	ClipMessage(ctx context.Context, folderId FolderIdInPath, body ClipMessageJSONRequestBody) (*http.Response, error)

	// UnclipMessage request
	UnclipMessage(ctx context.Context, folderId FolderIdInPath, messageId MessageIdInPath) (*http.Response, error)

	// GetFiles request
	GetFiles(ctx context.Context, params *GetFilesParams) (*http.Response, error)

	// PostFile request  with any body
	PostFileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	// DeleteFile request
	DeleteFile(ctx context.Context, fileId FileIdInPath) (*http.Response, error)

	// GetFile request
	GetFile(ctx context.Context, fileId FileIdInPath, params *GetFileParams) (*http.Response, error)

	// GetFileMeta request
	GetFileMeta(ctx context.Context, fileId FileIdInPath) (*http.Response, error)

	// GetThumbnailImage request
	GetThumbnailImage(ctx context.Context, fileId FileIdInPath) (*http.Response, error)

	// GetUserGroups request
	GetUserGroups(ctx context.Context) (*http.Response, error)

	// CreateUserGroup request  with any body
	CreateUserGroupWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateUserGroup(ctx context.Context, body CreateUserGroupJSONRequestBody) (*http.Response, error)

	// DeleteUserGroup request
	DeleteUserGroup(ctx context.Context, groupId GroupIdInPath) (*http.Response, error)

	// GetUserGroup request
	GetUserGroup(ctx context.Context, groupId GroupIdInPath) (*http.Response, error)

	// EditUserGroup request  with any body
	EditUserGroupWithBody(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditUserGroup(ctx context.Context, groupId GroupIdInPath, body EditUserGroupJSONRequestBody) (*http.Response, error)

	// GetUserGroupAdmins request
	GetUserGroupAdmins(ctx context.Context, groupId GroupIdInPath) (*http.Response, error)

	// AddUserGroupAdmin request  with any body
	AddUserGroupAdminWithBody(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Response, error)

	AddUserGroupAdmin(ctx context.Context, groupId GroupIdInPath, body AddUserGroupAdminJSONRequestBody) (*http.Response, error)

	// RemoveUserGroupAdmin request
	RemoveUserGroupAdmin(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath) (*http.Response, error)

	// GetUserGroupMembers request
	GetUserGroupMembers(ctx context.Context, groupId GroupIdInPath) (*http.Response, error)

	// AddUserGroupMember request  with any body
	AddUserGroupMemberWithBody(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Response, error)

	AddUserGroupMember(ctx context.Context, groupId GroupIdInPath, body AddUserGroupMemberJSONRequestBody) (*http.Response, error)

	// RemoveUserGroupMember request
	RemoveUserGroupMember(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath) (*http.Response, error)

	// EditUserGroupMember request  with any body
	EditUserGroupMemberWithBody(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditUserGroupMember(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath, body EditUserGroupMemberJSONRequestBody) (*http.Response, error)

	// Login request  with any body
	LoginWithBody(ctx context.Context, params *LoginParams, contentType string, body io.Reader) (*http.Response, error)

	Login(ctx context.Context, params *LoginParams, body LoginJSONRequestBody) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, params *LogoutParams) (*http.Response, error)

	// DeleteMessage request
	DeleteMessage(ctx context.Context, messageId MessageIdInPath) (*http.Response, error)

	// GetMessage request
	GetMessage(ctx context.Context, messageId MessageIdInPath) (*http.Response, error)

	// EditMessage request  with any body
	EditMessageWithBody(ctx context.Context, messageId MessageIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditMessage(ctx context.Context, messageId MessageIdInPath, body EditMessageJSONRequestBody) (*http.Response, error)

	// GetMessageClips request
	GetMessageClips(ctx context.Context, messageId MessageIdInPath) (*http.Response, error)

	// RemovePin request
	RemovePin(ctx context.Context, messageId MessageIdInPath) (*http.Response, error)

	// GetPin request
	GetPin(ctx context.Context, messageId MessageIdInPath) (*http.Response, error)

	// CreatePin request
	CreatePin(ctx context.Context, messageId MessageIdInPath) (*http.Response, error)

	// GetMessageStamps request
	GetMessageStamps(ctx context.Context, messageId MessageIdInPath) (*http.Response, error)

	// RemoveMessageStamp request
	RemoveMessageStamp(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath) (*http.Response, error)

	// AddMessageStamp request  with any body
	AddMessageStampWithBody(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath, contentType string, body io.Reader) (*http.Response, error)

	AddMessageStamp(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath, body AddMessageStampJSONRequestBody) (*http.Response, error)

	// GetOAuth2Authorize request
	GetOAuth2Authorize(ctx context.Context, params *GetOAuth2AuthorizeParams) (*http.Response, error)

	// PostOAuth2Authorize request  with any body
	PostOAuth2AuthorizeWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	// PostOAuth2AuthorizeDecide request  with any body
	PostOAuth2AuthorizeDecideWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	// RevokeOAuth2Token request  with any body
	RevokeOAuth2TokenWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	RevokeOAuth2Token(ctx context.Context, body RevokeOAuth2TokenJSONRequestBody) (*http.Response, error)

	// PostOAuth2Token request  with any body
	PostOAuth2TokenWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	// GetOgp request
	GetOgp(ctx context.Context, params *GetOgpParams) (*http.Response, error)

	// GetPublicUserIcon request
	GetPublicUserIcon(ctx context.Context, username string) (*http.Response, error)

	// GetStampPalettes request
	GetStampPalettes(ctx context.Context) (*http.Response, error)

	// CreateStampPalette request  with any body
	CreateStampPaletteWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateStampPalette(ctx context.Context, body CreateStampPaletteJSONRequestBody) (*http.Response, error)

	// DeleteStampPalette request
	DeleteStampPalette(ctx context.Context, paletteId PaletteIdInPath) (*http.Response, error)

	// GetStampPalette request
	GetStampPalette(ctx context.Context, paletteId PaletteIdInPath) (*http.Response, error)

	// EditStampPalette request  with any body
	EditStampPaletteWithBody(ctx context.Context, paletteId PaletteIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditStampPalette(ctx context.Context, paletteId PaletteIdInPath, body EditStampPaletteJSONRequestBody) (*http.Response, error)

	// GetStamps request
	GetStamps(ctx context.Context, params *GetStampsParams) (*http.Response, error)

	// CreateStamp request  with any body
	CreateStampWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	// DeleteStamp request
	DeleteStamp(ctx context.Context, stampId StampIdInPath) (*http.Response, error)

	// GetStamp request
	GetStamp(ctx context.Context, stampId StampIdInPath) (*http.Response, error)

	// EditStamp request  with any body
	EditStampWithBody(ctx context.Context, stampId StampIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditStamp(ctx context.Context, stampId StampIdInPath, body EditStampJSONRequestBody) (*http.Response, error)

	// GetStampImage request
	GetStampImage(ctx context.Context, stampId StampIdInPath) (*http.Response, error)

	// ChangeStampImage request  with any body
	ChangeStampImageWithBody(ctx context.Context, stampId StampIdInPath, contentType string, body io.Reader) (*http.Response, error)

	// GetTag request
	GetTag(ctx context.Context, tagId TagIdInPath) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams) (*http.Response, error)

	// CreateUser request  with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context) (*http.Response, error)

	// EditMe request  with any body
	EditMeWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	EditMe(ctx context.Context, body EditMeJSONRequestBody) (*http.Response, error)

	// GetMyExternalAccounts request
	GetMyExternalAccounts(ctx context.Context) (*http.Response, error)

	// LinkExternalAccount request  with any body
	LinkExternalAccountWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	LinkExternalAccount(ctx context.Context, body LinkExternalAccountJSONRequestBody) (*http.Response, error)

	// UnlinkExternalAccount request  with any body
	UnlinkExternalAccountWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	UnlinkExternalAccount(ctx context.Context, body UnlinkExternalAccountJSONRequestBody) (*http.Response, error)

	// RegisterFCMDevice request  with any body
	RegisterFCMDeviceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	RegisterFCMDevice(ctx context.Context, body RegisterFCMDeviceJSONRequestBody) (*http.Response, error)

	// GetMyIcon request
	GetMyIcon(ctx context.Context) (*http.Response, error)

	// ChangeMyIcon request  with any body
	ChangeMyIconWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	// ChangeMyPassword request  with any body
	ChangeMyPasswordWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	ChangeMyPassword(ctx context.Context, body ChangeMyPasswordJSONRequestBody) (*http.Response, error)

	// GetMyQRCode request
	GetMyQRCode(ctx context.Context, params *GetMyQRCodeParams) (*http.Response, error)

	// GetMySessions request
	GetMySessions(ctx context.Context) (*http.Response, error)

	// RevokeMySession request
	RevokeMySession(ctx context.Context, sessionId SessionIdInPath) (*http.Response, error)

	// GetMyStampHistory request
	GetMyStampHistory(ctx context.Context, params *GetMyStampHistoryParams) (*http.Response, error)

	// GetMyStars request
	GetMyStars(ctx context.Context) (*http.Response, error)

	// AddMyStar request  with any body
	AddMyStarWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	AddMyStar(ctx context.Context, body AddMyStarJSONRequestBody) (*http.Response, error)

	// RemoveMyStar request
	RemoveMyStar(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// GetMyChannelSubscriptions request
	GetMyChannelSubscriptions(ctx context.Context) (*http.Response, error)

	// SetChannelSubscribeLevel request  with any body
	SetChannelSubscribeLevelWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error)

	SetChannelSubscribeLevel(ctx context.Context, channelId ChannelIdInPath, body SetChannelSubscribeLevelJSONRequestBody) (*http.Response, error)

	// GetMyUserTags request
	GetMyUserTags(ctx context.Context) (*http.Response, error)

	// AddMyUserTag request  with any body
	AddMyUserTagWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	AddMyUserTag(ctx context.Context, body AddMyUserTagJSONRequestBody) (*http.Response, error)

	// RemoveMyUserTag request
	RemoveMyUserTag(ctx context.Context, tagId TagIdInPath) (*http.Response, error)

	// EditMyUserTag request  with any body
	EditMyUserTagWithBody(ctx context.Context, tagId TagIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditMyUserTag(ctx context.Context, tagId TagIdInPath, body EditMyUserTagJSONRequestBody) (*http.Response, error)

	// GetMyTokens request
	GetMyTokens(ctx context.Context) (*http.Response, error)

	// RevokeMyToken request
	RevokeMyToken(ctx context.Context, tokenId TokenIdInPath) (*http.Response, error)

	// GetMyUnreadChannels request
	GetMyUnreadChannels(ctx context.Context) (*http.Response, error)

	// ReadChannel request
	ReadChannel(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId UserIdInPath) (*http.Response, error)

	// EditUser request  with any body
	EditUserWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditUser(ctx context.Context, userId UserIdInPath, body EditUserJSONRequestBody) (*http.Response, error)

	// GetUserDMChannel request
	GetUserDMChannel(ctx context.Context, userId string) (*http.Response, error)

	// GetUserIcon request
	GetUserIcon(ctx context.Context, userId UserIdInPath) (*http.Response, error)

	// ChangeUserIcon request  with any body
	ChangeUserIconWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error)

	// GetDirectMessages request
	GetDirectMessages(ctx context.Context, userId UserIdInPath, params *GetDirectMessagesParams) (*http.Response, error)

	// PostDirectMessage request  with any body
	PostDirectMessageWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error)

	PostDirectMessage(ctx context.Context, userId UserIdInPath, body PostDirectMessageJSONRequestBody) (*http.Response, error)

	// ChangeUserPassword request  with any body
	ChangeUserPasswordWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error)

	ChangeUserPassword(ctx context.Context, userId UserIdInPath, body ChangeUserPasswordJSONRequestBody) (*http.Response, error)

	// GetUserTags request
	GetUserTags(ctx context.Context, userId UserIdInPath) (*http.Response, error)

	// AddUserTag request  with any body
	AddUserTagWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error)

	AddUserTag(ctx context.Context, userId UserIdInPath, body AddUserTagJSONRequestBody) (*http.Response, error)

	// RemoveUserTag request
	RemoveUserTag(ctx context.Context, userId UserIdInPath, tagId TagIdInPath) (*http.Response, error)

	// EditUserTag request  with any body
	EditUserTagWithBody(ctx context.Context, userId UserIdInPath, tagId TagIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditUserTag(ctx context.Context, userId UserIdInPath, tagId TagIdInPath, body EditUserTagJSONRequestBody) (*http.Response, error)

	// GetServerVersion request
	GetServerVersion(ctx context.Context) (*http.Response, error)

	// GetWebhooks request
	GetWebhooks(ctx context.Context, params *GetWebhooksParams) (*http.Response, error)

	// CreateWebhook request  with any body
	CreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	CreateWebhook(ctx context.Context, body CreateWebhookJSONRequestBody) (*http.Response, error)

	// DeleteWebhook request
	DeleteWebhook(ctx context.Context, webhookId WebhookIdInPath) (*http.Response, error)

	// GetWebhook request
	GetWebhook(ctx context.Context, webhookId WebhookIdInPath) (*http.Response, error)

	// EditWebhook request  with any body
	EditWebhookWithBody(ctx context.Context, webhookId WebhookIdInPath, contentType string, body io.Reader) (*http.Response, error)

	EditWebhook(ctx context.Context, webhookId WebhookIdInPath, body EditWebhookJSONRequestBody) (*http.Response, error)

	// PostWebhook request  with any body
	PostWebhookWithBody(ctx context.Context, webhookId WebhookIdInPath, params *PostWebhookParams, contentType string, body io.Reader) (*http.Response, error)

	// GetWebhookIcon request
	GetWebhookIcon(ctx context.Context, webhookId WebhookIdInPath) (*http.Response, error)

	// ChangeWebhookIcon request  with any body
	ChangeWebhookIconWithBody(ctx context.Context, webhookId WebhookIdInPath, contentType string, body io.Reader) (*http.Response, error)

	// GetWebhookMessages request
	GetWebhookMessages(ctx context.Context, webhookId WebhookIdInPath, params *GetWebhookMessagesParams) (*http.Response, error)

	// PostWebRTCAuthenticate request  with any body
	PostWebRTCAuthenticateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error)

	PostWebRTCAuthenticate(ctx context.Context, body PostWebRTCAuthenticateJSONRequestBody) (*http.Response, error)

	// GetWebRTCState request
	GetWebRTCState(ctx context.Context) (*http.Response, error)

	// Ws request
	Ws(ctx context.Context) (*http.Response, error)
}

func (c *Client) GetOnlineUsers(ctx context.Context) (*http.Response, error) {
	req, err := NewGetOnlineUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetActivityTimeline(ctx context.Context, params *GetActivityTimelineParams) (*http.Response, error) {
	req, err := NewGetActivityTimelineRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBots(ctx context.Context, params *GetBotsParams) (*http.Response, error) {
	req, err := NewGetBotsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBotWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateBotRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBot(ctx context.Context, body CreateBotJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateBotRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBot(ctx context.Context, botId BotIdInPath) (*http.Response, error) {
	req, err := NewDeleteBotRequest(c.Server, botId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBot(ctx context.Context, botId BotIdInPath, params *GetBotParams) (*http.Response, error) {
	req, err := NewGetBotRequest(c.Server, botId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditBotWithBody(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditBotRequestWithBody(c.Server, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditBot(ctx context.Context, botId BotIdInPath, body EditBotJSONRequestBody) (*http.Response, error) {
	req, err := NewEditBotRequest(c.Server, botId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateBot(ctx context.Context, botId BotIdInPath) (*http.Response, error) {
	req, err := NewActivateBotRequest(c.Server, botId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) InactivateBot(ctx context.Context, botId BotIdInPath) (*http.Response, error) {
	req, err := NewInactivateBotRequest(c.Server, botId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LetBotJoinChannelWithBody(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewLetBotJoinChannelRequestWithBody(c.Server, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LetBotJoinChannel(ctx context.Context, botId BotIdInPath, body LetBotJoinChannelJSONRequestBody) (*http.Response, error) {
	req, err := NewLetBotJoinChannelRequest(c.Server, botId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LetBotLeaveChannelWithBody(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewLetBotLeaveChannelRequestWithBody(c.Server, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LetBotLeaveChannel(ctx context.Context, botId BotIdInPath, body LetBotLeaveChannelJSONRequestBody) (*http.Response, error) {
	req, err := NewLetBotLeaveChannelRequest(c.Server, botId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReissueBot(ctx context.Context, botId BotIdInPath) (*http.Response, error) {
	req, err := NewReissueBotRequest(c.Server, botId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBotIcon(ctx context.Context, botId BotIdInPath) (*http.Response, error) {
	req, err := NewGetBotIconRequest(c.Server, botId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeBotIconWithBody(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeBotIconRequestWithBody(c.Server, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetBotLogs(ctx context.Context, botId BotIdInPath, params *GetBotLogsParams) (*http.Response, error) {
	req, err := NewGetBotLogsRequest(c.Server, botId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannels(ctx context.Context, params *GetChannelsParams) (*http.Response, error) {
	req, err := NewGetChannelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChannelWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateChannelRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateChannel(ctx context.Context, body CreateChannelJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateChannelRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannel(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewGetChannelRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditChannelWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditChannelRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditChannel(ctx context.Context, channelId ChannelIdInPath, body EditChannelJSONRequestBody) (*http.Response, error) {
	req, err := NewEditChannelRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelBots(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewGetChannelBotsRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelEvents(ctx context.Context, channelId ChannelIdInPath, params *GetChannelEventsParams) (*http.Response, error) {
	req, err := NewGetChannelEventsRequest(c.Server, channelId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessages(ctx context.Context, channelId ChannelIdInPath, params *GetMessagesParams) (*http.Response, error) {
	req, err := NewGetMessagesRequest(c.Server, channelId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessageWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostMessageRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostMessage(ctx context.Context, channelId ChannelIdInPath, body PostMessageJSONRequestBody) (*http.Response, error) {
	req, err := NewPostMessageRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelPins(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewGetChannelPinsRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelStats(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewGetChannelStatsRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelSubscribers(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewGetChannelSubscribersRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditChannelSubscribersWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditChannelSubscribersRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditChannelSubscribers(ctx context.Context, channelId ChannelIdInPath, body EditChannelSubscribersJSONRequestBody) (*http.Response, error) {
	req, err := NewEditChannelSubscribersRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SetChannelSubscribersWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSetChannelSubscribersRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SetChannelSubscribers(ctx context.Context, channelId ChannelIdInPath, body SetChannelSubscribersJSONRequestBody) (*http.Response, error) {
	req, err := NewSetChannelSubscribersRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelTopic(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewGetChannelTopicRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditChannelTopicWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditChannelTopicRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditChannelTopic(ctx context.Context, channelId ChannelIdInPath, body EditChannelTopicJSONRequestBody) (*http.Response, error) {
	req, err := NewEditChannelTopicRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetChannelViewers(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewGetChannelViewersRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClients(ctx context.Context, params *GetClientsParams) (*http.Response, error) {
	req, err := NewGetClientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClientWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateClientRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClient(ctx context.Context, body CreateClientJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateClientRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClient(ctx context.Context, clientId ClientIdInPath) (*http.Response, error) {
	req, err := NewDeleteClientRequest(c.Server, clientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClient(ctx context.Context, clientId ClientIdInPath, params *GetClientParams) (*http.Response, error) {
	req, err := NewGetClientRequest(c.Server, clientId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditClientWithBody(ctx context.Context, clientId ClientIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditClientRequestWithBody(c.Server, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditClient(ctx context.Context, clientId ClientIdInPath, body EditClientJSONRequestBody) (*http.Response, error) {
	req, err := NewEditClientRequest(c.Server, clientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClipFolders(ctx context.Context) (*http.Response, error) {
	req, err := NewGetClipFoldersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClipFolderWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateClipFolderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateClipFolder(ctx context.Context, body CreateClipFolderJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateClipFolderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClipFolder(ctx context.Context, folderId FolderIdInPath) (*http.Response, error) {
	req, err := NewDeleteClipFolderRequest(c.Server, folderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClipFolder(ctx context.Context, folderId FolderIdInPath) (*http.Response, error) {
	req, err := NewGetClipFolderRequest(c.Server, folderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditClipFolderWithBody(ctx context.Context, folderId FolderIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditClipFolderRequestWithBody(c.Server, folderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditClipFolder(ctx context.Context, folderId FolderIdInPath, body EditClipFolderJSONRequestBody) (*http.Response, error) {
	req, err := NewEditClipFolderRequest(c.Server, folderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClips(ctx context.Context, folderId FolderIdInPath, params *GetClipsParams) (*http.Response, error) {
	req, err := NewGetClipsRequest(c.Server, folderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClipMessageWithBody(ctx context.Context, folderId FolderIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewClipMessageRequestWithBody(c.Server, folderId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ClipMessage(ctx context.Context, folderId FolderIdInPath, body ClipMessageJSONRequestBody) (*http.Response, error) {
	req, err := NewClipMessageRequest(c.Server, folderId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UnclipMessage(ctx context.Context, folderId FolderIdInPath, messageId MessageIdInPath) (*http.Response, error) {
	req, err := NewUnclipMessageRequest(c.Server, folderId, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetFiles(ctx context.Context, params *GetFilesParams) (*http.Response, error) {
	req, err := NewGetFilesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostFileWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostFileRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFile(ctx context.Context, fileId FileIdInPath) (*http.Response, error) {
	req, err := NewDeleteFileRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetFile(ctx context.Context, fileId FileIdInPath, params *GetFileParams) (*http.Response, error) {
	req, err := NewGetFileRequest(c.Server, fileId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetFileMeta(ctx context.Context, fileId FileIdInPath) (*http.Response, error) {
	req, err := NewGetFileMetaRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetThumbnailImage(ctx context.Context, fileId FileIdInPath) (*http.Response, error) {
	req, err := NewGetThumbnailImageRequest(c.Server, fileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroups(ctx context.Context) (*http.Response, error) {
	req, err := NewGetUserGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserGroupWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateUserGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserGroup(ctx context.Context, body CreateUserGroupJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateUserGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserGroup(ctx context.Context, groupId GroupIdInPath) (*http.Response, error) {
	req, err := NewDeleteUserGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroup(ctx context.Context, groupId GroupIdInPath) (*http.Response, error) {
	req, err := NewGetUserGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserGroupWithBody(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditUserGroupRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserGroup(ctx context.Context, groupId GroupIdInPath, body EditUserGroupJSONRequestBody) (*http.Response, error) {
	req, err := NewEditUserGroupRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroupAdmins(ctx context.Context, groupId GroupIdInPath) (*http.Response, error) {
	req, err := NewGetUserGroupAdminsRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserGroupAdminWithBody(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddUserGroupAdminRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserGroupAdmin(ctx context.Context, groupId GroupIdInPath, body AddUserGroupAdminJSONRequestBody) (*http.Response, error) {
	req, err := NewAddUserGroupAdminRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserGroupAdmin(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath) (*http.Response, error) {
	req, err := NewRemoveUserGroupAdminRequest(c.Server, groupId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroupMembers(ctx context.Context, groupId GroupIdInPath) (*http.Response, error) {
	req, err := NewGetUserGroupMembersRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserGroupMemberWithBody(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddUserGroupMemberRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserGroupMember(ctx context.Context, groupId GroupIdInPath, body AddUserGroupMemberJSONRequestBody) (*http.Response, error) {
	req, err := NewAddUserGroupMemberRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserGroupMember(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath) (*http.Response, error) {
	req, err := NewRemoveUserGroupMemberRequest(c.Server, groupId, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserGroupMemberWithBody(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditUserGroupMemberRequestWithBody(c.Server, groupId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserGroupMember(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath, body EditUserGroupMemberJSONRequestBody) (*http.Response, error) {
	req, err := NewEditUserGroupMemberRequest(c.Server, groupId, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, params *LoginParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, params *LoginParams, body LoginJSONRequestBody) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, params *LogoutParams) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessage(ctx context.Context, messageId MessageIdInPath) (*http.Response, error) {
	req, err := NewDeleteMessageRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessage(ctx context.Context, messageId MessageIdInPath) (*http.Response, error) {
	req, err := NewGetMessageRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditMessageWithBody(ctx context.Context, messageId MessageIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditMessageRequestWithBody(c.Server, messageId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditMessage(ctx context.Context, messageId MessageIdInPath, body EditMessageJSONRequestBody) (*http.Response, error) {
	req, err := NewEditMessageRequest(c.Server, messageId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageClips(ctx context.Context, messageId MessageIdInPath) (*http.Response, error) {
	req, err := NewGetMessageClipsRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemovePin(ctx context.Context, messageId MessageIdInPath) (*http.Response, error) {
	req, err := NewRemovePinRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPin(ctx context.Context, messageId MessageIdInPath) (*http.Response, error) {
	req, err := NewGetPinRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePin(ctx context.Context, messageId MessageIdInPath) (*http.Response, error) {
	req, err := NewCreatePinRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessageStamps(ctx context.Context, messageId MessageIdInPath) (*http.Response, error) {
	req, err := NewGetMessageStampsRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMessageStamp(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath) (*http.Response, error) {
	req, err := NewRemoveMessageStampRequest(c.Server, messageId, stampId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddMessageStampWithBody(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddMessageStampRequestWithBody(c.Server, messageId, stampId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddMessageStamp(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath, body AddMessageStampJSONRequestBody) (*http.Response, error) {
	req, err := NewAddMessageStampRequest(c.Server, messageId, stampId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetOAuth2Authorize(ctx context.Context, params *GetOAuth2AuthorizeParams) (*http.Response, error) {
	req, err := NewGetOAuth2AuthorizeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2AuthorizeWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostOAuth2AuthorizeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2AuthorizeDecideWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostOAuth2AuthorizeDecideRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeOAuth2TokenWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRevokeOAuth2TokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeOAuth2Token(ctx context.Context, body RevokeOAuth2TokenJSONRequestBody) (*http.Response, error) {
	req, err := NewRevokeOAuth2TokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostOAuth2TokenWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostOAuth2TokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetOgp(ctx context.Context, params *GetOgpParams) (*http.Response, error) {
	req, err := NewGetOgpRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetPublicUserIcon(ctx context.Context, username string) (*http.Response, error) {
	req, err := NewGetPublicUserIconRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStampPalettes(ctx context.Context) (*http.Response, error) {
	req, err := NewGetStampPalettesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStampPaletteWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateStampPaletteRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStampPalette(ctx context.Context, body CreateStampPaletteJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateStampPaletteRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStampPalette(ctx context.Context, paletteId PaletteIdInPath) (*http.Response, error) {
	req, err := NewDeleteStampPaletteRequest(c.Server, paletteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStampPalette(ctx context.Context, paletteId PaletteIdInPath) (*http.Response, error) {
	req, err := NewGetStampPaletteRequest(c.Server, paletteId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditStampPaletteWithBody(ctx context.Context, paletteId PaletteIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditStampPaletteRequestWithBody(c.Server, paletteId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditStampPalette(ctx context.Context, paletteId PaletteIdInPath, body EditStampPaletteJSONRequestBody) (*http.Response, error) {
	req, err := NewEditStampPaletteRequest(c.Server, paletteId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStamps(ctx context.Context, params *GetStampsParams) (*http.Response, error) {
	req, err := NewGetStampsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStampWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateStampRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteStamp(ctx context.Context, stampId StampIdInPath) (*http.Response, error) {
	req, err := NewDeleteStampRequest(c.Server, stampId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStamp(ctx context.Context, stampId StampIdInPath) (*http.Response, error) {
	req, err := NewGetStampRequest(c.Server, stampId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditStampWithBody(ctx context.Context, stampId StampIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditStampRequestWithBody(c.Server, stampId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditStamp(ctx context.Context, stampId StampIdInPath, body EditStampJSONRequestBody) (*http.Response, error) {
	req, err := NewEditStampRequest(c.Server, stampId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetStampImage(ctx context.Context, stampId StampIdInPath) (*http.Response, error) {
	req, err := NewGetStampImageRequest(c.Server, stampId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeStampImageWithBody(ctx context.Context, stampId StampIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeStampImageRequestWithBody(c.Server, stampId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetTag(ctx context.Context, tagId TagIdInPath) (*http.Response, error) {
	req, err := NewGetTagRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditMeWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditMe(ctx context.Context, body EditMeJSONRequestBody) (*http.Response, error) {
	req, err := NewEditMeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyExternalAccounts(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMyExternalAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LinkExternalAccountWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewLinkExternalAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) LinkExternalAccount(ctx context.Context, body LinkExternalAccountJSONRequestBody) (*http.Response, error) {
	req, err := NewLinkExternalAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UnlinkExternalAccountWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewUnlinkExternalAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) UnlinkExternalAccount(ctx context.Context, body UnlinkExternalAccountJSONRequestBody) (*http.Response, error) {
	req, err := NewUnlinkExternalAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterFCMDeviceWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewRegisterFCMDeviceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterFCMDevice(ctx context.Context, body RegisterFCMDeviceJSONRequestBody) (*http.Response, error) {
	req, err := NewRegisterFCMDeviceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyIcon(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMyIconRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeMyIconWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeMyIconRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeMyPasswordWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeMyPasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeMyPassword(ctx context.Context, body ChangeMyPasswordJSONRequestBody) (*http.Response, error) {
	req, err := NewChangeMyPasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyQRCode(ctx context.Context, params *GetMyQRCodeParams) (*http.Response, error) {
	req, err := NewGetMyQRCodeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMySessions(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMySessionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeMySession(ctx context.Context, sessionId SessionIdInPath) (*http.Response, error) {
	req, err := NewRevokeMySessionRequest(c.Server, sessionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyStampHistory(ctx context.Context, params *GetMyStampHistoryParams) (*http.Response, error) {
	req, err := NewGetMyStampHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyStars(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMyStarsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddMyStarWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddMyStarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddMyStar(ctx context.Context, body AddMyStarJSONRequestBody) (*http.Response, error) {
	req, err := NewAddMyStarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMyStar(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewRemoveMyStarRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyChannelSubscriptions(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMyChannelSubscriptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SetChannelSubscribeLevelWithBody(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewSetChannelSubscribeLevelRequestWithBody(c.Server, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) SetChannelSubscribeLevel(ctx context.Context, channelId ChannelIdInPath, body SetChannelSubscribeLevelJSONRequestBody) (*http.Response, error) {
	req, err := NewSetChannelSubscribeLevelRequest(c.Server, channelId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyUserTags(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMyUserTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddMyUserTagWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddMyUserTagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddMyUserTag(ctx context.Context, body AddMyUserTagJSONRequestBody) (*http.Response, error) {
	req, err := NewAddMyUserTagRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMyUserTag(ctx context.Context, tagId TagIdInPath) (*http.Response, error) {
	req, err := NewRemoveMyUserTagRequest(c.Server, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditMyUserTagWithBody(ctx context.Context, tagId TagIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditMyUserTagRequestWithBody(c.Server, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditMyUserTag(ctx context.Context, tagId TagIdInPath, body EditMyUserTagJSONRequestBody) (*http.Response, error) {
	req, err := NewEditMyUserTagRequest(c.Server, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyTokens(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMyTokensRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RevokeMyToken(ctx context.Context, tokenId TokenIdInPath) (*http.Response, error) {
	req, err := NewRevokeMyTokenRequest(c.Server, tokenId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyUnreadChannels(ctx context.Context) (*http.Response, error) {
	req, err := NewGetMyUnreadChannelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ReadChannel(ctx context.Context, channelId ChannelIdInPath) (*http.Response, error) {
	req, err := NewReadChannelRequest(c.Server, channelId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId UserIdInPath) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditUserRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditUser(ctx context.Context, userId UserIdInPath, body EditUserJSONRequestBody) (*http.Response, error) {
	req, err := NewEditUserRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDMChannel(ctx context.Context, userId string) (*http.Response, error) {
	req, err := NewGetUserDMChannelRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserIcon(ctx context.Context, userId UserIdInPath) (*http.Response, error) {
	req, err := NewGetUserIconRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeUserIconWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeUserIconRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetDirectMessages(ctx context.Context, userId UserIdInPath, params *GetDirectMessagesParams) (*http.Response, error) {
	req, err := NewGetDirectMessagesRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectMessageWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostDirectMessageRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectMessage(ctx context.Context, userId UserIdInPath, body PostDirectMessageJSONRequestBody) (*http.Response, error) {
	req, err := NewPostDirectMessageRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeUserPasswordWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeUserPasswordRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeUserPassword(ctx context.Context, userId UserIdInPath, body ChangeUserPasswordJSONRequestBody) (*http.Response, error) {
	req, err := NewChangeUserPasswordRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserTags(ctx context.Context, userId UserIdInPath) (*http.Response, error) {
	req, err := NewGetUserTagsRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserTagWithBody(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewAddUserTagRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) AddUserTag(ctx context.Context, userId UserIdInPath, body AddUserTagJSONRequestBody) (*http.Response, error) {
	req, err := NewAddUserTagRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveUserTag(ctx context.Context, userId UserIdInPath, tagId TagIdInPath) (*http.Response, error) {
	req, err := NewRemoveUserTagRequest(c.Server, userId, tagId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserTagWithBody(ctx context.Context, userId UserIdInPath, tagId TagIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditUserTagRequestWithBody(c.Server, userId, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserTag(ctx context.Context, userId UserIdInPath, tagId TagIdInPath, body EditUserTagJSONRequestBody) (*http.Response, error) {
	req, err := NewEditUserTagRequest(c.Server, userId, tagId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetServerVersion(ctx context.Context) (*http.Response, error) {
	req, err := NewGetServerVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhooks(ctx context.Context, params *GetWebhooksParams) (*http.Response, error) {
	req, err := NewGetWebhooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewCreateWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhook(ctx context.Context, body CreateWebhookJSONRequestBody) (*http.Response, error) {
	req, err := NewCreateWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWebhook(ctx context.Context, webhookId WebhookIdInPath) (*http.Response, error) {
	req, err := NewDeleteWebhookRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhook(ctx context.Context, webhookId WebhookIdInPath) (*http.Response, error) {
	req, err := NewGetWebhookRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditWebhookWithBody(ctx context.Context, webhookId WebhookIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewEditWebhookRequestWithBody(c.Server, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) EditWebhook(ctx context.Context, webhookId WebhookIdInPath, body EditWebhookJSONRequestBody) (*http.Response, error) {
	req, err := NewEditWebhookRequest(c.Server, webhookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostWebhookWithBody(ctx context.Context, webhookId WebhookIdInPath, params *PostWebhookParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostWebhookRequestWithBody(c.Server, webhookId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhookIcon(ctx context.Context, webhookId WebhookIdInPath) (*http.Response, error) {
	req, err := NewGetWebhookIconRequest(c.Server, webhookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeWebhookIconWithBody(ctx context.Context, webhookId WebhookIdInPath, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewChangeWebhookIconRequestWithBody(c.Server, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhookMessages(ctx context.Context, webhookId WebhookIdInPath, params *GetWebhookMessagesParams) (*http.Response, error) {
	req, err := NewGetWebhookMessagesRequest(c.Server, webhookId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostWebRTCAuthenticateWithBody(ctx context.Context, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostWebRTCAuthenticateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostWebRTCAuthenticate(ctx context.Context, body PostWebRTCAuthenticateJSONRequestBody) (*http.Response, error) {
	req, err := NewPostWebRTCAuthenticateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebRTCState(ctx context.Context) (*http.Response, error) {
	req, err := NewGetWebRTCStateRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) Ws(ctx context.Context) (*http.Response, error) {
	req, err := NewWsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetOnlineUsersRequest generates requests for GetOnlineUsers
func NewGetOnlineUsersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activity/onlines")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetActivityTimelineRequest generates requests for GetActivityTimeline
func NewGetActivityTimelineRequest(server string, params *GetActivityTimelineParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/activity/timeline")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.All != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "all", *params.All); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerChannel != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "per_channel", *params.PerChannel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBotsRequest generates requests for GetBots
func NewGetBotsRequest(server string, params *GetBotsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.All != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "all", *params.All); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBotRequest calls the generic CreateBot builder with application/json body
func NewCreateBotRequest(server string, body CreateBotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBotRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateBotRequestWithBody generates requests for CreateBot with any type of body
func NewCreateBotRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteBotRequest generates requests for DeleteBot
func NewDeleteBotRequest(server string, botId BotIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBotRequest generates requests for GetBot
func NewGetBotRequest(server string, botId BotIdInPath, params *GetBotParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Detail != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "detail", *params.Detail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditBotRequest calls the generic EditBot builder with application/json body
func NewEditBotRequest(server string, botId BotIdInPath, body EditBotJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditBotRequestWithBody(server, botId, "application/json", bodyReader)
}

// NewEditBotRequestWithBody generates requests for EditBot with any type of body
func NewEditBotRequestWithBody(server string, botId BotIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewActivateBotRequest generates requests for ActivateBot
func NewActivateBotRequest(server string, botId BotIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s/actions/activate", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInactivateBotRequest generates requests for InactivateBot
func NewInactivateBotRequest(server string, botId BotIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s/actions/inactivate", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLetBotJoinChannelRequest calls the generic LetBotJoinChannel builder with application/json body
func NewLetBotJoinChannelRequest(server string, botId BotIdInPath, body LetBotJoinChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLetBotJoinChannelRequestWithBody(server, botId, "application/json", bodyReader)
}

// NewLetBotJoinChannelRequestWithBody generates requests for LetBotJoinChannel with any type of body
func NewLetBotJoinChannelRequestWithBody(server string, botId BotIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s/actions/join", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewLetBotLeaveChannelRequest calls the generic LetBotLeaveChannel builder with application/json body
func NewLetBotLeaveChannelRequest(server string, botId BotIdInPath, body LetBotLeaveChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLetBotLeaveChannelRequestWithBody(server, botId, "application/json", bodyReader)
}

// NewLetBotLeaveChannelRequestWithBody generates requests for LetBotLeaveChannel with any type of body
func NewLetBotLeaveChannelRequestWithBody(server string, botId BotIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s/actions/leave", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewReissueBotRequest generates requests for ReissueBot
func NewReissueBotRequest(server string, botId BotIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s/actions/reissue", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBotIconRequest generates requests for GetBotIcon
func NewGetBotIconRequest(server string, botId BotIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s/icon", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeBotIconRequestWithBody generates requests for ChangeBotIcon with any type of body
func NewChangeBotIconRequestWithBody(server string, botId BotIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s/icon", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetBotLogsRequest generates requests for GetBotLogs
func NewGetBotLogsRequest(server string, botId BotIdInPath, params *GetBotLogsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "botId", botId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/bots/%s/logs", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelsRequest generates requests for GetChannels
func NewGetChannelsRequest(server string, params *GetChannelsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.IncludeDm != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "include-dm", *params.IncludeDm); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateChannelRequest calls the generic CreateChannel builder with application/json body
func NewCreateChannelRequest(server string, body CreateChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateChannelRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateChannelRequestWithBody generates requests for CreateChannel with any type of body
func NewCreateChannelRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetChannelRequest generates requests for GetChannel
func NewGetChannelRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditChannelRequest calls the generic EditChannel builder with application/json body
func NewEditChannelRequest(server string, channelId ChannelIdInPath, body EditChannelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditChannelRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewEditChannelRequestWithBody generates requests for EditChannel with any type of body
func NewEditChannelRequestWithBody(server string, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetChannelBotsRequest generates requests for GetChannelBots
func NewGetChannelBotsRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/bots", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelEventsRequest generates requests for GetChannelEvents
func NewGetChannelEventsRequest(server string, channelId ChannelIdInPath, params *GetChannelEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/events", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "since", *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "until", *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Inclusive != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "inclusive", *params.Inclusive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessagesRequest generates requests for GetMessages
func NewGetMessagesRequest(server string, channelId ChannelIdInPath, params *GetMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/messages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "since", *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "until", *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Inclusive != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "inclusive", *params.Inclusive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostMessageRequest calls the generic PostMessage builder with application/json body
func NewPostMessageRequest(server string, channelId ChannelIdInPath, body PostMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMessageRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewPostMessageRequestWithBody generates requests for PostMessage with any type of body
func NewPostMessageRequestWithBody(server string, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/messages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetChannelPinsRequest generates requests for GetChannelPins
func NewGetChannelPinsRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/pins", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelStatsRequest generates requests for GetChannelStats
func NewGetChannelStatsRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/stats", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetChannelSubscribersRequest generates requests for GetChannelSubscribers
func NewGetChannelSubscribersRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/subscribers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditChannelSubscribersRequest calls the generic EditChannelSubscribers builder with application/json body
func NewEditChannelSubscribersRequest(server string, channelId ChannelIdInPath, body EditChannelSubscribersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditChannelSubscribersRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewEditChannelSubscribersRequestWithBody generates requests for EditChannelSubscribers with any type of body
func NewEditChannelSubscribersRequestWithBody(server string, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/subscribers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewSetChannelSubscribersRequest calls the generic SetChannelSubscribers builder with application/json body
func NewSetChannelSubscribersRequest(server string, channelId ChannelIdInPath, body SetChannelSubscribersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetChannelSubscribersRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewSetChannelSubscribersRequestWithBody generates requests for SetChannelSubscribers with any type of body
func NewSetChannelSubscribersRequestWithBody(server string, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/subscribers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetChannelTopicRequest generates requests for GetChannelTopic
func NewGetChannelTopicRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/topic", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditChannelTopicRequest calls the generic EditChannelTopic builder with application/json body
func NewEditChannelTopicRequest(server string, channelId ChannelIdInPath, body EditChannelTopicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditChannelTopicRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewEditChannelTopicRequestWithBody generates requests for EditChannelTopic with any type of body
func NewEditChannelTopicRequestWithBody(server string, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/topic", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetChannelViewersRequest generates requests for GetChannelViewers
func NewGetChannelViewersRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/channels/%s/viewers", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientsRequest generates requests for GetClients
func NewGetClientsRequest(server string, params *GetClientsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clients")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.All != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "all", *params.All); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateClientRequest calls the generic CreateClient builder with application/json body
func NewCreateClientRequest(server string, body CreateClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClientRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateClientRequestWithBody generates requests for CreateClient with any type of body
func NewCreateClientRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clients")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteClientRequest generates requests for DeleteClient
func NewDeleteClientRequest(server string, clientId ClientIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clientId", clientId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clients/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClientRequest generates requests for GetClient
func NewGetClientRequest(server string, clientId ClientIdInPath, params *GetClientParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clientId", clientId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clients/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Detail != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "detail", *params.Detail); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditClientRequest calls the generic EditClient builder with application/json body
func NewEditClientRequest(server string, clientId ClientIdInPath, body EditClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditClientRequestWithBody(server, clientId, "application/json", bodyReader)
}

// NewEditClientRequestWithBody generates requests for EditClient with any type of body
func NewEditClientRequestWithBody(server string, clientId ClientIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clientId", clientId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clients/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetClipFoldersRequest generates requests for GetClipFolders
func NewGetClipFoldersRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clip-folders")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateClipFolderRequest calls the generic CreateClipFolder builder with application/json body
func NewCreateClipFolderRequest(server string, body CreateClipFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateClipFolderRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateClipFolderRequestWithBody generates requests for CreateClipFolder with any type of body
func NewCreateClipFolderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clip-folders")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteClipFolderRequest generates requests for DeleteClipFolder
func NewDeleteClipFolderRequest(server string, folderId FolderIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "folderId", folderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clip-folders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClipFolderRequest generates requests for GetClipFolder
func NewGetClipFolderRequest(server string, folderId FolderIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "folderId", folderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clip-folders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditClipFolderRequest calls the generic EditClipFolder builder with application/json body
func NewEditClipFolderRequest(server string, folderId FolderIdInPath, body EditClipFolderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditClipFolderRequestWithBody(server, folderId, "application/json", bodyReader)
}

// NewEditClipFolderRequestWithBody generates requests for EditClipFolder with any type of body
func NewEditClipFolderRequestWithBody(server string, folderId FolderIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "folderId", folderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clip-folders/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetClipsRequest generates requests for GetClips
func NewGetClipsRequest(server string, folderId FolderIdInPath, params *GetClipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "folderId", folderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clip-folders/%s/messages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClipMessageRequest calls the generic ClipMessage builder with application/json body
func NewClipMessageRequest(server string, folderId FolderIdInPath, body ClipMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewClipMessageRequestWithBody(server, folderId, "application/json", bodyReader)
}

// NewClipMessageRequestWithBody generates requests for ClipMessage with any type of body
func NewClipMessageRequestWithBody(server string, folderId FolderIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "folderId", folderId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clip-folders/%s/messages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUnclipMessageRequest generates requests for UnclipMessage
func NewUnclipMessageRequest(server string, folderId FolderIdInPath, messageId MessageIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "folderId", folderId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clip-folders/%s/messages/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFilesRequest generates requests for GetFiles
func NewGetFilesRequest(server string, params *GetFilesParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/files")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ChannelId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "channelId", *params.ChannelId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "since", *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "until", *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Inclusive != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "inclusive", *params.Inclusive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Mine != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "mine", *params.Mine); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFileRequestWithBody generates requests for PostFile with any type of body
func NewPostFileRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/files")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteFileRequest generates requests for DeleteFile
func NewDeleteFileRequest(server string, fileId FileIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "fileId", fileId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/files/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFileRequest generates requests for GetFile
func NewGetFileRequest(server string, fileId FileIdInPath, params *GetFileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "fileId", fileId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/files/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Dl != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "dl", *params.Dl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFileMetaRequest generates requests for GetFileMeta
func NewGetFileMetaRequest(server string, fileId FileIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "fileId", fileId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/files/%s/meta", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetThumbnailImageRequest generates requests for GetThumbnailImage
func NewGetThumbnailImageRequest(server string, fileId FileIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "fileId", fileId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/files/%s/thumbnail", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupsRequest generates requests for GetUserGroups
func NewGetUserGroupsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserGroupRequest calls the generic CreateUserGroup builder with application/json body
func NewCreateUserGroupRequest(server string, body CreateUserGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserGroupRequestWithBody generates requests for CreateUserGroup with any type of body
func NewCreateUserGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteUserGroupRequest generates requests for DeleteUserGroup
func NewDeleteUserGroupRequest(server string, groupId GroupIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupRequest generates requests for GetUserGroup
func NewGetUserGroupRequest(server string, groupId GroupIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserGroupRequest calls the generic EditUserGroup builder with application/json body
func NewEditUserGroupRequest(server string, groupId GroupIdInPath, body EditUserGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserGroupRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewEditUserGroupRequestWithBody generates requests for EditUserGroup with any type of body
func NewEditUserGroupRequestWithBody(server string, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetUserGroupAdminsRequest generates requests for GetUserGroupAdmins
func NewGetUserGroupAdminsRequest(server string, groupId GroupIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/admins", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserGroupAdminRequest calls the generic AddUserGroupAdmin builder with application/json body
func NewAddUserGroupAdminRequest(server string, groupId GroupIdInPath, body AddUserGroupAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserGroupAdminRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewAddUserGroupAdminRequestWithBody generates requests for AddUserGroupAdmin with any type of body
func NewAddUserGroupAdminRequestWithBody(server string, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/admins", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRemoveUserGroupAdminRequest generates requests for RemoveUserGroupAdmin
func NewRemoveUserGroupAdminRequest(server string, groupId GroupIdInPath, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/admins/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupMembersRequest generates requests for GetUserGroupMembers
func NewGetUserGroupMembersRequest(server string, groupId GroupIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/members", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserGroupMemberRequest calls the generic AddUserGroupMember builder with application/json body
func NewAddUserGroupMemberRequest(server string, groupId GroupIdInPath, body AddUserGroupMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserGroupMemberRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewAddUserGroupMemberRequestWithBody generates requests for AddUserGroupMember with any type of body
func NewAddUserGroupMemberRequestWithBody(server string, groupId GroupIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/members", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRemoveUserGroupMemberRequest generates requests for RemoveUserGroupMember
func NewRemoveUserGroupMemberRequest(server string, groupId GroupIdInPath, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/members/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserGroupMemberRequest calls the generic EditUserGroupMember builder with application/json body
func NewEditUserGroupMemberRequest(server string, groupId GroupIdInPath, userId UserIdInPath, body EditUserGroupMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserGroupMemberRequestWithBody(server, groupId, userId, "application/json", bodyReader)
}

// NewEditUserGroupMemberRequestWithBody generates requests for EditUserGroupMember with any type of body
func NewEditUserGroupMemberRequestWithBody(server string, groupId GroupIdInPath, userId UserIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "groupId", groupId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/groups/%s/members/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, params *LoginParams, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, params, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, params *LoginParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/login")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Redirect != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "redirect", *params.Redirect); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string, params *LogoutParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/logout")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Redirect != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "redirect", *params.Redirect); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.All != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "all", *params.All); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMessageRequest generates requests for DeleteMessage
func NewDeleteMessageRequest(server string, messageId MessageIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessageRequest generates requests for GetMessage
func NewGetMessageRequest(server string, messageId MessageIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditMessageRequest calls the generic EditMessage builder with application/json body
func NewEditMessageRequest(server string, messageId MessageIdInPath, body EditMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditMessageRequestWithBody(server, messageId, "application/json", bodyReader)
}

// NewEditMessageRequestWithBody generates requests for EditMessage with any type of body
func NewEditMessageRequestWithBody(server string, messageId MessageIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMessageClipsRequest generates requests for GetMessageClips
func NewGetMessageClipsRequest(server string, messageId MessageIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s/clips", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemovePinRequest generates requests for RemovePin
func NewRemovePinRequest(server string, messageId MessageIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s/pin", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPinRequest generates requests for GetPin
func NewGetPinRequest(server string, messageId MessageIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s/pin", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePinRequest generates requests for CreatePin
func NewCreatePinRequest(server string, messageId MessageIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s/pin", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessageStampsRequest generates requests for GetMessageStamps
func NewGetMessageStampsRequest(server string, messageId MessageIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s/stamps", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveMessageStampRequest generates requests for RemoveMessageStamp
func NewRemoveMessageStampRequest(server string, messageId MessageIdInPath, stampId StampIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "stampId", stampId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s/stamps/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddMessageStampRequest calls the generic AddMessageStamp builder with application/json body
func NewAddMessageStampRequest(server string, messageId MessageIdInPath, stampId StampIdInPath, body AddMessageStampJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMessageStampRequestWithBody(server, messageId, stampId, "application/json", bodyReader)
}

// NewAddMessageStampRequestWithBody generates requests for AddMessageStamp with any type of body
func NewAddMessageStampRequestWithBody(server string, messageId MessageIdInPath, stampId StampIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "messageId", messageId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "stampId", stampId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/messages/%s/stamps/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetOAuth2AuthorizeRequest generates requests for GetOAuth2Authorize
func NewGetOAuth2AuthorizeRequest(server string, params *GetOAuth2AuthorizeParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/oauth2/authorize")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.ResponseType != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "response_type", *params.ResponseType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParam("form", true, "client_id", params.ClientId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.RedirectUri != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "redirect_uri", *params.RedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Scope != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "scope", *params.Scope); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.State != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "state", *params.State); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CodeChallenge != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "code_challenge", *params.CodeChallenge); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CodeChallengeMethod != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "code_challenge_method", *params.CodeChallengeMethod); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Nonce != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "nonce", *params.Nonce); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Prompt != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "prompt", *params.Prompt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOAuth2AuthorizeRequestWithBody generates requests for PostOAuth2Authorize with any type of body
func NewPostOAuth2AuthorizeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/oauth2/authorize")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostOAuth2AuthorizeDecideRequestWithBody generates requests for PostOAuth2AuthorizeDecide with any type of body
func NewPostOAuth2AuthorizeDecideRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/oauth2/authorize/decide")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRevokeOAuth2TokenRequest calls the generic RevokeOAuth2Token builder with application/json body
func NewRevokeOAuth2TokenRequest(server string, body RevokeOAuth2TokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRevokeOAuth2TokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRevokeOAuth2TokenRequestWithBody generates requests for RevokeOAuth2Token with any type of body
func NewRevokeOAuth2TokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/oauth2/revoke")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostOAuth2TokenRequestWithBody generates requests for PostOAuth2Token with any type of body
func NewPostOAuth2TokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/oauth2/token")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetOgpRequest generates requests for GetOgp
func NewGetOgpRequest(server string, params *GetOgpParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ogp")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Url != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "url", *params.Url); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPublicUserIconRequest generates requests for GetPublicUserIcon
func NewGetPublicUserIconRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "username", username)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/public/icon/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStampPalettesRequest generates requests for GetStampPalettes
func NewGetStampPalettesRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamp-palettes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStampPaletteRequest calls the generic CreateStampPalette builder with application/json body
func NewCreateStampPaletteRequest(server string, body CreateStampPaletteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStampPaletteRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateStampPaletteRequestWithBody generates requests for CreateStampPalette with any type of body
func NewCreateStampPaletteRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamp-palettes")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteStampPaletteRequest generates requests for DeleteStampPalette
func NewDeleteStampPaletteRequest(server string, paletteId PaletteIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "paletteId", paletteId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamp-palettes/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStampPaletteRequest generates requests for GetStampPalette
func NewGetStampPaletteRequest(server string, paletteId PaletteIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "paletteId", paletteId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamp-palettes/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditStampPaletteRequest calls the generic EditStampPalette builder with application/json body
func NewEditStampPaletteRequest(server string, paletteId PaletteIdInPath, body EditStampPaletteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditStampPaletteRequestWithBody(server, paletteId, "application/json", bodyReader)
}

// NewEditStampPaletteRequestWithBody generates requests for EditStampPalette with any type of body
func NewEditStampPaletteRequestWithBody(server string, paletteId PaletteIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "paletteId", paletteId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamp-palettes/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetStampsRequest generates requests for GetStamps
func NewGetStampsRequest(server string, params *GetStampsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamps")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.IncludeUnicode != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "include-unicode", *params.IncludeUnicode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStampRequestWithBody generates requests for CreateStamp with any type of body
func NewCreateStampRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamps")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteStampRequest generates requests for DeleteStamp
func NewDeleteStampRequest(server string, stampId StampIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "stampId", stampId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamps/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStampRequest generates requests for GetStamp
func NewGetStampRequest(server string, stampId StampIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "stampId", stampId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamps/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditStampRequest calls the generic EditStamp builder with application/json body
func NewEditStampRequest(server string, stampId StampIdInPath, body EditStampJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditStampRequestWithBody(server, stampId, "application/json", bodyReader)
}

// NewEditStampRequestWithBody generates requests for EditStamp with any type of body
func NewEditStampRequestWithBody(server string, stampId StampIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "stampId", stampId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamps/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetStampImageRequest generates requests for GetStampImage
func NewGetStampImageRequest(server string, stampId StampIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "stampId", stampId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamps/%s/image", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeStampImageRequestWithBody generates requests for ChangeStampImage with any type of body
func NewChangeStampImageRequestWithBody(server string, stampId StampIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "stampId", stampId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/stamps/%s/image", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetTagRequest generates requests for GetTag
func NewGetTagRequest(server string, tagId TagIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "tagId", tagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/tags/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.IncludeSuspended != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "include-suspended", *params.IncludeSuspended); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditMeRequest calls the generic EditMe builder with application/json body
func NewEditMeRequest(server string, body EditMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditMeRequestWithBody(server, "application/json", bodyReader)
}

// NewEditMeRequestWithBody generates requests for EditMe with any type of body
func NewEditMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMyExternalAccountsRequest generates requests for GetMyExternalAccounts
func NewGetMyExternalAccountsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/ex-accounts")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLinkExternalAccountRequest calls the generic LinkExternalAccount builder with application/json body
func NewLinkExternalAccountRequest(server string, body LinkExternalAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLinkExternalAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewLinkExternalAccountRequestWithBody generates requests for LinkExternalAccount with any type of body
func NewLinkExternalAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/ex-accounts/link")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewUnlinkExternalAccountRequest calls the generic UnlinkExternalAccount builder with application/json body
func NewUnlinkExternalAccountRequest(server string, body UnlinkExternalAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUnlinkExternalAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewUnlinkExternalAccountRequestWithBody generates requests for UnlinkExternalAccount with any type of body
func NewUnlinkExternalAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/ex-accounts/unlink")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRegisterFCMDeviceRequest calls the generic RegisterFCMDevice builder with application/json body
func NewRegisterFCMDeviceRequest(server string, body RegisterFCMDeviceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRegisterFCMDeviceRequestWithBody(server, "application/json", bodyReader)
}

// NewRegisterFCMDeviceRequestWithBody generates requests for RegisterFCMDevice with any type of body
func NewRegisterFCMDeviceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/fcm-device")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMyIconRequest generates requests for GetMyIcon
func NewGetMyIconRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/icon")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeMyIconRequestWithBody generates requests for ChangeMyIcon with any type of body
func NewChangeMyIconRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/icon")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewChangeMyPasswordRequest calls the generic ChangeMyPassword builder with application/json body
func NewChangeMyPasswordRequest(server string, body ChangeMyPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeMyPasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewChangeMyPasswordRequestWithBody generates requests for ChangeMyPassword with any type of body
func NewChangeMyPasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/password")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMyQRCodeRequest generates requests for GetMyQRCode
func NewGetMyQRCodeRequest(server string, params *GetMyQRCodeParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/qr-code")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "token", *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMySessionsRequest generates requests for GetMySessions
func NewGetMySessionsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/sessions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevokeMySessionRequest generates requests for RevokeMySession
func NewRevokeMySessionRequest(server string, sessionId SessionIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "sessionId", sessionId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/sessions/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyStampHistoryRequest generates requests for GetMyStampHistory
func NewGetMyStampHistoryRequest(server string, params *GetMyStampHistoryParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/stamp-history")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyStarsRequest generates requests for GetMyStars
func NewGetMyStarsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/stars")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddMyStarRequest calls the generic AddMyStar builder with application/json body
func NewAddMyStarRequest(server string, body AddMyStarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMyStarRequestWithBody(server, "application/json", bodyReader)
}

// NewAddMyStarRequestWithBody generates requests for AddMyStar with any type of body
func NewAddMyStarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/stars")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRemoveMyStarRequest generates requests for RemoveMyStar
func NewRemoveMyStarRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/stars/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyChannelSubscriptionsRequest generates requests for GetMyChannelSubscriptions
func NewGetMyChannelSubscriptionsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/subscriptions")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetChannelSubscribeLevelRequest calls the generic SetChannelSubscribeLevel builder with application/json body
func NewSetChannelSubscribeLevelRequest(server string, channelId ChannelIdInPath, body SetChannelSubscribeLevelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetChannelSubscribeLevelRequestWithBody(server, channelId, "application/json", bodyReader)
}

// NewSetChannelSubscribeLevelRequestWithBody generates requests for SetChannelSubscribeLevel with any type of body
func NewSetChannelSubscribeLevelRequestWithBody(server string, channelId ChannelIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/subscriptions/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMyUserTagsRequest generates requests for GetMyUserTags
func NewGetMyUserTagsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/tags")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddMyUserTagRequest calls the generic AddMyUserTag builder with application/json body
func NewAddMyUserTagRequest(server string, body AddMyUserTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMyUserTagRequestWithBody(server, "application/json", bodyReader)
}

// NewAddMyUserTagRequestWithBody generates requests for AddMyUserTag with any type of body
func NewAddMyUserTagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/tags")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRemoveMyUserTagRequest generates requests for RemoveMyUserTag
func NewRemoveMyUserTagRequest(server string, tagId TagIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "tagId", tagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/tags/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditMyUserTagRequest calls the generic EditMyUserTag builder with application/json body
func NewEditMyUserTagRequest(server string, tagId TagIdInPath, body EditMyUserTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditMyUserTagRequestWithBody(server, tagId, "application/json", bodyReader)
}

// NewEditMyUserTagRequestWithBody generates requests for EditMyUserTag with any type of body
func NewEditMyUserTagRequestWithBody(server string, tagId TagIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "tagId", tagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/tags/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetMyTokensRequest generates requests for GetMyTokens
func NewGetMyTokensRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/tokens")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRevokeMyTokenRequest generates requests for RevokeMyToken
func NewRevokeMyTokenRequest(server string, tokenId TokenIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "tokenId", tokenId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/tokens/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyUnreadChannelsRequest generates requests for GetMyUnreadChannels
func NewGetMyUnreadChannelsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/unread")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadChannelRequest generates requests for ReadChannel
func NewReadChannelRequest(server string, channelId ChannelIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "channelId", channelId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/me/unread/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserRequest calls the generic EditUser builder with application/json body
func NewEditUserRequest(server string, userId UserIdInPath, body EditUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewEditUserRequestWithBody generates requests for EditUser with any type of body
func NewEditUserRequestWithBody(server string, userId UserIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetUserDMChannelRequest generates requests for GetUserDMChannel
func NewGetUserDMChannelRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/dm-channel", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserIconRequest generates requests for GetUserIcon
func NewGetUserIconRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/icon", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeUserIconRequestWithBody generates requests for ChangeUserIcon with any type of body
func NewChangeUserIconRequestWithBody(server string, userId UserIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/icon", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetDirectMessagesRequest generates requests for GetDirectMessages
func NewGetDirectMessagesRequest(server string, userId UserIdInPath, params *GetDirectMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/messages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "since", *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "until", *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Inclusive != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "inclusive", *params.Inclusive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDirectMessageRequest calls the generic PostDirectMessage builder with application/json body
func NewPostDirectMessageRequest(server string, userId UserIdInPath, body PostDirectMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDirectMessageRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostDirectMessageRequestWithBody generates requests for PostDirectMessage with any type of body
func NewPostDirectMessageRequestWithBody(server string, userId UserIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/messages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewChangeUserPasswordRequest calls the generic ChangeUserPassword builder with application/json body
func NewChangeUserPasswordRequest(server string, userId UserIdInPath, body ChangeUserPasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeUserPasswordRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewChangeUserPasswordRequestWithBody generates requests for ChangeUserPassword with any type of body
func NewChangeUserPasswordRequestWithBody(server string, userId UserIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/password", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetUserTagsRequest generates requests for GetUserTags
func NewGetUserTagsRequest(server string, userId UserIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/tags", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddUserTagRequest calls the generic AddUserTag builder with application/json body
func NewAddUserTagRequest(server string, userId UserIdInPath, body AddUserTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddUserTagRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewAddUserTagRequestWithBody generates requests for AddUserTag with any type of body
func NewAddUserTagRequestWithBody(server string, userId UserIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/tags", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewRemoveUserTagRequest generates requests for RemoveUserTag
func NewRemoveUserTagRequest(server string, userId UserIdInPath, tagId TagIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "tagId", tagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/tags/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserTagRequest calls the generic EditUserTag builder with application/json body
func NewEditUserTagRequest(server string, userId UserIdInPath, tagId TagIdInPath, body EditUserTagJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserTagRequestWithBody(server, userId, tagId, "application/json", bodyReader)
}

// NewEditUserTagRequestWithBody generates requests for EditUserTag with any type of body
func NewEditUserTagRequestWithBody(server string, userId UserIdInPath, tagId TagIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "userId", userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "tagId", tagId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/users/%s/tags/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetServerVersionRequest generates requests for GetServerVersion
func NewGetServerVersionRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/version")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhooksRequest generates requests for GetWebhooks
func NewGetWebhooksRequest(server string, params *GetWebhooksParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.All != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "all", *params.All); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhookRequest calls the generic CreateWebhook builder with application/json body
func NewCreateWebhookRequest(server string, body CreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWebhookRequestWithBody generates requests for CreateWebhook with any type of body
func NewCreateWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteWebhookRequest generates requests for DeleteWebhook
func NewDeleteWebhookRequest(server string, webhookId WebhookIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "webhookId", webhookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhookRequest generates requests for GetWebhook
func NewGetWebhookRequest(server string, webhookId WebhookIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "webhookId", webhookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditWebhookRequest calls the generic EditWebhook builder with application/json body
func NewEditWebhookRequest(server string, webhookId WebhookIdInPath, body EditWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditWebhookRequestWithBody(server, webhookId, "application/json", bodyReader)
}

// NewEditWebhookRequestWithBody generates requests for EditWebhook with any type of body
func NewEditWebhookRequestWithBody(server string, webhookId WebhookIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "webhookId", webhookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewPostWebhookRequestWithBody generates requests for PostWebhook with any type of body
func NewPostWebhookRequestWithBody(server string, webhookId WebhookIdInPath, params *PostWebhookParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "webhookId", webhookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Embed != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "embed", *params.Embed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	if params.XTRAQSignature != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-TRAQ-Signature", *params.XTRAQSignature)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-TRAQ-Signature", headerParam0)
	}

	if params.XTRAQChannelId != nil {
		var headerParam1 string

		headerParam1, err = runtime.StyleParam("simple", false, "X-TRAQ-Channel-Id", *params.XTRAQChannelId)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-TRAQ-Channel-Id", headerParam1)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetWebhookIconRequest generates requests for GetWebhookIcon
func NewGetWebhookIconRequest(server string, webhookId WebhookIdInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "webhookId", webhookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s/icon", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeWebhookIconRequestWithBody generates requests for ChangeWebhookIcon with any type of body
func NewChangeWebhookIconRequestWithBody(server string, webhookId WebhookIdInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "webhookId", webhookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s/icon", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetWebhookMessagesRequest generates requests for GetWebhookMessages
func NewGetWebhookMessagesRequest(server string, webhookId WebhookIdInPath, params *GetWebhookMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "webhookId", webhookId)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webhooks/%s/messages", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "since", *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Until != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "until", *params.Until); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Inclusive != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "inclusive", *params.Inclusive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Order != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "order", *params.Order); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWebRTCAuthenticateRequest calls the generic PostWebRTCAuthenticate builder with application/json body
func NewPostWebRTCAuthenticateRequest(server string, body PostWebRTCAuthenticateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWebRTCAuthenticateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWebRTCAuthenticateRequestWithBody generates requests for PostWebRTCAuthenticate with any type of body
func NewPostWebRTCAuthenticateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webrtc/authenticate")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetWebRTCStateRequest generates requests for GetWebRTCState
func NewGetWebRTCStateRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/webrtc/state")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewWsRequest generates requests for Ws
func NewWsRequest(server string) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/ws")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOnlineUsers request
	GetOnlineUsersWithResponse(ctx context.Context) (*GetOnlineUsersResponse, error)

	// GetActivityTimeline request
	GetActivityTimelineWithResponse(ctx context.Context, params *GetActivityTimelineParams) (*GetActivityTimelineResponse, error)

	// GetBots request
	GetBotsWithResponse(ctx context.Context, params *GetBotsParams) (*GetBotsResponse, error)

	// CreateBot request  with any body
	CreateBotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateBotResponse, error)

	CreateBotWithResponse(ctx context.Context, body CreateBotJSONRequestBody) (*CreateBotResponse, error)

	// DeleteBot request
	DeleteBotWithResponse(ctx context.Context, botId BotIdInPath) (*DeleteBotResponse, error)

	// GetBot request
	GetBotWithResponse(ctx context.Context, botId BotIdInPath, params *GetBotParams) (*GetBotResponse, error)

	// EditBot request  with any body
	EditBotWithBodyWithResponse(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*EditBotResponse, error)

	EditBotWithResponse(ctx context.Context, botId BotIdInPath, body EditBotJSONRequestBody) (*EditBotResponse, error)

	// ActivateBot request
	ActivateBotWithResponse(ctx context.Context, botId BotIdInPath) (*ActivateBotResponse, error)

	// InactivateBot request
	InactivateBotWithResponse(ctx context.Context, botId BotIdInPath) (*InactivateBotResponse, error)

	// LetBotJoinChannel request  with any body
	LetBotJoinChannelWithBodyWithResponse(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*LetBotJoinChannelResponse, error)

	LetBotJoinChannelWithResponse(ctx context.Context, botId BotIdInPath, body LetBotJoinChannelJSONRequestBody) (*LetBotJoinChannelResponse, error)

	// LetBotLeaveChannel request  with any body
	LetBotLeaveChannelWithBodyWithResponse(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*LetBotLeaveChannelResponse, error)

	LetBotLeaveChannelWithResponse(ctx context.Context, botId BotIdInPath, body LetBotLeaveChannelJSONRequestBody) (*LetBotLeaveChannelResponse, error)

	// ReissueBot request
	ReissueBotWithResponse(ctx context.Context, botId BotIdInPath) (*ReissueBotResponse, error)

	// GetBotIcon request
	GetBotIconWithResponse(ctx context.Context, botId BotIdInPath) (*GetBotIconResponse, error)

	// ChangeBotIcon request  with any body
	ChangeBotIconWithBodyWithResponse(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*ChangeBotIconResponse, error)

	// GetBotLogs request
	GetBotLogsWithResponse(ctx context.Context, botId BotIdInPath, params *GetBotLogsParams) (*GetBotLogsResponse, error)

	// GetChannels request
	GetChannelsWithResponse(ctx context.Context, params *GetChannelsParams) (*GetChannelsResponse, error)

	// CreateChannel request  with any body
	CreateChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateChannelResponse, error)

	CreateChannelWithResponse(ctx context.Context, body CreateChannelJSONRequestBody) (*CreateChannelResponse, error)

	// GetChannel request
	GetChannelWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelResponse, error)

	// EditChannel request  with any body
	EditChannelWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*EditChannelResponse, error)

	EditChannelWithResponse(ctx context.Context, channelId ChannelIdInPath, body EditChannelJSONRequestBody) (*EditChannelResponse, error)

	// GetChannelBots request
	GetChannelBotsWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelBotsResponse, error)

	// GetChannelEvents request
	GetChannelEventsWithResponse(ctx context.Context, channelId ChannelIdInPath, params *GetChannelEventsParams) (*GetChannelEventsResponse, error)

	// GetMessages request
	GetMessagesWithResponse(ctx context.Context, channelId ChannelIdInPath, params *GetMessagesParams) (*GetMessagesResponse, error)

	// PostMessage request  with any body
	PostMessageWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*PostMessageResponse, error)

	PostMessageWithResponse(ctx context.Context, channelId ChannelIdInPath, body PostMessageJSONRequestBody) (*PostMessageResponse, error)

	// GetChannelPins request
	GetChannelPinsWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelPinsResponse, error)

	// GetChannelStats request
	GetChannelStatsWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelStatsResponse, error)

	// GetChannelSubscribers request
	GetChannelSubscribersWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelSubscribersResponse, error)

	// EditChannelSubscribers request  with any body
	EditChannelSubscribersWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*EditChannelSubscribersResponse, error)

	EditChannelSubscribersWithResponse(ctx context.Context, channelId ChannelIdInPath, body EditChannelSubscribersJSONRequestBody) (*EditChannelSubscribersResponse, error)

	// SetChannelSubscribers request  with any body
	SetChannelSubscribersWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*SetChannelSubscribersResponse, error)

	SetChannelSubscribersWithResponse(ctx context.Context, channelId ChannelIdInPath, body SetChannelSubscribersJSONRequestBody) (*SetChannelSubscribersResponse, error)

	// GetChannelTopic request
	GetChannelTopicWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelTopicResponse, error)

	// EditChannelTopic request  with any body
	EditChannelTopicWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*EditChannelTopicResponse, error)

	EditChannelTopicWithResponse(ctx context.Context, channelId ChannelIdInPath, body EditChannelTopicJSONRequestBody) (*EditChannelTopicResponse, error)

	// GetChannelViewers request
	GetChannelViewersWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelViewersResponse, error)

	// GetClients request
	GetClientsWithResponse(ctx context.Context, params *GetClientsParams) (*GetClientsResponse, error)

	// CreateClient request  with any body
	CreateClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateClientResponse, error)

	CreateClientWithResponse(ctx context.Context, body CreateClientJSONRequestBody) (*CreateClientResponse, error)

	// DeleteClient request
	DeleteClientWithResponse(ctx context.Context, clientId ClientIdInPath) (*DeleteClientResponse, error)

	// GetClient request
	GetClientWithResponse(ctx context.Context, clientId ClientIdInPath, params *GetClientParams) (*GetClientResponse, error)

	// EditClient request  with any body
	EditClientWithBodyWithResponse(ctx context.Context, clientId ClientIdInPath, contentType string, body io.Reader) (*EditClientResponse, error)

	EditClientWithResponse(ctx context.Context, clientId ClientIdInPath, body EditClientJSONRequestBody) (*EditClientResponse, error)

	// GetClipFolders request
	GetClipFoldersWithResponse(ctx context.Context) (*GetClipFoldersResponse, error)

	// CreateClipFolder request  with any body
	CreateClipFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateClipFolderResponse, error)

	CreateClipFolderWithResponse(ctx context.Context, body CreateClipFolderJSONRequestBody) (*CreateClipFolderResponse, error)

	// DeleteClipFolder request
	DeleteClipFolderWithResponse(ctx context.Context, folderId FolderIdInPath) (*DeleteClipFolderResponse, error)

	// GetClipFolder request
	GetClipFolderWithResponse(ctx context.Context, folderId FolderIdInPath) (*GetClipFolderResponse, error)

	// EditClipFolder request  with any body
	EditClipFolderWithBodyWithResponse(ctx context.Context, folderId FolderIdInPath, contentType string, body io.Reader) (*EditClipFolderResponse, error)

	EditClipFolderWithResponse(ctx context.Context, folderId FolderIdInPath, body EditClipFolderJSONRequestBody) (*EditClipFolderResponse, error)

	// GetClips request
	GetClipsWithResponse(ctx context.Context, folderId FolderIdInPath, params *GetClipsParams) (*GetClipsResponse, error)

	// ClipMessage request  with any body
	ClipMessageWithBodyWithResponse(ctx context.Context, folderId FolderIdInPath, contentType string, body io.Reader) (*ClipMessageResponse, error)

	ClipMessageWithResponse(ctx context.Context, folderId FolderIdInPath, body ClipMessageJSONRequestBody) (*ClipMessageResponse, error)

	// UnclipMessage request
	UnclipMessageWithResponse(ctx context.Context, folderId FolderIdInPath, messageId MessageIdInPath) (*UnclipMessageResponse, error)

	// GetFiles request
	GetFilesWithResponse(ctx context.Context, params *GetFilesParams) (*GetFilesResponse, error)

	// PostFile request  with any body
	PostFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFileResponse, error)

	// DeleteFile request
	DeleteFileWithResponse(ctx context.Context, fileId FileIdInPath) (*DeleteFileResponse, error)

	// GetFile request
	GetFileWithResponse(ctx context.Context, fileId FileIdInPath, params *GetFileParams) (*GetFileResponse, error)

	// GetFileMeta request
	GetFileMetaWithResponse(ctx context.Context, fileId FileIdInPath) (*GetFileMetaResponse, error)

	// GetThumbnailImage request
	GetThumbnailImageWithResponse(ctx context.Context, fileId FileIdInPath) (*GetThumbnailImageResponse, error)

	// GetUserGroups request
	GetUserGroupsWithResponse(ctx context.Context) (*GetUserGroupsResponse, error)

	// CreateUserGroup request  with any body
	CreateUserGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateUserGroupResponse, error)

	CreateUserGroupWithResponse(ctx context.Context, body CreateUserGroupJSONRequestBody) (*CreateUserGroupResponse, error)

	// DeleteUserGroup request
	DeleteUserGroupWithResponse(ctx context.Context, groupId GroupIdInPath) (*DeleteUserGroupResponse, error)

	// GetUserGroup request
	GetUserGroupWithResponse(ctx context.Context, groupId GroupIdInPath) (*GetUserGroupResponse, error)

	// EditUserGroup request  with any body
	EditUserGroupWithBodyWithResponse(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*EditUserGroupResponse, error)

	EditUserGroupWithResponse(ctx context.Context, groupId GroupIdInPath, body EditUserGroupJSONRequestBody) (*EditUserGroupResponse, error)

	// GetUserGroupAdmins request
	GetUserGroupAdminsWithResponse(ctx context.Context, groupId GroupIdInPath) (*GetUserGroupAdminsResponse, error)

	// AddUserGroupAdmin request  with any body
	AddUserGroupAdminWithBodyWithResponse(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*AddUserGroupAdminResponse, error)

	AddUserGroupAdminWithResponse(ctx context.Context, groupId GroupIdInPath, body AddUserGroupAdminJSONRequestBody) (*AddUserGroupAdminResponse, error)

	// RemoveUserGroupAdmin request
	RemoveUserGroupAdminWithResponse(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath) (*RemoveUserGroupAdminResponse, error)

	// GetUserGroupMembers request
	GetUserGroupMembersWithResponse(ctx context.Context, groupId GroupIdInPath) (*GetUserGroupMembersResponse, error)

	// AddUserGroupMember request  with any body
	AddUserGroupMemberWithBodyWithResponse(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*AddUserGroupMemberResponse, error)

	AddUserGroupMemberWithResponse(ctx context.Context, groupId GroupIdInPath, body AddUserGroupMemberJSONRequestBody) (*AddUserGroupMemberResponse, error)

	// RemoveUserGroupMember request
	RemoveUserGroupMemberWithResponse(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath) (*RemoveUserGroupMemberResponse, error)

	// EditUserGroupMember request  with any body
	EditUserGroupMemberWithBodyWithResponse(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath, contentType string, body io.Reader) (*EditUserGroupMemberResponse, error)

	EditUserGroupMemberWithResponse(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath, body EditUserGroupMemberJSONRequestBody) (*EditUserGroupMemberResponse, error)

	// Login request  with any body
	LoginWithBodyWithResponse(ctx context.Context, params *LoginParams, contentType string, body io.Reader) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, params *LoginParams, body LoginJSONRequestBody) (*LoginResponse, error)

	// Logout request
	LogoutWithResponse(ctx context.Context, params *LogoutParams) (*LogoutResponse, error)

	// DeleteMessage request
	DeleteMessageWithResponse(ctx context.Context, messageId MessageIdInPath) (*DeleteMessageResponse, error)

	// GetMessage request
	GetMessageWithResponse(ctx context.Context, messageId MessageIdInPath) (*GetMessageResponse, error)

	// EditMessage request  with any body
	EditMessageWithBodyWithResponse(ctx context.Context, messageId MessageIdInPath, contentType string, body io.Reader) (*EditMessageResponse, error)

	EditMessageWithResponse(ctx context.Context, messageId MessageIdInPath, body EditMessageJSONRequestBody) (*EditMessageResponse, error)

	// GetMessageClips request
	GetMessageClipsWithResponse(ctx context.Context, messageId MessageIdInPath) (*GetMessageClipsResponse, error)

	// RemovePin request
	RemovePinWithResponse(ctx context.Context, messageId MessageIdInPath) (*RemovePinResponse, error)

	// GetPin request
	GetPinWithResponse(ctx context.Context, messageId MessageIdInPath) (*GetPinResponse, error)

	// CreatePin request
	CreatePinWithResponse(ctx context.Context, messageId MessageIdInPath) (*CreatePinResponse, error)

	// GetMessageStamps request
	GetMessageStampsWithResponse(ctx context.Context, messageId MessageIdInPath) (*GetMessageStampsResponse, error)

	// RemoveMessageStamp request
	RemoveMessageStampWithResponse(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath) (*RemoveMessageStampResponse, error)

	// AddMessageStamp request  with any body
	AddMessageStampWithBodyWithResponse(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath, contentType string, body io.Reader) (*AddMessageStampResponse, error)

	AddMessageStampWithResponse(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath, body AddMessageStampJSONRequestBody) (*AddMessageStampResponse, error)

	// GetOAuth2Authorize request
	GetOAuth2AuthorizeWithResponse(ctx context.Context, params *GetOAuth2AuthorizeParams) (*GetOAuth2AuthorizeResponse, error)

	// PostOAuth2Authorize request  with any body
	PostOAuth2AuthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostOAuth2AuthorizeResponse, error)

	// PostOAuth2AuthorizeDecide request  with any body
	PostOAuth2AuthorizeDecideWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostOAuth2AuthorizeDecideResponse, error)

	// RevokeOAuth2Token request  with any body
	RevokeOAuth2TokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RevokeOAuth2TokenResponse, error)

	RevokeOAuth2TokenWithResponse(ctx context.Context, body RevokeOAuth2TokenJSONRequestBody) (*RevokeOAuth2TokenResponse, error)

	// PostOAuth2Token request  with any body
	PostOAuth2TokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostOAuth2TokenResponse, error)

	// GetOgp request
	GetOgpWithResponse(ctx context.Context, params *GetOgpParams) (*GetOgpResponse, error)

	// GetPublicUserIcon request
	GetPublicUserIconWithResponse(ctx context.Context, username string) (*GetPublicUserIconResponse, error)

	// GetStampPalettes request
	GetStampPalettesWithResponse(ctx context.Context) (*GetStampPalettesResponse, error)

	// CreateStampPalette request  with any body
	CreateStampPaletteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateStampPaletteResponse, error)

	CreateStampPaletteWithResponse(ctx context.Context, body CreateStampPaletteJSONRequestBody) (*CreateStampPaletteResponse, error)

	// DeleteStampPalette request
	DeleteStampPaletteWithResponse(ctx context.Context, paletteId PaletteIdInPath) (*DeleteStampPaletteResponse, error)

	// GetStampPalette request
	GetStampPaletteWithResponse(ctx context.Context, paletteId PaletteIdInPath) (*GetStampPaletteResponse, error)

	// EditStampPalette request  with any body
	EditStampPaletteWithBodyWithResponse(ctx context.Context, paletteId PaletteIdInPath, contentType string, body io.Reader) (*EditStampPaletteResponse, error)

	EditStampPaletteWithResponse(ctx context.Context, paletteId PaletteIdInPath, body EditStampPaletteJSONRequestBody) (*EditStampPaletteResponse, error)

	// GetStamps request
	GetStampsWithResponse(ctx context.Context, params *GetStampsParams) (*GetStampsResponse, error)

	// CreateStamp request  with any body
	CreateStampWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateStampResponse, error)

	// DeleteStamp request
	DeleteStampWithResponse(ctx context.Context, stampId StampIdInPath) (*DeleteStampResponse, error)

	// GetStamp request
	GetStampWithResponse(ctx context.Context, stampId StampIdInPath) (*GetStampResponse, error)

	// EditStamp request  with any body
	EditStampWithBodyWithResponse(ctx context.Context, stampId StampIdInPath, contentType string, body io.Reader) (*EditStampResponse, error)

	EditStampWithResponse(ctx context.Context, stampId StampIdInPath, body EditStampJSONRequestBody) (*EditStampResponse, error)

	// GetStampImage request
	GetStampImageWithResponse(ctx context.Context, stampId StampIdInPath) (*GetStampImageResponse, error)

	// ChangeStampImage request  with any body
	ChangeStampImageWithBodyWithResponse(ctx context.Context, stampId StampIdInPath, contentType string, body io.Reader) (*ChangeStampImageResponse, error)

	// GetTag request
	GetTagWithResponse(ctx context.Context, tagId TagIdInPath) (*GetTagResponse, error)

	// GetUsers request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams) (*GetUsersResponse, error)

	// CreateUser request  with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody) (*CreateUserResponse, error)

	// GetMe request
	GetMeWithResponse(ctx context.Context) (*GetMeResponse, error)

	// EditMe request  with any body
	EditMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*EditMeResponse, error)

	EditMeWithResponse(ctx context.Context, body EditMeJSONRequestBody) (*EditMeResponse, error)

	// GetMyExternalAccounts request
	GetMyExternalAccountsWithResponse(ctx context.Context) (*GetMyExternalAccountsResponse, error)

	// LinkExternalAccount request  with any body
	LinkExternalAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*LinkExternalAccountResponse, error)

	LinkExternalAccountWithResponse(ctx context.Context, body LinkExternalAccountJSONRequestBody) (*LinkExternalAccountResponse, error)

	// UnlinkExternalAccount request  with any body
	UnlinkExternalAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UnlinkExternalAccountResponse, error)

	UnlinkExternalAccountWithResponse(ctx context.Context, body UnlinkExternalAccountJSONRequestBody) (*UnlinkExternalAccountResponse, error)

	// RegisterFCMDevice request  with any body
	RegisterFCMDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegisterFCMDeviceResponse, error)

	RegisterFCMDeviceWithResponse(ctx context.Context, body RegisterFCMDeviceJSONRequestBody) (*RegisterFCMDeviceResponse, error)

	// GetMyIcon request
	GetMyIconWithResponse(ctx context.Context) (*GetMyIconResponse, error)

	// ChangeMyIcon request  with any body
	ChangeMyIconWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ChangeMyIconResponse, error)

	// ChangeMyPassword request  with any body
	ChangeMyPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ChangeMyPasswordResponse, error)

	ChangeMyPasswordWithResponse(ctx context.Context, body ChangeMyPasswordJSONRequestBody) (*ChangeMyPasswordResponse, error)

	// GetMyQRCode request
	GetMyQRCodeWithResponse(ctx context.Context, params *GetMyQRCodeParams) (*GetMyQRCodeResponse, error)

	// GetMySessions request
	GetMySessionsWithResponse(ctx context.Context) (*GetMySessionsResponse, error)

	// RevokeMySession request
	RevokeMySessionWithResponse(ctx context.Context, sessionId SessionIdInPath) (*RevokeMySessionResponse, error)

	// GetMyStampHistory request
	GetMyStampHistoryWithResponse(ctx context.Context, params *GetMyStampHistoryParams) (*GetMyStampHistoryResponse, error)

	// GetMyStars request
	GetMyStarsWithResponse(ctx context.Context) (*GetMyStarsResponse, error)

	// AddMyStar request  with any body
	AddMyStarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AddMyStarResponse, error)

	AddMyStarWithResponse(ctx context.Context, body AddMyStarJSONRequestBody) (*AddMyStarResponse, error)

	// RemoveMyStar request
	RemoveMyStarWithResponse(ctx context.Context, channelId ChannelIdInPath) (*RemoveMyStarResponse, error)

	// GetMyChannelSubscriptions request
	GetMyChannelSubscriptionsWithResponse(ctx context.Context) (*GetMyChannelSubscriptionsResponse, error)

	// SetChannelSubscribeLevel request  with any body
	SetChannelSubscribeLevelWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*SetChannelSubscribeLevelResponse, error)

	SetChannelSubscribeLevelWithResponse(ctx context.Context, channelId ChannelIdInPath, body SetChannelSubscribeLevelJSONRequestBody) (*SetChannelSubscribeLevelResponse, error)

	// GetMyUserTags request
	GetMyUserTagsWithResponse(ctx context.Context) (*GetMyUserTagsResponse, error)

	// AddMyUserTag request  with any body
	AddMyUserTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AddMyUserTagResponse, error)

	AddMyUserTagWithResponse(ctx context.Context, body AddMyUserTagJSONRequestBody) (*AddMyUserTagResponse, error)

	// RemoveMyUserTag request
	RemoveMyUserTagWithResponse(ctx context.Context, tagId TagIdInPath) (*RemoveMyUserTagResponse, error)

	// EditMyUserTag request  with any body
	EditMyUserTagWithBodyWithResponse(ctx context.Context, tagId TagIdInPath, contentType string, body io.Reader) (*EditMyUserTagResponse, error)

	EditMyUserTagWithResponse(ctx context.Context, tagId TagIdInPath, body EditMyUserTagJSONRequestBody) (*EditMyUserTagResponse, error)

	// GetMyTokens request
	GetMyTokensWithResponse(ctx context.Context) (*GetMyTokensResponse, error)

	// RevokeMyToken request
	RevokeMyTokenWithResponse(ctx context.Context, tokenId TokenIdInPath) (*RevokeMyTokenResponse, error)

	// GetMyUnreadChannels request
	GetMyUnreadChannelsWithResponse(ctx context.Context) (*GetMyUnreadChannelsResponse, error)

	// ReadChannel request
	ReadChannelWithResponse(ctx context.Context, channelId ChannelIdInPath) (*ReadChannelResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, userId UserIdInPath) (*GetUserResponse, error)

	// EditUser request  with any body
	EditUserWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*EditUserResponse, error)

	EditUserWithResponse(ctx context.Context, userId UserIdInPath, body EditUserJSONRequestBody) (*EditUserResponse, error)

	// GetUserDMChannel request
	GetUserDMChannelWithResponse(ctx context.Context, userId string) (*GetUserDMChannelResponse, error)

	// GetUserIcon request
	GetUserIconWithResponse(ctx context.Context, userId UserIdInPath) (*GetUserIconResponse, error)

	// ChangeUserIcon request  with any body
	ChangeUserIconWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*ChangeUserIconResponse, error)

	// GetDirectMessages request
	GetDirectMessagesWithResponse(ctx context.Context, userId UserIdInPath, params *GetDirectMessagesParams) (*GetDirectMessagesResponse, error)

	// PostDirectMessage request  with any body
	PostDirectMessageWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*PostDirectMessageResponse, error)

	PostDirectMessageWithResponse(ctx context.Context, userId UserIdInPath, body PostDirectMessageJSONRequestBody) (*PostDirectMessageResponse, error)

	// ChangeUserPassword request  with any body
	ChangeUserPasswordWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*ChangeUserPasswordResponse, error)

	ChangeUserPasswordWithResponse(ctx context.Context, userId UserIdInPath, body ChangeUserPasswordJSONRequestBody) (*ChangeUserPasswordResponse, error)

	// GetUserTags request
	GetUserTagsWithResponse(ctx context.Context, userId UserIdInPath) (*GetUserTagsResponse, error)

	// AddUserTag request  with any body
	AddUserTagWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*AddUserTagResponse, error)

	AddUserTagWithResponse(ctx context.Context, userId UserIdInPath, body AddUserTagJSONRequestBody) (*AddUserTagResponse, error)

	// RemoveUserTag request
	RemoveUserTagWithResponse(ctx context.Context, userId UserIdInPath, tagId TagIdInPath) (*RemoveUserTagResponse, error)

	// EditUserTag request  with any body
	EditUserTagWithBodyWithResponse(ctx context.Context, userId UserIdInPath, tagId TagIdInPath, contentType string, body io.Reader) (*EditUserTagResponse, error)

	EditUserTagWithResponse(ctx context.Context, userId UserIdInPath, tagId TagIdInPath, body EditUserTagJSONRequestBody) (*EditUserTagResponse, error)

	// GetServerVersion request
	GetServerVersionWithResponse(ctx context.Context) (*GetServerVersionResponse, error)

	// GetWebhooks request
	GetWebhooksWithResponse(ctx context.Context, params *GetWebhooksParams) (*GetWebhooksResponse, error)

	// CreateWebhook request  with any body
	CreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateWebhookResponse, error)

	CreateWebhookWithResponse(ctx context.Context, body CreateWebhookJSONRequestBody) (*CreateWebhookResponse, error)

	// DeleteWebhook request
	DeleteWebhookWithResponse(ctx context.Context, webhookId WebhookIdInPath) (*DeleteWebhookResponse, error)

	// GetWebhook request
	GetWebhookWithResponse(ctx context.Context, webhookId WebhookIdInPath) (*GetWebhookResponse, error)

	// EditWebhook request  with any body
	EditWebhookWithBodyWithResponse(ctx context.Context, webhookId WebhookIdInPath, contentType string, body io.Reader) (*EditWebhookResponse, error)

	EditWebhookWithResponse(ctx context.Context, webhookId WebhookIdInPath, body EditWebhookJSONRequestBody) (*EditWebhookResponse, error)

	// PostWebhook request  with any body
	PostWebhookWithBodyWithResponse(ctx context.Context, webhookId WebhookIdInPath, params *PostWebhookParams, contentType string, body io.Reader) (*PostWebhookResponse, error)

	// GetWebhookIcon request
	GetWebhookIconWithResponse(ctx context.Context, webhookId WebhookIdInPath) (*GetWebhookIconResponse, error)

	// ChangeWebhookIcon request  with any body
	ChangeWebhookIconWithBodyWithResponse(ctx context.Context, webhookId WebhookIdInPath, contentType string, body io.Reader) (*ChangeWebhookIconResponse, error)

	// GetWebhookMessages request
	GetWebhookMessagesWithResponse(ctx context.Context, webhookId WebhookIdInPath, params *GetWebhookMessagesParams) (*GetWebhookMessagesResponse, error)

	// PostWebRTCAuthenticate request  with any body
	PostWebRTCAuthenticateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostWebRTCAuthenticateResponse, error)

	PostWebRTCAuthenticateWithResponse(ctx context.Context, body PostWebRTCAuthenticateJSONRequestBody) (*PostWebRTCAuthenticateResponse, error)

	// GetWebRTCState request
	GetWebRTCStateWithResponse(ctx context.Context) (*GetWebRTCStateResponse, error)

	// Ws request
	WsWithResponse(ctx context.Context) (*WsResponse, error)
}

type GetOnlineUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetOnlineUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOnlineUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActivityTimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActivityTimelineMessage
}

// Status returns HTTPResponse.Status
func (r GetActivityTimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActivityTimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Bot
}

// Status returns HTTPResponse.Status
func (r GetBotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BotDetail
}

// Status returns HTTPResponse.Status
func (r CreateBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ActivateBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InactivateBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r InactivateBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InactivateBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LetBotJoinChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LetBotJoinChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LetBotJoinChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LetBotLeaveChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LetBotLeaveChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LetBotLeaveChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReissueBotResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BotTokens
}

// Status returns HTTPResponse.Status
func (r ReissueBotResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReissueBotResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBotIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBotIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBotIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeBotIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeBotIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeBotIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBotLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BotEventLog
}

// Status returns HTTPResponse.Status
func (r GetBotLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBotLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelList
}

// Status returns HTTPResponse.Status
func (r GetChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Channel
}

// Status returns HTTPResponse.Status
func (r CreateChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Channel
}

// Status returns HTTPResponse.Status
func (r GetChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelBotsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BotUser
}

// Status returns HTTPResponse.Status
func (r GetChannelBotsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelBotsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChannelEvent
}

// Status returns HTTPResponse.Status
func (r GetChannelEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Message
}

// Status returns HTTPResponse.Status
func (r GetMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Message
}

// Status returns HTTPResponse.Status
func (r PostMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelPinsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Pin
}

// Status returns HTTPResponse.Status
func (r GetChannelPinsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelPinsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelStats
}

// Status returns HTTPResponse.Status
func (r GetChannelStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelSubscribersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetChannelSubscribersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelSubscribersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditChannelSubscribersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditChannelSubscribersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditChannelSubscribersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetChannelSubscribersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetChannelSubscribersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetChannelSubscribersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelTopicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTopic
}

// Status returns HTTPResponse.Status
func (r GetChannelTopicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelTopicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditChannelTopicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditChannelTopicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditChannelTopicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetChannelViewersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ChannelViewer
}

// Status returns HTTPResponse.Status
func (r GetChannelViewersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetChannelViewersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OAuth2Client
}

// Status returns HTTPResponse.Status
func (r GetClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OAuth2ClientDetail
}

// Status returns HTTPResponse.Status
func (r CreateClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClipFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClipFolder
}

// Status returns HTTPResponse.Status
func (r GetClipFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClipFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateClipFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ClipFolder
}

// Status returns HTTPResponse.Status
func (r CreateClipFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateClipFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClipFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClipFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClipFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClipFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClipFolder
}

// Status returns HTTPResponse.Status
func (r GetClipFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClipFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditClipFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditClipFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditClipFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClippedMessage
}

// Status returns HTTPResponse.Status
func (r GetClipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClipMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClippedMessage
}

// Status returns HTTPResponse.Status
func (r ClipMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClipMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnclipMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnclipMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnclipMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FileInfo
}

// Status returns HTTPResponse.Status
func (r GetFilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FileInfo
}

// Status returns HTTPResponse.Status
func (r PostFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFileMetaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FileInfo
}

// Status returns HTTPResponse.Status
func (r GetFileMetaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFileMetaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetThumbnailImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetThumbnailImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetThumbnailImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserGroup
}

// Status returns HTTPResponse.Status
func (r GetUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserGroup
}

// Status returns HTTPResponse.Status
func (r CreateUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserGroup
}

// Status returns HTTPResponse.Status
func (r GetUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupAdminsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetUserGroupAdminsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupAdminsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserGroupAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddUserGroupAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserGroupAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserGroupAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserGroupAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserGroupAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserGroupMember
}

// Status returns HTTPResponse.Status
func (r GetUserGroupMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddUserGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserGroupMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditUserGroupMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserGroupMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Message
}

// Status returns HTTPResponse.Status
func (r GetMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Message
}

// Status returns HTTPResponse.Status
func (r EditMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageClipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MessageClip
}

// Status returns HTTPResponse.Status
func (r GetMessageClipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageClipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovePinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemovePinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovePinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessagePin
}

// Status returns HTTPResponse.Status
func (r GetPinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *MessagePin
}

// Status returns HTTPResponse.Status
func (r CreatePinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageStampsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]MessageStamp
}

// Status returns HTTPResponse.Status
func (r GetMessageStampsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageStampsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMessageStampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMessageStampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMessageStampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMessageStampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddMessageStampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMessageStampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOAuth2AuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOAuth2AuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOAuth2AuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2AuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOAuth2AuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2AuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2AuthorizeDecideResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOAuth2AuthorizeDecideResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2AuthorizeDecideResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeOAuth2TokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RevokeOAuth2TokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeOAuth2TokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOAuth2TokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OAuth2Token
}

// Status returns HTTPResponse.Status
func (r PostOAuth2TokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOAuth2TokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOgpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ogp
}

// Status returns HTTPResponse.Status
func (r GetOgpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOgpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPublicUserIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPublicUserIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPublicUserIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStampPalettesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StampPalette
}

// Status returns HTTPResponse.Status
func (r GetStampPalettesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStampPalettesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStampPaletteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *StampPalette
}

// Status returns HTTPResponse.Status
func (r CreateStampPaletteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStampPaletteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStampPaletteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStampPaletteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStampPaletteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStampPaletteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StampPalette
}

// Status returns HTTPResponse.Status
func (r GetStampPaletteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStampPaletteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditStampPaletteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditStampPaletteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditStampPaletteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStampsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Stamp
}

// Status returns HTTPResponse.Status
func (r GetStampsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStampsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Stamp
}

// Status returns HTTPResponse.Status
func (r CreateStampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteStampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteStampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteStampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Stamp
}

// Status returns HTTPResponse.Status
func (r GetStampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditStampResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditStampResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditStampResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStampImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStampImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStampImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeStampImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeStampImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeStampImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r GetTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserDetail
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MyUserDetail
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyExternalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ExternalProviderUser
}

// Status returns HTTPResponse.Status
func (r GetMyExternalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyExternalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LinkExternalAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LinkExternalAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LinkExternalAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnlinkExternalAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UnlinkExternalAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnlinkExternalAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterFCMDeviceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RegisterFCMDeviceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterFCMDeviceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMyIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeMyIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeMyIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeMyIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeMyPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeMyPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeMyPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyQRCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMyQRCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyQRCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMySessionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]LoginSession
}

// Status returns HTTPResponse.Status
func (r GetMySessionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMySessionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeMySessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RevokeMySessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeMySessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyStampHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]StampHistoryEntry
}

// Status returns HTTPResponse.Status
func (r GetMyStampHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyStampHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyStarsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetMyStarsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyStarsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMyStarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddMyStarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMyStarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMyStarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMyStarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMyStarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyChannelSubscriptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserSubscribeState
}

// Status returns HTTPResponse.Status
func (r GetMyChannelSubscriptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyChannelSubscriptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetChannelSubscribeLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetChannelSubscribeLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetChannelSubscribeLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyUserTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserTag
}

// Status returns HTTPResponse.Status
func (r GetMyUserTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyUserTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMyUserTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserTag
}

// Status returns HTTPResponse.Status
func (r AddMyUserTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMyUserTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMyUserTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMyUserTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMyUserTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditMyUserTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditMyUserTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditMyUserTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyTokensResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ActiveOAuth2Token
}

// Status returns HTTPResponse.Status
func (r GetMyTokensResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyTokensResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RevokeMyTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RevokeMyTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RevokeMyTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyUnreadChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UnreadChannel
}

// Status returns HTTPResponse.Status
func (r GetMyUnreadChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyUnreadChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReadChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserDetail
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDMChannelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DMChannel
}

// Status returns HTTPResponse.Status
func (r GetUserDMChannelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDMChannelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetUserIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeUserIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeUserIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeUserIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDirectMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Message
}

// Status returns HTTPResponse.Status
func (r GetDirectMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDirectMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDirectMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Message
}

// Status returns HTTPResponse.Status
func (r PostDirectMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDirectMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeUserPasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeUserPasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeUserPasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserTag
}

// Status returns HTTPResponse.Status
func (r GetUserTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddUserTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserTag
}

// Status returns HTTPResponse.Status
func (r AddUserTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddUserTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveUserTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveUserTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveUserTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserTagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EditUserTagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserTagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServerVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Version
}

// Status returns HTTPResponse.Status
func (r GetServerVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Webhook
}

// Status returns HTTPResponse.Status
func (r GetWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Webhook
}

// Status returns HTTPResponse.Status
func (r CreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Webhook
}

// Status returns HTTPResponse.Status
func (r GetWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Webhook
}

// Status returns HTTPResponse.Status
func (r EditWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWebhookIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeWebhookIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ChangeWebhookIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeWebhookIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Message
}

// Status returns HTTPResponse.Status
func (r GetWebhookMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWebRTCAuthenticateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebRTCAuthenticateResult
}

// Status returns HTTPResponse.Status
func (r PostWebRTCAuthenticateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWebRTCAuthenticateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebRTCStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebRTCUserStates
}

// Status returns HTTPResponse.Status
func (r GetWebRTCStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebRTCStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r WsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOnlineUsersWithResponse request returning *GetOnlineUsersResponse
func (c *ClientWithResponses) GetOnlineUsersWithResponse(ctx context.Context) (*GetOnlineUsersResponse, error) {
	rsp, err := c.GetOnlineUsers(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetOnlineUsersResponse(rsp)
}

// GetActivityTimelineWithResponse request returning *GetActivityTimelineResponse
func (c *ClientWithResponses) GetActivityTimelineWithResponse(ctx context.Context, params *GetActivityTimelineParams) (*GetActivityTimelineResponse, error) {
	rsp, err := c.GetActivityTimeline(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetActivityTimelineResponse(rsp)
}

// GetBotsWithResponse request returning *GetBotsResponse
func (c *ClientWithResponses) GetBotsWithResponse(ctx context.Context, params *GetBotsParams) (*GetBotsResponse, error) {
	rsp, err := c.GetBots(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBotsResponse(rsp)
}

// CreateBotWithBodyWithResponse request with arbitrary body returning *CreateBotResponse
func (c *ClientWithResponses) CreateBotWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateBotResponse, error) {
	rsp, err := c.CreateBotWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateBotResponse(rsp)
}

func (c *ClientWithResponses) CreateBotWithResponse(ctx context.Context, body CreateBotJSONRequestBody) (*CreateBotResponse, error) {
	rsp, err := c.CreateBot(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateBotResponse(rsp)
}

// DeleteBotWithResponse request returning *DeleteBotResponse
func (c *ClientWithResponses) DeleteBotWithResponse(ctx context.Context, botId BotIdInPath) (*DeleteBotResponse, error) {
	rsp, err := c.DeleteBot(ctx, botId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBotResponse(rsp)
}

// GetBotWithResponse request returning *GetBotResponse
func (c *ClientWithResponses) GetBotWithResponse(ctx context.Context, botId BotIdInPath, params *GetBotParams) (*GetBotResponse, error) {
	rsp, err := c.GetBot(ctx, botId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBotResponse(rsp)
}

// EditBotWithBodyWithResponse request with arbitrary body returning *EditBotResponse
func (c *ClientWithResponses) EditBotWithBodyWithResponse(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*EditBotResponse, error) {
	rsp, err := c.EditBotWithBody(ctx, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditBotResponse(rsp)
}

func (c *ClientWithResponses) EditBotWithResponse(ctx context.Context, botId BotIdInPath, body EditBotJSONRequestBody) (*EditBotResponse, error) {
	rsp, err := c.EditBot(ctx, botId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditBotResponse(rsp)
}

// ActivateBotWithResponse request returning *ActivateBotResponse
func (c *ClientWithResponses) ActivateBotWithResponse(ctx context.Context, botId BotIdInPath) (*ActivateBotResponse, error) {
	rsp, err := c.ActivateBot(ctx, botId)
	if err != nil {
		return nil, err
	}
	return ParseActivateBotResponse(rsp)
}

// InactivateBotWithResponse request returning *InactivateBotResponse
func (c *ClientWithResponses) InactivateBotWithResponse(ctx context.Context, botId BotIdInPath) (*InactivateBotResponse, error) {
	rsp, err := c.InactivateBot(ctx, botId)
	if err != nil {
		return nil, err
	}
	return ParseInactivateBotResponse(rsp)
}

// LetBotJoinChannelWithBodyWithResponse request with arbitrary body returning *LetBotJoinChannelResponse
func (c *ClientWithResponses) LetBotJoinChannelWithBodyWithResponse(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*LetBotJoinChannelResponse, error) {
	rsp, err := c.LetBotJoinChannelWithBody(ctx, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseLetBotJoinChannelResponse(rsp)
}

func (c *ClientWithResponses) LetBotJoinChannelWithResponse(ctx context.Context, botId BotIdInPath, body LetBotJoinChannelJSONRequestBody) (*LetBotJoinChannelResponse, error) {
	rsp, err := c.LetBotJoinChannel(ctx, botId, body)
	if err != nil {
		return nil, err
	}
	return ParseLetBotJoinChannelResponse(rsp)
}

// LetBotLeaveChannelWithBodyWithResponse request with arbitrary body returning *LetBotLeaveChannelResponse
func (c *ClientWithResponses) LetBotLeaveChannelWithBodyWithResponse(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*LetBotLeaveChannelResponse, error) {
	rsp, err := c.LetBotLeaveChannelWithBody(ctx, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseLetBotLeaveChannelResponse(rsp)
}

func (c *ClientWithResponses) LetBotLeaveChannelWithResponse(ctx context.Context, botId BotIdInPath, body LetBotLeaveChannelJSONRequestBody) (*LetBotLeaveChannelResponse, error) {
	rsp, err := c.LetBotLeaveChannel(ctx, botId, body)
	if err != nil {
		return nil, err
	}
	return ParseLetBotLeaveChannelResponse(rsp)
}

// ReissueBotWithResponse request returning *ReissueBotResponse
func (c *ClientWithResponses) ReissueBotWithResponse(ctx context.Context, botId BotIdInPath) (*ReissueBotResponse, error) {
	rsp, err := c.ReissueBot(ctx, botId)
	if err != nil {
		return nil, err
	}
	return ParseReissueBotResponse(rsp)
}

// GetBotIconWithResponse request returning *GetBotIconResponse
func (c *ClientWithResponses) GetBotIconWithResponse(ctx context.Context, botId BotIdInPath) (*GetBotIconResponse, error) {
	rsp, err := c.GetBotIcon(ctx, botId)
	if err != nil {
		return nil, err
	}
	return ParseGetBotIconResponse(rsp)
}

// ChangeBotIconWithBodyWithResponse request with arbitrary body returning *ChangeBotIconResponse
func (c *ClientWithResponses) ChangeBotIconWithBodyWithResponse(ctx context.Context, botId BotIdInPath, contentType string, body io.Reader) (*ChangeBotIconResponse, error) {
	rsp, err := c.ChangeBotIconWithBody(ctx, botId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeBotIconResponse(rsp)
}

// GetBotLogsWithResponse request returning *GetBotLogsResponse
func (c *ClientWithResponses) GetBotLogsWithResponse(ctx context.Context, botId BotIdInPath, params *GetBotLogsParams) (*GetBotLogsResponse, error) {
	rsp, err := c.GetBotLogs(ctx, botId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetBotLogsResponse(rsp)
}

// GetChannelsWithResponse request returning *GetChannelsResponse
func (c *ClientWithResponses) GetChannelsWithResponse(ctx context.Context, params *GetChannelsParams) (*GetChannelsResponse, error) {
	rsp, err := c.GetChannels(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelsResponse(rsp)
}

// CreateChannelWithBodyWithResponse request with arbitrary body returning *CreateChannelResponse
func (c *ClientWithResponses) CreateChannelWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateChannelResponse, error) {
	rsp, err := c.CreateChannelWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateChannelResponse(rsp)
}

func (c *ClientWithResponses) CreateChannelWithResponse(ctx context.Context, body CreateChannelJSONRequestBody) (*CreateChannelResponse, error) {
	rsp, err := c.CreateChannel(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateChannelResponse(rsp)
}

// GetChannelWithResponse request returning *GetChannelResponse
func (c *ClientWithResponses) GetChannelWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelResponse, error) {
	rsp, err := c.GetChannel(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelResponse(rsp)
}

// EditChannelWithBodyWithResponse request with arbitrary body returning *EditChannelResponse
func (c *ClientWithResponses) EditChannelWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*EditChannelResponse, error) {
	rsp, err := c.EditChannelWithBody(ctx, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditChannelResponse(rsp)
}

func (c *ClientWithResponses) EditChannelWithResponse(ctx context.Context, channelId ChannelIdInPath, body EditChannelJSONRequestBody) (*EditChannelResponse, error) {
	rsp, err := c.EditChannel(ctx, channelId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditChannelResponse(rsp)
}

// GetChannelBotsWithResponse request returning *GetChannelBotsResponse
func (c *ClientWithResponses) GetChannelBotsWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelBotsResponse, error) {
	rsp, err := c.GetChannelBots(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelBotsResponse(rsp)
}

// GetChannelEventsWithResponse request returning *GetChannelEventsResponse
func (c *ClientWithResponses) GetChannelEventsWithResponse(ctx context.Context, channelId ChannelIdInPath, params *GetChannelEventsParams) (*GetChannelEventsResponse, error) {
	rsp, err := c.GetChannelEvents(ctx, channelId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelEventsResponse(rsp)
}

// GetMessagesWithResponse request returning *GetMessagesResponse
func (c *ClientWithResponses) GetMessagesWithResponse(ctx context.Context, channelId ChannelIdInPath, params *GetMessagesParams) (*GetMessagesResponse, error) {
	rsp, err := c.GetMessages(ctx, channelId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMessagesResponse(rsp)
}

// PostMessageWithBodyWithResponse request with arbitrary body returning *PostMessageResponse
func (c *ClientWithResponses) PostMessageWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*PostMessageResponse, error) {
	rsp, err := c.PostMessageWithBody(ctx, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageResponse(rsp)
}

func (c *ClientWithResponses) PostMessageWithResponse(ctx context.Context, channelId ChannelIdInPath, body PostMessageJSONRequestBody) (*PostMessageResponse, error) {
	rsp, err := c.PostMessage(ctx, channelId, body)
	if err != nil {
		return nil, err
	}
	return ParsePostMessageResponse(rsp)
}

// GetChannelPinsWithResponse request returning *GetChannelPinsResponse
func (c *ClientWithResponses) GetChannelPinsWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelPinsResponse, error) {
	rsp, err := c.GetChannelPins(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelPinsResponse(rsp)
}

// GetChannelStatsWithResponse request returning *GetChannelStatsResponse
func (c *ClientWithResponses) GetChannelStatsWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelStatsResponse, error) {
	rsp, err := c.GetChannelStats(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelStatsResponse(rsp)
}

// GetChannelSubscribersWithResponse request returning *GetChannelSubscribersResponse
func (c *ClientWithResponses) GetChannelSubscribersWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelSubscribersResponse, error) {
	rsp, err := c.GetChannelSubscribers(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelSubscribersResponse(rsp)
}

// EditChannelSubscribersWithBodyWithResponse request with arbitrary body returning *EditChannelSubscribersResponse
func (c *ClientWithResponses) EditChannelSubscribersWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*EditChannelSubscribersResponse, error) {
	rsp, err := c.EditChannelSubscribersWithBody(ctx, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditChannelSubscribersResponse(rsp)
}

func (c *ClientWithResponses) EditChannelSubscribersWithResponse(ctx context.Context, channelId ChannelIdInPath, body EditChannelSubscribersJSONRequestBody) (*EditChannelSubscribersResponse, error) {
	rsp, err := c.EditChannelSubscribers(ctx, channelId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditChannelSubscribersResponse(rsp)
}

// SetChannelSubscribersWithBodyWithResponse request with arbitrary body returning *SetChannelSubscribersResponse
func (c *ClientWithResponses) SetChannelSubscribersWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*SetChannelSubscribersResponse, error) {
	rsp, err := c.SetChannelSubscribersWithBody(ctx, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSetChannelSubscribersResponse(rsp)
}

func (c *ClientWithResponses) SetChannelSubscribersWithResponse(ctx context.Context, channelId ChannelIdInPath, body SetChannelSubscribersJSONRequestBody) (*SetChannelSubscribersResponse, error) {
	rsp, err := c.SetChannelSubscribers(ctx, channelId, body)
	if err != nil {
		return nil, err
	}
	return ParseSetChannelSubscribersResponse(rsp)
}

// GetChannelTopicWithResponse request returning *GetChannelTopicResponse
func (c *ClientWithResponses) GetChannelTopicWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelTopicResponse, error) {
	rsp, err := c.GetChannelTopic(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelTopicResponse(rsp)
}

// EditChannelTopicWithBodyWithResponse request with arbitrary body returning *EditChannelTopicResponse
func (c *ClientWithResponses) EditChannelTopicWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*EditChannelTopicResponse, error) {
	rsp, err := c.EditChannelTopicWithBody(ctx, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditChannelTopicResponse(rsp)
}

func (c *ClientWithResponses) EditChannelTopicWithResponse(ctx context.Context, channelId ChannelIdInPath, body EditChannelTopicJSONRequestBody) (*EditChannelTopicResponse, error) {
	rsp, err := c.EditChannelTopic(ctx, channelId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditChannelTopicResponse(rsp)
}

// GetChannelViewersWithResponse request returning *GetChannelViewersResponse
func (c *ClientWithResponses) GetChannelViewersWithResponse(ctx context.Context, channelId ChannelIdInPath) (*GetChannelViewersResponse, error) {
	rsp, err := c.GetChannelViewers(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseGetChannelViewersResponse(rsp)
}

// GetClientsWithResponse request returning *GetClientsResponse
func (c *ClientWithResponses) GetClientsWithResponse(ctx context.Context, params *GetClientsParams) (*GetClientsResponse, error) {
	rsp, err := c.GetClients(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClientsResponse(rsp)
}

// CreateClientWithBodyWithResponse request with arbitrary body returning *CreateClientResponse
func (c *ClientWithResponses) CreateClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateClientResponse, error) {
	rsp, err := c.CreateClientWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientResponse(rsp)
}

func (c *ClientWithResponses) CreateClientWithResponse(ctx context.Context, body CreateClientJSONRequestBody) (*CreateClientResponse, error) {
	rsp, err := c.CreateClient(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateClientResponse(rsp)
}

// DeleteClientWithResponse request returning *DeleteClientResponse
func (c *ClientWithResponses) DeleteClientWithResponse(ctx context.Context, clientId ClientIdInPath) (*DeleteClientResponse, error) {
	rsp, err := c.DeleteClient(ctx, clientId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClientResponse(rsp)
}

// GetClientWithResponse request returning *GetClientResponse
func (c *ClientWithResponses) GetClientWithResponse(ctx context.Context, clientId ClientIdInPath, params *GetClientParams) (*GetClientResponse, error) {
	rsp, err := c.GetClient(ctx, clientId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClientResponse(rsp)
}

// EditClientWithBodyWithResponse request with arbitrary body returning *EditClientResponse
func (c *ClientWithResponses) EditClientWithBodyWithResponse(ctx context.Context, clientId ClientIdInPath, contentType string, body io.Reader) (*EditClientResponse, error) {
	rsp, err := c.EditClientWithBody(ctx, clientId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditClientResponse(rsp)
}

func (c *ClientWithResponses) EditClientWithResponse(ctx context.Context, clientId ClientIdInPath, body EditClientJSONRequestBody) (*EditClientResponse, error) {
	rsp, err := c.EditClient(ctx, clientId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditClientResponse(rsp)
}

// GetClipFoldersWithResponse request returning *GetClipFoldersResponse
func (c *ClientWithResponses) GetClipFoldersWithResponse(ctx context.Context) (*GetClipFoldersResponse, error) {
	rsp, err := c.GetClipFolders(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetClipFoldersResponse(rsp)
}

// CreateClipFolderWithBodyWithResponse request with arbitrary body returning *CreateClipFolderResponse
func (c *ClientWithResponses) CreateClipFolderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateClipFolderResponse, error) {
	rsp, err := c.CreateClipFolderWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateClipFolderResponse(rsp)
}

func (c *ClientWithResponses) CreateClipFolderWithResponse(ctx context.Context, body CreateClipFolderJSONRequestBody) (*CreateClipFolderResponse, error) {
	rsp, err := c.CreateClipFolder(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateClipFolderResponse(rsp)
}

// DeleteClipFolderWithResponse request returning *DeleteClipFolderResponse
func (c *ClientWithResponses) DeleteClipFolderWithResponse(ctx context.Context, folderId FolderIdInPath) (*DeleteClipFolderResponse, error) {
	rsp, err := c.DeleteClipFolder(ctx, folderId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClipFolderResponse(rsp)
}

// GetClipFolderWithResponse request returning *GetClipFolderResponse
func (c *ClientWithResponses) GetClipFolderWithResponse(ctx context.Context, folderId FolderIdInPath) (*GetClipFolderResponse, error) {
	rsp, err := c.GetClipFolder(ctx, folderId)
	if err != nil {
		return nil, err
	}
	return ParseGetClipFolderResponse(rsp)
}

// EditClipFolderWithBodyWithResponse request with arbitrary body returning *EditClipFolderResponse
func (c *ClientWithResponses) EditClipFolderWithBodyWithResponse(ctx context.Context, folderId FolderIdInPath, contentType string, body io.Reader) (*EditClipFolderResponse, error) {
	rsp, err := c.EditClipFolderWithBody(ctx, folderId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditClipFolderResponse(rsp)
}

func (c *ClientWithResponses) EditClipFolderWithResponse(ctx context.Context, folderId FolderIdInPath, body EditClipFolderJSONRequestBody) (*EditClipFolderResponse, error) {
	rsp, err := c.EditClipFolder(ctx, folderId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditClipFolderResponse(rsp)
}

// GetClipsWithResponse request returning *GetClipsResponse
func (c *ClientWithResponses) GetClipsWithResponse(ctx context.Context, folderId FolderIdInPath, params *GetClipsParams) (*GetClipsResponse, error) {
	rsp, err := c.GetClips(ctx, folderId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClipsResponse(rsp)
}

// ClipMessageWithBodyWithResponse request with arbitrary body returning *ClipMessageResponse
func (c *ClientWithResponses) ClipMessageWithBodyWithResponse(ctx context.Context, folderId FolderIdInPath, contentType string, body io.Reader) (*ClipMessageResponse, error) {
	rsp, err := c.ClipMessageWithBody(ctx, folderId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseClipMessageResponse(rsp)
}

func (c *ClientWithResponses) ClipMessageWithResponse(ctx context.Context, folderId FolderIdInPath, body ClipMessageJSONRequestBody) (*ClipMessageResponse, error) {
	rsp, err := c.ClipMessage(ctx, folderId, body)
	if err != nil {
		return nil, err
	}
	return ParseClipMessageResponse(rsp)
}

// UnclipMessageWithResponse request returning *UnclipMessageResponse
func (c *ClientWithResponses) UnclipMessageWithResponse(ctx context.Context, folderId FolderIdInPath, messageId MessageIdInPath) (*UnclipMessageResponse, error) {
	rsp, err := c.UnclipMessage(ctx, folderId, messageId)
	if err != nil {
		return nil, err
	}
	return ParseUnclipMessageResponse(rsp)
}

// GetFilesWithResponse request returning *GetFilesResponse
func (c *ClientWithResponses) GetFilesWithResponse(ctx context.Context, params *GetFilesParams) (*GetFilesResponse, error) {
	rsp, err := c.GetFiles(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetFilesResponse(rsp)
}

// PostFileWithBodyWithResponse request with arbitrary body returning *PostFileResponse
func (c *ClientWithResponses) PostFileWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostFileResponse, error) {
	rsp, err := c.PostFileWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostFileResponse(rsp)
}

// DeleteFileWithResponse request returning *DeleteFileResponse
func (c *ClientWithResponses) DeleteFileWithResponse(ctx context.Context, fileId FileIdInPath) (*DeleteFileResponse, error) {
	rsp, err := c.DeleteFile(ctx, fileId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFileResponse(rsp)
}

// GetFileWithResponse request returning *GetFileResponse
func (c *ClientWithResponses) GetFileWithResponse(ctx context.Context, fileId FileIdInPath, params *GetFileParams) (*GetFileResponse, error) {
	rsp, err := c.GetFile(ctx, fileId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetFileResponse(rsp)
}

// GetFileMetaWithResponse request returning *GetFileMetaResponse
func (c *ClientWithResponses) GetFileMetaWithResponse(ctx context.Context, fileId FileIdInPath) (*GetFileMetaResponse, error) {
	rsp, err := c.GetFileMeta(ctx, fileId)
	if err != nil {
		return nil, err
	}
	return ParseGetFileMetaResponse(rsp)
}

// GetThumbnailImageWithResponse request returning *GetThumbnailImageResponse
func (c *ClientWithResponses) GetThumbnailImageWithResponse(ctx context.Context, fileId FileIdInPath) (*GetThumbnailImageResponse, error) {
	rsp, err := c.GetThumbnailImage(ctx, fileId)
	if err != nil {
		return nil, err
	}
	return ParseGetThumbnailImageResponse(rsp)
}

// GetUserGroupsWithResponse request returning *GetUserGroupsResponse
func (c *ClientWithResponses) GetUserGroupsWithResponse(ctx context.Context) (*GetUserGroupsResponse, error) {
	rsp, err := c.GetUserGroups(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupsResponse(rsp)
}

// CreateUserGroupWithBodyWithResponse request with arbitrary body returning *CreateUserGroupResponse
func (c *ClientWithResponses) CreateUserGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateUserGroupResponse, error) {
	rsp, err := c.CreateUserGroupWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateUserGroupWithResponse(ctx context.Context, body CreateUserGroupJSONRequestBody) (*CreateUserGroupResponse, error) {
	rsp, err := c.CreateUserGroup(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserGroupResponse(rsp)
}

// DeleteUserGroupWithResponse request returning *DeleteUserGroupResponse
func (c *ClientWithResponses) DeleteUserGroupWithResponse(ctx context.Context, groupId GroupIdInPath) (*DeleteUserGroupResponse, error) {
	rsp, err := c.DeleteUserGroup(ctx, groupId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserGroupResponse(rsp)
}

// GetUserGroupWithResponse request returning *GetUserGroupResponse
func (c *ClientWithResponses) GetUserGroupWithResponse(ctx context.Context, groupId GroupIdInPath) (*GetUserGroupResponse, error) {
	rsp, err := c.GetUserGroup(ctx, groupId)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupResponse(rsp)
}

// EditUserGroupWithBodyWithResponse request with arbitrary body returning *EditUserGroupResponse
func (c *ClientWithResponses) EditUserGroupWithBodyWithResponse(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*EditUserGroupResponse, error) {
	rsp, err := c.EditUserGroupWithBody(ctx, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditUserGroupResponse(rsp)
}

func (c *ClientWithResponses) EditUserGroupWithResponse(ctx context.Context, groupId GroupIdInPath, body EditUserGroupJSONRequestBody) (*EditUserGroupResponse, error) {
	rsp, err := c.EditUserGroup(ctx, groupId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditUserGroupResponse(rsp)
}

// GetUserGroupAdminsWithResponse request returning *GetUserGroupAdminsResponse
func (c *ClientWithResponses) GetUserGroupAdminsWithResponse(ctx context.Context, groupId GroupIdInPath) (*GetUserGroupAdminsResponse, error) {
	rsp, err := c.GetUserGroupAdmins(ctx, groupId)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupAdminsResponse(rsp)
}

// AddUserGroupAdminWithBodyWithResponse request with arbitrary body returning *AddUserGroupAdminResponse
func (c *ClientWithResponses) AddUserGroupAdminWithBodyWithResponse(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*AddUserGroupAdminResponse, error) {
	rsp, err := c.AddUserGroupAdminWithBody(ctx, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddUserGroupAdminResponse(rsp)
}

func (c *ClientWithResponses) AddUserGroupAdminWithResponse(ctx context.Context, groupId GroupIdInPath, body AddUserGroupAdminJSONRequestBody) (*AddUserGroupAdminResponse, error) {
	rsp, err := c.AddUserGroupAdmin(ctx, groupId, body)
	if err != nil {
		return nil, err
	}
	return ParseAddUserGroupAdminResponse(rsp)
}

// RemoveUserGroupAdminWithResponse request returning *RemoveUserGroupAdminResponse
func (c *ClientWithResponses) RemoveUserGroupAdminWithResponse(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath) (*RemoveUserGroupAdminResponse, error) {
	rsp, err := c.RemoveUserGroupAdmin(ctx, groupId, userId)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserGroupAdminResponse(rsp)
}

// GetUserGroupMembersWithResponse request returning *GetUserGroupMembersResponse
func (c *ClientWithResponses) GetUserGroupMembersWithResponse(ctx context.Context, groupId GroupIdInPath) (*GetUserGroupMembersResponse, error) {
	rsp, err := c.GetUserGroupMembers(ctx, groupId)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupMembersResponse(rsp)
}

// AddUserGroupMemberWithBodyWithResponse request with arbitrary body returning *AddUserGroupMemberResponse
func (c *ClientWithResponses) AddUserGroupMemberWithBodyWithResponse(ctx context.Context, groupId GroupIdInPath, contentType string, body io.Reader) (*AddUserGroupMemberResponse, error) {
	rsp, err := c.AddUserGroupMemberWithBody(ctx, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddUserGroupMemberResponse(rsp)
}

func (c *ClientWithResponses) AddUserGroupMemberWithResponse(ctx context.Context, groupId GroupIdInPath, body AddUserGroupMemberJSONRequestBody) (*AddUserGroupMemberResponse, error) {
	rsp, err := c.AddUserGroupMember(ctx, groupId, body)
	if err != nil {
		return nil, err
	}
	return ParseAddUserGroupMemberResponse(rsp)
}

// RemoveUserGroupMemberWithResponse request returning *RemoveUserGroupMemberResponse
func (c *ClientWithResponses) RemoveUserGroupMemberWithResponse(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath) (*RemoveUserGroupMemberResponse, error) {
	rsp, err := c.RemoveUserGroupMember(ctx, groupId, userId)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserGroupMemberResponse(rsp)
}

// EditUserGroupMemberWithBodyWithResponse request with arbitrary body returning *EditUserGroupMemberResponse
func (c *ClientWithResponses) EditUserGroupMemberWithBodyWithResponse(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath, contentType string, body io.Reader) (*EditUserGroupMemberResponse, error) {
	rsp, err := c.EditUserGroupMemberWithBody(ctx, groupId, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditUserGroupMemberResponse(rsp)
}

func (c *ClientWithResponses) EditUserGroupMemberWithResponse(ctx context.Context, groupId GroupIdInPath, userId UserIdInPath, body EditUserGroupMemberJSONRequestBody) (*EditUserGroupMemberResponse, error) {
	rsp, err := c.EditUserGroupMember(ctx, groupId, userId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditUserGroupMemberResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, params *LoginParams, contentType string, body io.Reader) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, params *LoginParams, body LoginJSONRequestBody) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, params *LogoutParams) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// DeleteMessageWithResponse request returning *DeleteMessageResponse
func (c *ClientWithResponses) DeleteMessageWithResponse(ctx context.Context, messageId MessageIdInPath) (*DeleteMessageResponse, error) {
	rsp, err := c.DeleteMessage(ctx, messageId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageResponse(rsp)
}

// GetMessageWithResponse request returning *GetMessageResponse
func (c *ClientWithResponses) GetMessageWithResponse(ctx context.Context, messageId MessageIdInPath) (*GetMessageResponse, error) {
	rsp, err := c.GetMessage(ctx, messageId)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageResponse(rsp)
}

// EditMessageWithBodyWithResponse request with arbitrary body returning *EditMessageResponse
func (c *ClientWithResponses) EditMessageWithBodyWithResponse(ctx context.Context, messageId MessageIdInPath, contentType string, body io.Reader) (*EditMessageResponse, error) {
	rsp, err := c.EditMessageWithBody(ctx, messageId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditMessageResponse(rsp)
}

func (c *ClientWithResponses) EditMessageWithResponse(ctx context.Context, messageId MessageIdInPath, body EditMessageJSONRequestBody) (*EditMessageResponse, error) {
	rsp, err := c.EditMessage(ctx, messageId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditMessageResponse(rsp)
}

// GetMessageClipsWithResponse request returning *GetMessageClipsResponse
func (c *ClientWithResponses) GetMessageClipsWithResponse(ctx context.Context, messageId MessageIdInPath) (*GetMessageClipsResponse, error) {
	rsp, err := c.GetMessageClips(ctx, messageId)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageClipsResponse(rsp)
}

// RemovePinWithResponse request returning *RemovePinResponse
func (c *ClientWithResponses) RemovePinWithResponse(ctx context.Context, messageId MessageIdInPath) (*RemovePinResponse, error) {
	rsp, err := c.RemovePin(ctx, messageId)
	if err != nil {
		return nil, err
	}
	return ParseRemovePinResponse(rsp)
}

// GetPinWithResponse request returning *GetPinResponse
func (c *ClientWithResponses) GetPinWithResponse(ctx context.Context, messageId MessageIdInPath) (*GetPinResponse, error) {
	rsp, err := c.GetPin(ctx, messageId)
	if err != nil {
		return nil, err
	}
	return ParseGetPinResponse(rsp)
}

// CreatePinWithResponse request returning *CreatePinResponse
func (c *ClientWithResponses) CreatePinWithResponse(ctx context.Context, messageId MessageIdInPath) (*CreatePinResponse, error) {
	rsp, err := c.CreatePin(ctx, messageId)
	if err != nil {
		return nil, err
	}
	return ParseCreatePinResponse(rsp)
}

// GetMessageStampsWithResponse request returning *GetMessageStampsResponse
func (c *ClientWithResponses) GetMessageStampsWithResponse(ctx context.Context, messageId MessageIdInPath) (*GetMessageStampsResponse, error) {
	rsp, err := c.GetMessageStamps(ctx, messageId)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageStampsResponse(rsp)
}

// RemoveMessageStampWithResponse request returning *RemoveMessageStampResponse
func (c *ClientWithResponses) RemoveMessageStampWithResponse(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath) (*RemoveMessageStampResponse, error) {
	rsp, err := c.RemoveMessageStamp(ctx, messageId, stampId)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMessageStampResponse(rsp)
}

// AddMessageStampWithBodyWithResponse request with arbitrary body returning *AddMessageStampResponse
func (c *ClientWithResponses) AddMessageStampWithBodyWithResponse(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath, contentType string, body io.Reader) (*AddMessageStampResponse, error) {
	rsp, err := c.AddMessageStampWithBody(ctx, messageId, stampId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddMessageStampResponse(rsp)
}

func (c *ClientWithResponses) AddMessageStampWithResponse(ctx context.Context, messageId MessageIdInPath, stampId StampIdInPath, body AddMessageStampJSONRequestBody) (*AddMessageStampResponse, error) {
	rsp, err := c.AddMessageStamp(ctx, messageId, stampId, body)
	if err != nil {
		return nil, err
	}
	return ParseAddMessageStampResponse(rsp)
}

// GetOAuth2AuthorizeWithResponse request returning *GetOAuth2AuthorizeResponse
func (c *ClientWithResponses) GetOAuth2AuthorizeWithResponse(ctx context.Context, params *GetOAuth2AuthorizeParams) (*GetOAuth2AuthorizeResponse, error) {
	rsp, err := c.GetOAuth2Authorize(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOAuth2AuthorizeResponse(rsp)
}

// PostOAuth2AuthorizeWithBodyWithResponse request with arbitrary body returning *PostOAuth2AuthorizeResponse
func (c *ClientWithResponses) PostOAuth2AuthorizeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostOAuth2AuthorizeResponse, error) {
	rsp, err := c.PostOAuth2AuthorizeWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2AuthorizeResponse(rsp)
}

// PostOAuth2AuthorizeDecideWithBodyWithResponse request with arbitrary body returning *PostOAuth2AuthorizeDecideResponse
func (c *ClientWithResponses) PostOAuth2AuthorizeDecideWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostOAuth2AuthorizeDecideResponse, error) {
	rsp, err := c.PostOAuth2AuthorizeDecideWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2AuthorizeDecideResponse(rsp)
}

// RevokeOAuth2TokenWithBodyWithResponse request with arbitrary body returning *RevokeOAuth2TokenResponse
func (c *ClientWithResponses) RevokeOAuth2TokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RevokeOAuth2TokenResponse, error) {
	rsp, err := c.RevokeOAuth2TokenWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRevokeOAuth2TokenResponse(rsp)
}

func (c *ClientWithResponses) RevokeOAuth2TokenWithResponse(ctx context.Context, body RevokeOAuth2TokenJSONRequestBody) (*RevokeOAuth2TokenResponse, error) {
	rsp, err := c.RevokeOAuth2Token(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseRevokeOAuth2TokenResponse(rsp)
}

// PostOAuth2TokenWithBodyWithResponse request with arbitrary body returning *PostOAuth2TokenResponse
func (c *ClientWithResponses) PostOAuth2TokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostOAuth2TokenResponse, error) {
	rsp, err := c.PostOAuth2TokenWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostOAuth2TokenResponse(rsp)
}

// GetOgpWithResponse request returning *GetOgpResponse
func (c *ClientWithResponses) GetOgpWithResponse(ctx context.Context, params *GetOgpParams) (*GetOgpResponse, error) {
	rsp, err := c.GetOgp(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetOgpResponse(rsp)
}

// GetPublicUserIconWithResponse request returning *GetPublicUserIconResponse
func (c *ClientWithResponses) GetPublicUserIconWithResponse(ctx context.Context, username string) (*GetPublicUserIconResponse, error) {
	rsp, err := c.GetPublicUserIcon(ctx, username)
	if err != nil {
		return nil, err
	}
	return ParseGetPublicUserIconResponse(rsp)
}

// GetStampPalettesWithResponse request returning *GetStampPalettesResponse
func (c *ClientWithResponses) GetStampPalettesWithResponse(ctx context.Context) (*GetStampPalettesResponse, error) {
	rsp, err := c.GetStampPalettes(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetStampPalettesResponse(rsp)
}

// CreateStampPaletteWithBodyWithResponse request with arbitrary body returning *CreateStampPaletteResponse
func (c *ClientWithResponses) CreateStampPaletteWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateStampPaletteResponse, error) {
	rsp, err := c.CreateStampPaletteWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateStampPaletteResponse(rsp)
}

func (c *ClientWithResponses) CreateStampPaletteWithResponse(ctx context.Context, body CreateStampPaletteJSONRequestBody) (*CreateStampPaletteResponse, error) {
	rsp, err := c.CreateStampPalette(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateStampPaletteResponse(rsp)
}

// DeleteStampPaletteWithResponse request returning *DeleteStampPaletteResponse
func (c *ClientWithResponses) DeleteStampPaletteWithResponse(ctx context.Context, paletteId PaletteIdInPath) (*DeleteStampPaletteResponse, error) {
	rsp, err := c.DeleteStampPalette(ctx, paletteId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStampPaletteResponse(rsp)
}

// GetStampPaletteWithResponse request returning *GetStampPaletteResponse
func (c *ClientWithResponses) GetStampPaletteWithResponse(ctx context.Context, paletteId PaletteIdInPath) (*GetStampPaletteResponse, error) {
	rsp, err := c.GetStampPalette(ctx, paletteId)
	if err != nil {
		return nil, err
	}
	return ParseGetStampPaletteResponse(rsp)
}

// EditStampPaletteWithBodyWithResponse request with arbitrary body returning *EditStampPaletteResponse
func (c *ClientWithResponses) EditStampPaletteWithBodyWithResponse(ctx context.Context, paletteId PaletteIdInPath, contentType string, body io.Reader) (*EditStampPaletteResponse, error) {
	rsp, err := c.EditStampPaletteWithBody(ctx, paletteId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditStampPaletteResponse(rsp)
}

func (c *ClientWithResponses) EditStampPaletteWithResponse(ctx context.Context, paletteId PaletteIdInPath, body EditStampPaletteJSONRequestBody) (*EditStampPaletteResponse, error) {
	rsp, err := c.EditStampPalette(ctx, paletteId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditStampPaletteResponse(rsp)
}

// GetStampsWithResponse request returning *GetStampsResponse
func (c *ClientWithResponses) GetStampsWithResponse(ctx context.Context, params *GetStampsParams) (*GetStampsResponse, error) {
	rsp, err := c.GetStamps(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetStampsResponse(rsp)
}

// CreateStampWithBodyWithResponse request with arbitrary body returning *CreateStampResponse
func (c *ClientWithResponses) CreateStampWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateStampResponse, error) {
	rsp, err := c.CreateStampWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateStampResponse(rsp)
}

// DeleteStampWithResponse request returning *DeleteStampResponse
func (c *ClientWithResponses) DeleteStampWithResponse(ctx context.Context, stampId StampIdInPath) (*DeleteStampResponse, error) {
	rsp, err := c.DeleteStamp(ctx, stampId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteStampResponse(rsp)
}

// GetStampWithResponse request returning *GetStampResponse
func (c *ClientWithResponses) GetStampWithResponse(ctx context.Context, stampId StampIdInPath) (*GetStampResponse, error) {
	rsp, err := c.GetStamp(ctx, stampId)
	if err != nil {
		return nil, err
	}
	return ParseGetStampResponse(rsp)
}

// EditStampWithBodyWithResponse request with arbitrary body returning *EditStampResponse
func (c *ClientWithResponses) EditStampWithBodyWithResponse(ctx context.Context, stampId StampIdInPath, contentType string, body io.Reader) (*EditStampResponse, error) {
	rsp, err := c.EditStampWithBody(ctx, stampId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditStampResponse(rsp)
}

func (c *ClientWithResponses) EditStampWithResponse(ctx context.Context, stampId StampIdInPath, body EditStampJSONRequestBody) (*EditStampResponse, error) {
	rsp, err := c.EditStamp(ctx, stampId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditStampResponse(rsp)
}

// GetStampImageWithResponse request returning *GetStampImageResponse
func (c *ClientWithResponses) GetStampImageWithResponse(ctx context.Context, stampId StampIdInPath) (*GetStampImageResponse, error) {
	rsp, err := c.GetStampImage(ctx, stampId)
	if err != nil {
		return nil, err
	}
	return ParseGetStampImageResponse(rsp)
}

// ChangeStampImageWithBodyWithResponse request with arbitrary body returning *ChangeStampImageResponse
func (c *ClientWithResponses) ChangeStampImageWithBodyWithResponse(ctx context.Context, stampId StampIdInPath, contentType string, body io.Reader) (*ChangeStampImageResponse, error) {
	rsp, err := c.ChangeStampImageWithBody(ctx, stampId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeStampImageResponse(rsp)
}

// GetTagWithResponse request returning *GetTagResponse
func (c *ClientWithResponses) GetTagWithResponse(ctx context.Context, tagId TagIdInPath) (*GetTagResponse, error) {
	rsp, err := c.GetTag(ctx, tagId)
	if err != nil {
		return nil, err
	}
	return ParseGetTagResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// EditMeWithBodyWithResponse request with arbitrary body returning *EditMeResponse
func (c *ClientWithResponses) EditMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*EditMeResponse, error) {
	rsp, err := c.EditMeWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditMeResponse(rsp)
}

func (c *ClientWithResponses) EditMeWithResponse(ctx context.Context, body EditMeJSONRequestBody) (*EditMeResponse, error) {
	rsp, err := c.EditMe(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseEditMeResponse(rsp)
}

// GetMyExternalAccountsWithResponse request returning *GetMyExternalAccountsResponse
func (c *ClientWithResponses) GetMyExternalAccountsWithResponse(ctx context.Context) (*GetMyExternalAccountsResponse, error) {
	rsp, err := c.GetMyExternalAccounts(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMyExternalAccountsResponse(rsp)
}

// LinkExternalAccountWithBodyWithResponse request with arbitrary body returning *LinkExternalAccountResponse
func (c *ClientWithResponses) LinkExternalAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*LinkExternalAccountResponse, error) {
	rsp, err := c.LinkExternalAccountWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseLinkExternalAccountResponse(rsp)
}

func (c *ClientWithResponses) LinkExternalAccountWithResponse(ctx context.Context, body LinkExternalAccountJSONRequestBody) (*LinkExternalAccountResponse, error) {
	rsp, err := c.LinkExternalAccount(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseLinkExternalAccountResponse(rsp)
}

// UnlinkExternalAccountWithBodyWithResponse request with arbitrary body returning *UnlinkExternalAccountResponse
func (c *ClientWithResponses) UnlinkExternalAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*UnlinkExternalAccountResponse, error) {
	rsp, err := c.UnlinkExternalAccountWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseUnlinkExternalAccountResponse(rsp)
}

func (c *ClientWithResponses) UnlinkExternalAccountWithResponse(ctx context.Context, body UnlinkExternalAccountJSONRequestBody) (*UnlinkExternalAccountResponse, error) {
	rsp, err := c.UnlinkExternalAccount(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseUnlinkExternalAccountResponse(rsp)
}

// RegisterFCMDeviceWithBodyWithResponse request with arbitrary body returning *RegisterFCMDeviceResponse
func (c *ClientWithResponses) RegisterFCMDeviceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*RegisterFCMDeviceResponse, error) {
	rsp, err := c.RegisterFCMDeviceWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterFCMDeviceResponse(rsp)
}

func (c *ClientWithResponses) RegisterFCMDeviceWithResponse(ctx context.Context, body RegisterFCMDeviceJSONRequestBody) (*RegisterFCMDeviceResponse, error) {
	rsp, err := c.RegisterFCMDevice(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseRegisterFCMDeviceResponse(rsp)
}

// GetMyIconWithResponse request returning *GetMyIconResponse
func (c *ClientWithResponses) GetMyIconWithResponse(ctx context.Context) (*GetMyIconResponse, error) {
	rsp, err := c.GetMyIcon(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMyIconResponse(rsp)
}

// ChangeMyIconWithBodyWithResponse request with arbitrary body returning *ChangeMyIconResponse
func (c *ClientWithResponses) ChangeMyIconWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ChangeMyIconResponse, error) {
	rsp, err := c.ChangeMyIconWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeMyIconResponse(rsp)
}

// ChangeMyPasswordWithBodyWithResponse request with arbitrary body returning *ChangeMyPasswordResponse
func (c *ClientWithResponses) ChangeMyPasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*ChangeMyPasswordResponse, error) {
	rsp, err := c.ChangeMyPasswordWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeMyPasswordResponse(rsp)
}

func (c *ClientWithResponses) ChangeMyPasswordWithResponse(ctx context.Context, body ChangeMyPasswordJSONRequestBody) (*ChangeMyPasswordResponse, error) {
	rsp, err := c.ChangeMyPassword(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeMyPasswordResponse(rsp)
}

// GetMyQRCodeWithResponse request returning *GetMyQRCodeResponse
func (c *ClientWithResponses) GetMyQRCodeWithResponse(ctx context.Context, params *GetMyQRCodeParams) (*GetMyQRCodeResponse, error) {
	rsp, err := c.GetMyQRCode(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMyQRCodeResponse(rsp)
}

// GetMySessionsWithResponse request returning *GetMySessionsResponse
func (c *ClientWithResponses) GetMySessionsWithResponse(ctx context.Context) (*GetMySessionsResponse, error) {
	rsp, err := c.GetMySessions(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMySessionsResponse(rsp)
}

// RevokeMySessionWithResponse request returning *RevokeMySessionResponse
func (c *ClientWithResponses) RevokeMySessionWithResponse(ctx context.Context, sessionId SessionIdInPath) (*RevokeMySessionResponse, error) {
	rsp, err := c.RevokeMySession(ctx, sessionId)
	if err != nil {
		return nil, err
	}
	return ParseRevokeMySessionResponse(rsp)
}

// GetMyStampHistoryWithResponse request returning *GetMyStampHistoryResponse
func (c *ClientWithResponses) GetMyStampHistoryWithResponse(ctx context.Context, params *GetMyStampHistoryParams) (*GetMyStampHistoryResponse, error) {
	rsp, err := c.GetMyStampHistory(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetMyStampHistoryResponse(rsp)
}

// GetMyStarsWithResponse request returning *GetMyStarsResponse
func (c *ClientWithResponses) GetMyStarsWithResponse(ctx context.Context) (*GetMyStarsResponse, error) {
	rsp, err := c.GetMyStars(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMyStarsResponse(rsp)
}

// AddMyStarWithBodyWithResponse request with arbitrary body returning *AddMyStarResponse
func (c *ClientWithResponses) AddMyStarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AddMyStarResponse, error) {
	rsp, err := c.AddMyStarWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddMyStarResponse(rsp)
}

func (c *ClientWithResponses) AddMyStarWithResponse(ctx context.Context, body AddMyStarJSONRequestBody) (*AddMyStarResponse, error) {
	rsp, err := c.AddMyStar(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAddMyStarResponse(rsp)
}

// RemoveMyStarWithResponse request returning *RemoveMyStarResponse
func (c *ClientWithResponses) RemoveMyStarWithResponse(ctx context.Context, channelId ChannelIdInPath) (*RemoveMyStarResponse, error) {
	rsp, err := c.RemoveMyStar(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMyStarResponse(rsp)
}

// GetMyChannelSubscriptionsWithResponse request returning *GetMyChannelSubscriptionsResponse
func (c *ClientWithResponses) GetMyChannelSubscriptionsWithResponse(ctx context.Context) (*GetMyChannelSubscriptionsResponse, error) {
	rsp, err := c.GetMyChannelSubscriptions(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMyChannelSubscriptionsResponse(rsp)
}

// SetChannelSubscribeLevelWithBodyWithResponse request with arbitrary body returning *SetChannelSubscribeLevelResponse
func (c *ClientWithResponses) SetChannelSubscribeLevelWithBodyWithResponse(ctx context.Context, channelId ChannelIdInPath, contentType string, body io.Reader) (*SetChannelSubscribeLevelResponse, error) {
	rsp, err := c.SetChannelSubscribeLevelWithBody(ctx, channelId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseSetChannelSubscribeLevelResponse(rsp)
}

func (c *ClientWithResponses) SetChannelSubscribeLevelWithResponse(ctx context.Context, channelId ChannelIdInPath, body SetChannelSubscribeLevelJSONRequestBody) (*SetChannelSubscribeLevelResponse, error) {
	rsp, err := c.SetChannelSubscribeLevel(ctx, channelId, body)
	if err != nil {
		return nil, err
	}
	return ParseSetChannelSubscribeLevelResponse(rsp)
}

// GetMyUserTagsWithResponse request returning *GetMyUserTagsResponse
func (c *ClientWithResponses) GetMyUserTagsWithResponse(ctx context.Context) (*GetMyUserTagsResponse, error) {
	rsp, err := c.GetMyUserTags(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMyUserTagsResponse(rsp)
}

// AddMyUserTagWithBodyWithResponse request with arbitrary body returning *AddMyUserTagResponse
func (c *ClientWithResponses) AddMyUserTagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*AddMyUserTagResponse, error) {
	rsp, err := c.AddMyUserTagWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddMyUserTagResponse(rsp)
}

func (c *ClientWithResponses) AddMyUserTagWithResponse(ctx context.Context, body AddMyUserTagJSONRequestBody) (*AddMyUserTagResponse, error) {
	rsp, err := c.AddMyUserTag(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseAddMyUserTagResponse(rsp)
}

// RemoveMyUserTagWithResponse request returning *RemoveMyUserTagResponse
func (c *ClientWithResponses) RemoveMyUserTagWithResponse(ctx context.Context, tagId TagIdInPath) (*RemoveMyUserTagResponse, error) {
	rsp, err := c.RemoveMyUserTag(ctx, tagId)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMyUserTagResponse(rsp)
}

// EditMyUserTagWithBodyWithResponse request with arbitrary body returning *EditMyUserTagResponse
func (c *ClientWithResponses) EditMyUserTagWithBodyWithResponse(ctx context.Context, tagId TagIdInPath, contentType string, body io.Reader) (*EditMyUserTagResponse, error) {
	rsp, err := c.EditMyUserTagWithBody(ctx, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditMyUserTagResponse(rsp)
}

func (c *ClientWithResponses) EditMyUserTagWithResponse(ctx context.Context, tagId TagIdInPath, body EditMyUserTagJSONRequestBody) (*EditMyUserTagResponse, error) {
	rsp, err := c.EditMyUserTag(ctx, tagId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditMyUserTagResponse(rsp)
}

// GetMyTokensWithResponse request returning *GetMyTokensResponse
func (c *ClientWithResponses) GetMyTokensWithResponse(ctx context.Context) (*GetMyTokensResponse, error) {
	rsp, err := c.GetMyTokens(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMyTokensResponse(rsp)
}

// RevokeMyTokenWithResponse request returning *RevokeMyTokenResponse
func (c *ClientWithResponses) RevokeMyTokenWithResponse(ctx context.Context, tokenId TokenIdInPath) (*RevokeMyTokenResponse, error) {
	rsp, err := c.RevokeMyToken(ctx, tokenId)
	if err != nil {
		return nil, err
	}
	return ParseRevokeMyTokenResponse(rsp)
}

// GetMyUnreadChannelsWithResponse request returning *GetMyUnreadChannelsResponse
func (c *ClientWithResponses) GetMyUnreadChannelsWithResponse(ctx context.Context) (*GetMyUnreadChannelsResponse, error) {
	rsp, err := c.GetMyUnreadChannels(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetMyUnreadChannelsResponse(rsp)
}

// ReadChannelWithResponse request returning *ReadChannelResponse
func (c *ClientWithResponses) ReadChannelWithResponse(ctx context.Context, channelId ChannelIdInPath) (*ReadChannelResponse, error) {
	rsp, err := c.ReadChannel(ctx, channelId)
	if err != nil {
		return nil, err
	}
	return ParseReadChannelResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId UserIdInPath) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// EditUserWithBodyWithResponse request with arbitrary body returning *EditUserResponse
func (c *ClientWithResponses) EditUserWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*EditUserResponse, error) {
	rsp, err := c.EditUserWithBody(ctx, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

func (c *ClientWithResponses) EditUserWithResponse(ctx context.Context, userId UserIdInPath, body EditUserJSONRequestBody) (*EditUserResponse, error) {
	rsp, err := c.EditUser(ctx, userId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

// GetUserDMChannelWithResponse request returning *GetUserDMChannelResponse
func (c *ClientWithResponses) GetUserDMChannelWithResponse(ctx context.Context, userId string) (*GetUserDMChannelResponse, error) {
	rsp, err := c.GetUserDMChannel(ctx, userId)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDMChannelResponse(rsp)
}

// GetUserIconWithResponse request returning *GetUserIconResponse
func (c *ClientWithResponses) GetUserIconWithResponse(ctx context.Context, userId UserIdInPath) (*GetUserIconResponse, error) {
	rsp, err := c.GetUserIcon(ctx, userId)
	if err != nil {
		return nil, err
	}
	return ParseGetUserIconResponse(rsp)
}

// ChangeUserIconWithBodyWithResponse request with arbitrary body returning *ChangeUserIconResponse
func (c *ClientWithResponses) ChangeUserIconWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*ChangeUserIconResponse, error) {
	rsp, err := c.ChangeUserIconWithBody(ctx, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeUserIconResponse(rsp)
}

// GetDirectMessagesWithResponse request returning *GetDirectMessagesResponse
func (c *ClientWithResponses) GetDirectMessagesWithResponse(ctx context.Context, userId UserIdInPath, params *GetDirectMessagesParams) (*GetDirectMessagesResponse, error) {
	rsp, err := c.GetDirectMessages(ctx, userId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetDirectMessagesResponse(rsp)
}

// PostDirectMessageWithBodyWithResponse request with arbitrary body returning *PostDirectMessageResponse
func (c *ClientWithResponses) PostDirectMessageWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*PostDirectMessageResponse, error) {
	rsp, err := c.PostDirectMessageWithBody(ctx, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectMessageResponse(rsp)
}

func (c *ClientWithResponses) PostDirectMessageWithResponse(ctx context.Context, userId UserIdInPath, body PostDirectMessageJSONRequestBody) (*PostDirectMessageResponse, error) {
	rsp, err := c.PostDirectMessage(ctx, userId, body)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectMessageResponse(rsp)
}

// ChangeUserPasswordWithBodyWithResponse request with arbitrary body returning *ChangeUserPasswordResponse
func (c *ClientWithResponses) ChangeUserPasswordWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*ChangeUserPasswordResponse, error) {
	rsp, err := c.ChangeUserPasswordWithBody(ctx, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeUserPasswordResponse(rsp)
}

func (c *ClientWithResponses) ChangeUserPasswordWithResponse(ctx context.Context, userId UserIdInPath, body ChangeUserPasswordJSONRequestBody) (*ChangeUserPasswordResponse, error) {
	rsp, err := c.ChangeUserPassword(ctx, userId, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeUserPasswordResponse(rsp)
}

// GetUserTagsWithResponse request returning *GetUserTagsResponse
func (c *ClientWithResponses) GetUserTagsWithResponse(ctx context.Context, userId UserIdInPath) (*GetUserTagsResponse, error) {
	rsp, err := c.GetUserTags(ctx, userId)
	if err != nil {
		return nil, err
	}
	return ParseGetUserTagsResponse(rsp)
}

// AddUserTagWithBodyWithResponse request with arbitrary body returning *AddUserTagResponse
func (c *ClientWithResponses) AddUserTagWithBodyWithResponse(ctx context.Context, userId UserIdInPath, contentType string, body io.Reader) (*AddUserTagResponse, error) {
	rsp, err := c.AddUserTagWithBody(ctx, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseAddUserTagResponse(rsp)
}

func (c *ClientWithResponses) AddUserTagWithResponse(ctx context.Context, userId UserIdInPath, body AddUserTagJSONRequestBody) (*AddUserTagResponse, error) {
	rsp, err := c.AddUserTag(ctx, userId, body)
	if err != nil {
		return nil, err
	}
	return ParseAddUserTagResponse(rsp)
}

// RemoveUserTagWithResponse request returning *RemoveUserTagResponse
func (c *ClientWithResponses) RemoveUserTagWithResponse(ctx context.Context, userId UserIdInPath, tagId TagIdInPath) (*RemoveUserTagResponse, error) {
	rsp, err := c.RemoveUserTag(ctx, userId, tagId)
	if err != nil {
		return nil, err
	}
	return ParseRemoveUserTagResponse(rsp)
}

// EditUserTagWithBodyWithResponse request with arbitrary body returning *EditUserTagResponse
func (c *ClientWithResponses) EditUserTagWithBodyWithResponse(ctx context.Context, userId UserIdInPath, tagId TagIdInPath, contentType string, body io.Reader) (*EditUserTagResponse, error) {
	rsp, err := c.EditUserTagWithBody(ctx, userId, tagId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditUserTagResponse(rsp)
}

func (c *ClientWithResponses) EditUserTagWithResponse(ctx context.Context, userId UserIdInPath, tagId TagIdInPath, body EditUserTagJSONRequestBody) (*EditUserTagResponse, error) {
	rsp, err := c.EditUserTag(ctx, userId, tagId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditUserTagResponse(rsp)
}

// GetServerVersionWithResponse request returning *GetServerVersionResponse
func (c *ClientWithResponses) GetServerVersionWithResponse(ctx context.Context) (*GetServerVersionResponse, error) {
	rsp, err := c.GetServerVersion(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetServerVersionResponse(rsp)
}

// GetWebhooksWithResponse request returning *GetWebhooksResponse
func (c *ClientWithResponses) GetWebhooksWithResponse(ctx context.Context, params *GetWebhooksParams) (*GetWebhooksResponse, error) {
	rsp, err := c.GetWebhooks(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhooksResponse(rsp)
}

// CreateWebhookWithBodyWithResponse request with arbitrary body returning *CreateWebhookResponse
func (c *ClientWithResponses) CreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhookWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhookWithResponse(ctx context.Context, body CreateWebhookJSONRequestBody) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhook(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

// DeleteWebhookWithResponse request returning *DeleteWebhookResponse
func (c *ClientWithResponses) DeleteWebhookWithResponse(ctx context.Context, webhookId WebhookIdInPath) (*DeleteWebhookResponse, error) {
	rsp, err := c.DeleteWebhook(ctx, webhookId)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWebhookResponse(rsp)
}

// GetWebhookWithResponse request returning *GetWebhookResponse
func (c *ClientWithResponses) GetWebhookWithResponse(ctx context.Context, webhookId WebhookIdInPath) (*GetWebhookResponse, error) {
	rsp, err := c.GetWebhook(ctx, webhookId)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookResponse(rsp)
}

// EditWebhookWithBodyWithResponse request with arbitrary body returning *EditWebhookResponse
func (c *ClientWithResponses) EditWebhookWithBodyWithResponse(ctx context.Context, webhookId WebhookIdInPath, contentType string, body io.Reader) (*EditWebhookResponse, error) {
	rsp, err := c.EditWebhookWithBody(ctx, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseEditWebhookResponse(rsp)
}

func (c *ClientWithResponses) EditWebhookWithResponse(ctx context.Context, webhookId WebhookIdInPath, body EditWebhookJSONRequestBody) (*EditWebhookResponse, error) {
	rsp, err := c.EditWebhook(ctx, webhookId, body)
	if err != nil {
		return nil, err
	}
	return ParseEditWebhookResponse(rsp)
}

// PostWebhookWithBodyWithResponse request with arbitrary body returning *PostWebhookResponse
func (c *ClientWithResponses) PostWebhookWithBodyWithResponse(ctx context.Context, webhookId WebhookIdInPath, params *PostWebhookParams, contentType string, body io.Reader) (*PostWebhookResponse, error) {
	rsp, err := c.PostWebhookWithBody(ctx, webhookId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostWebhookResponse(rsp)
}

// GetWebhookIconWithResponse request returning *GetWebhookIconResponse
func (c *ClientWithResponses) GetWebhookIconWithResponse(ctx context.Context, webhookId WebhookIdInPath) (*GetWebhookIconResponse, error) {
	rsp, err := c.GetWebhookIcon(ctx, webhookId)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookIconResponse(rsp)
}

// ChangeWebhookIconWithBodyWithResponse request with arbitrary body returning *ChangeWebhookIconResponse
func (c *ClientWithResponses) ChangeWebhookIconWithBodyWithResponse(ctx context.Context, webhookId WebhookIdInPath, contentType string, body io.Reader) (*ChangeWebhookIconResponse, error) {
	rsp, err := c.ChangeWebhookIconWithBody(ctx, webhookId, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParseChangeWebhookIconResponse(rsp)
}

// GetWebhookMessagesWithResponse request returning *GetWebhookMessagesResponse
func (c *ClientWithResponses) GetWebhookMessagesWithResponse(ctx context.Context, webhookId WebhookIdInPath, params *GetWebhookMessagesParams) (*GetWebhookMessagesResponse, error) {
	rsp, err := c.GetWebhookMessages(ctx, webhookId, params)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookMessagesResponse(rsp)
}

// PostWebRTCAuthenticateWithBodyWithResponse request with arbitrary body returning *PostWebRTCAuthenticateResponse
func (c *ClientWithResponses) PostWebRTCAuthenticateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader) (*PostWebRTCAuthenticateResponse, error) {
	rsp, err := c.PostWebRTCAuthenticateWithBody(ctx, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostWebRTCAuthenticateResponse(rsp)
}

func (c *ClientWithResponses) PostWebRTCAuthenticateWithResponse(ctx context.Context, body PostWebRTCAuthenticateJSONRequestBody) (*PostWebRTCAuthenticateResponse, error) {
	rsp, err := c.PostWebRTCAuthenticate(ctx, body)
	if err != nil {
		return nil, err
	}
	return ParsePostWebRTCAuthenticateResponse(rsp)
}

// GetWebRTCStateWithResponse request returning *GetWebRTCStateResponse
func (c *ClientWithResponses) GetWebRTCStateWithResponse(ctx context.Context) (*GetWebRTCStateResponse, error) {
	rsp, err := c.GetWebRTCState(ctx)
	if err != nil {
		return nil, err
	}
	return ParseGetWebRTCStateResponse(rsp)
}

// WsWithResponse request returning *WsResponse
func (c *ClientWithResponses) WsWithResponse(ctx context.Context) (*WsResponse, error) {
	rsp, err := c.Ws(ctx)
	if err != nil {
		return nil, err
	}
	return ParseWsResponse(rsp)
}

// ParseGetOnlineUsersResponse parses an HTTP response from a GetOnlineUsersWithResponse call
func ParseGetOnlineUsersResponse(rsp *http.Response) (*GetOnlineUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOnlineUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetActivityTimelineResponse parses an HTTP response from a GetActivityTimelineWithResponse call
func ParseGetActivityTimelineResponse(rsp *http.Response) (*GetActivityTimelineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetActivityTimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActivityTimelineMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBotsResponse parses an HTTP response from a GetBotsWithResponse call
func ParseGetBotsResponse(rsp *http.Response) (*GetBotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Bot
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBotResponse parses an HTTP response from a CreateBotWithResponse call
func ParseCreateBotResponse(rsp *http.Response) (*CreateBotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BotDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteBotResponse parses an HTTP response from a DeleteBotWithResponse call
func ParseDeleteBotResponse(rsp *http.Response) (*DeleteBotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBotResponse parses an HTTP response from a GetBotWithResponse call
func ParseGetBotResponse(rsp *http.Response) (*GetBotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditBotResponse parses an HTTP response from a EditBotWithResponse call
func ParseEditBotResponse(rsp *http.Response) (*EditBotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseActivateBotResponse parses an HTTP response from a ActivateBotWithResponse call
func ParseActivateBotResponse(rsp *http.Response) (*ActivateBotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ActivateBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseInactivateBotResponse parses an HTTP response from a InactivateBotWithResponse call
func ParseInactivateBotResponse(rsp *http.Response) (*InactivateBotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &InactivateBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseLetBotJoinChannelResponse parses an HTTP response from a LetBotJoinChannelWithResponse call
func ParseLetBotJoinChannelResponse(rsp *http.Response) (*LetBotJoinChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LetBotJoinChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseLetBotLeaveChannelResponse parses an HTTP response from a LetBotLeaveChannelWithResponse call
func ParseLetBotLeaveChannelResponse(rsp *http.Response) (*LetBotLeaveChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LetBotLeaveChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseReissueBotResponse parses an HTTP response from a ReissueBotWithResponse call
func ParseReissueBotResponse(rsp *http.Response) (*ReissueBotResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReissueBotResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BotTokens
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetBotIconResponse parses an HTTP response from a GetBotIconWithResponse call
func ParseGetBotIconResponse(rsp *http.Response) (*GetBotIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBotIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseChangeBotIconResponse parses an HTTP response from a ChangeBotIconWithResponse call
func ParseChangeBotIconResponse(rsp *http.Response) (*ChangeBotIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeBotIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetBotLogsResponse parses an HTTP response from a GetBotLogsWithResponse call
func ParseGetBotLogsResponse(rsp *http.Response) (*GetBotLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetBotLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BotEventLog
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelsResponse parses an HTTP response from a GetChannelsWithResponse call
func ParseGetChannelsResponse(rsp *http.Response) (*GetChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateChannelResponse parses an HTTP response from a CreateChannelWithResponse call
func ParseCreateChannelResponse(rsp *http.Response) (*CreateChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Channel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetChannelResponse parses an HTTP response from a GetChannelWithResponse call
func ParseGetChannelResponse(rsp *http.Response) (*GetChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Channel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditChannelResponse parses an HTTP response from a EditChannelWithResponse call
func ParseEditChannelResponse(rsp *http.Response) (*EditChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetChannelBotsResponse parses an HTTP response from a GetChannelBotsWithResponse call
func ParseGetChannelBotsResponse(rsp *http.Response) (*GetChannelBotsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelBotsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BotUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelEventsResponse parses an HTTP response from a GetChannelEventsWithResponse call
func ParseGetChannelEventsResponse(rsp *http.Response) (*GetChannelEventsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChannelEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessagesResponse parses an HTTP response from a GetMessagesWithResponse call
func ParseGetMessagesResponse(rsp *http.Response) (*GetMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMessageResponse parses an HTTP response from a PostMessageWithResponse call
func ParsePostMessageResponse(rsp *http.Response) (*PostMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetChannelPinsResponse parses an HTTP response from a GetChannelPinsWithResponse call
func ParseGetChannelPinsResponse(rsp *http.Response) (*GetChannelPinsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelPinsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Pin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelStatsResponse parses an HTTP response from a GetChannelStatsWithResponse call
func ParseGetChannelStatsResponse(rsp *http.Response) (*GetChannelStatsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelStats
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetChannelSubscribersResponse parses an HTTP response from a GetChannelSubscribersWithResponse call
func ParseGetChannelSubscribersResponse(rsp *http.Response) (*GetChannelSubscribersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelSubscribersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditChannelSubscribersResponse parses an HTTP response from a EditChannelSubscribersWithResponse call
func ParseEditChannelSubscribersResponse(rsp *http.Response) (*EditChannelSubscribersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditChannelSubscribersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseSetChannelSubscribersResponse parses an HTTP response from a SetChannelSubscribersWithResponse call
func ParseSetChannelSubscribersResponse(rsp *http.Response) (*SetChannelSubscribersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetChannelSubscribersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetChannelTopicResponse parses an HTTP response from a GetChannelTopicWithResponse call
func ParseGetChannelTopicResponse(rsp *http.Response) (*GetChannelTopicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelTopicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTopic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditChannelTopicResponse parses an HTTP response from a EditChannelTopicWithResponse call
func ParseEditChannelTopicResponse(rsp *http.Response) (*EditChannelTopicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditChannelTopicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetChannelViewersResponse parses an HTTP response from a GetChannelViewersWithResponse call
func ParseGetChannelViewersResponse(rsp *http.Response) (*GetChannelViewersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetChannelViewersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ChannelViewer
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetClientsResponse parses an HTTP response from a GetClientsWithResponse call
func ParseGetClientsResponse(rsp *http.Response) (*GetClientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OAuth2Client
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateClientResponse parses an HTTP response from a CreateClientWithResponse call
func ParseCreateClientResponse(rsp *http.Response) (*CreateClientResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OAuth2ClientDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteClientResponse parses an HTTP response from a DeleteClientWithResponse call
func ParseDeleteClientResponse(rsp *http.Response) (*DeleteClientResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClientResponse parses an HTTP response from a GetClientWithResponse call
func ParseGetClientResponse(rsp *http.Response) (*GetClientResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditClientResponse parses an HTTP response from a EditClientWithResponse call
func ParseEditClientResponse(rsp *http.Response) (*EditClientResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClipFoldersResponse parses an HTTP response from a GetClipFoldersWithResponse call
func ParseGetClipFoldersResponse(rsp *http.Response) (*GetClipFoldersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClipFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClipFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateClipFolderResponse parses an HTTP response from a CreateClipFolderWithResponse call
func ParseCreateClipFolderResponse(rsp *http.Response) (*CreateClipFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateClipFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ClipFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteClipFolderResponse parses an HTTP response from a DeleteClipFolderWithResponse call
func ParseDeleteClipFolderResponse(rsp *http.Response) (*DeleteClipFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClipFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClipFolderResponse parses an HTTP response from a GetClipFolderWithResponse call
func ParseGetClipFolderResponse(rsp *http.Response) (*GetClipFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClipFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClipFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditClipFolderResponse parses an HTTP response from a EditClipFolderWithResponse call
func ParseEditClipFolderResponse(rsp *http.Response) (*EditClipFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditClipFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClipsResponse parses an HTTP response from a GetClipsWithResponse call
func ParseGetClipsResponse(rsp *http.Response) (*GetClipsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClippedMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseClipMessageResponse parses an HTTP response from a ClipMessageWithResponse call
func ParseClipMessageResponse(rsp *http.Response) (*ClipMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ClipMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClippedMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUnclipMessageResponse parses an HTTP response from a UnclipMessageWithResponse call
func ParseUnclipMessageResponse(rsp *http.Response) (*UnclipMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnclipMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFilesResponse parses an HTTP response from a GetFilesWithResponse call
func ParseGetFilesResponse(rsp *http.Response) (*GetFilesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FileInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostFileResponse parses an HTTP response from a PostFileWithResponse call
func ParsePostFileResponse(rsp *http.Response) (*PostFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FileInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteFileResponse parses an HTTP response from a DeleteFileWithResponse call
func ParseDeleteFileResponse(rsp *http.Response) (*DeleteFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFileResponse parses an HTTP response from a GetFileWithResponse call
func ParseGetFileResponse(rsp *http.Response) (*GetFileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetFileMetaResponse parses an HTTP response from a GetFileMetaWithResponse call
func ParseGetFileMetaResponse(rsp *http.Response) (*GetFileMetaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetFileMetaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FileInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetThumbnailImageResponse parses an HTTP response from a GetThumbnailImageWithResponse call
func ParseGetThumbnailImageResponse(rsp *http.Response) (*GetThumbnailImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetThumbnailImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserGroupsResponse parses an HTTP response from a GetUserGroupsWithResponse call
func ParseGetUserGroupsResponse(rsp *http.Response) (*GetUserGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserGroupResponse parses an HTTP response from a CreateUserGroupWithResponse call
func ParseCreateUserGroupResponse(rsp *http.Response) (*CreateUserGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUserGroupResponse parses an HTTP response from a DeleteUserGroupWithResponse call
func ParseDeleteUserGroupResponse(rsp *http.Response) (*DeleteUserGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserGroupResponse parses an HTTP response from a GetUserGroupWithResponse call
func ParseGetUserGroupResponse(rsp *http.Response) (*GetUserGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditUserGroupResponse parses an HTTP response from a EditUserGroupWithResponse call
func ParseEditUserGroupResponse(rsp *http.Response) (*EditUserGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserGroupAdminsResponse parses an HTTP response from a GetUserGroupAdminsWithResponse call
func ParseGetUserGroupAdminsResponse(rsp *http.Response) (*GetUserGroupAdminsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupAdminsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUserGroupAdminResponse parses an HTTP response from a AddUserGroupAdminWithResponse call
func ParseAddUserGroupAdminResponse(rsp *http.Response) (*AddUserGroupAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddUserGroupAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseRemoveUserGroupAdminResponse parses an HTTP response from a RemoveUserGroupAdminWithResponse call
func ParseRemoveUserGroupAdminResponse(rsp *http.Response) (*RemoveUserGroupAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserGroupAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserGroupMembersResponse parses an HTTP response from a GetUserGroupMembersWithResponse call
func ParseGetUserGroupMembersResponse(rsp *http.Response) (*GetUserGroupMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserGroupMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUserGroupMemberResponse parses an HTTP response from a AddUserGroupMemberWithResponse call
func ParseAddUserGroupMemberResponse(rsp *http.Response) (*AddUserGroupMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddUserGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseRemoveUserGroupMemberResponse parses an HTTP response from a RemoveUserGroupMemberWithResponse call
func ParseRemoveUserGroupMemberResponse(rsp *http.Response) (*RemoveUserGroupMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseEditUserGroupMemberResponse parses an HTTP response from a EditUserGroupMemberWithResponse call
func ParseEditUserGroupMemberResponse(rsp *http.Response) (*EditUserGroupMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditUserGroupMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseDeleteMessageResponse parses an HTTP response from a DeleteMessageWithResponse call
func ParseDeleteMessageResponse(rsp *http.Response) (*DeleteMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMessageResponse parses an HTTP response from a GetMessageWithResponse call
func ParseGetMessageResponse(rsp *http.Response) (*GetMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditMessageResponse parses an HTTP response from a EditMessageWithResponse call
func ParseEditMessageResponse(rsp *http.Response) (*EditMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMessageClipsResponse parses an HTTP response from a GetMessageClipsWithResponse call
func ParseGetMessageClipsResponse(rsp *http.Response) (*GetMessageClipsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMessageClipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MessageClip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemovePinResponse parses an HTTP response from a RemovePinWithResponse call
func ParseRemovePinResponse(rsp *http.Response) (*RemovePinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemovePinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetPinResponse parses an HTTP response from a GetPinWithResponse call
func ParseGetPinResponse(rsp *http.Response) (*GetPinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessagePin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePinResponse parses an HTTP response from a CreatePinWithResponse call
func ParseCreatePinResponse(rsp *http.Response) (*CreatePinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreatePinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest MessagePin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMessageStampsResponse parses an HTTP response from a GetMessageStampsWithResponse call
func ParseGetMessageStampsResponse(rsp *http.Response) (*GetMessageStampsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMessageStampsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []MessageStamp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveMessageStampResponse parses an HTTP response from a RemoveMessageStampWithResponse call
func ParseRemoveMessageStampResponse(rsp *http.Response) (*RemoveMessageStampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveMessageStampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseAddMessageStampResponse parses an HTTP response from a AddMessageStampWithResponse call
func ParseAddMessageStampResponse(rsp *http.Response) (*AddMessageStampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddMessageStampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetOAuth2AuthorizeResponse parses an HTTP response from a GetOAuth2AuthorizeWithResponse call
func ParseGetOAuth2AuthorizeResponse(rsp *http.Response) (*GetOAuth2AuthorizeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOAuth2AuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOAuth2AuthorizeResponse parses an HTTP response from a PostOAuth2AuthorizeWithResponse call
func ParsePostOAuth2AuthorizeResponse(rsp *http.Response) (*PostOAuth2AuthorizeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2AuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOAuth2AuthorizeDecideResponse parses an HTTP response from a PostOAuth2AuthorizeDecideWithResponse call
func ParsePostOAuth2AuthorizeDecideResponse(rsp *http.Response) (*PostOAuth2AuthorizeDecideResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2AuthorizeDecideResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseRevokeOAuth2TokenResponse parses an HTTP response from a RevokeOAuth2TokenWithResponse call
func ParseRevokeOAuth2TokenResponse(rsp *http.Response) (*RevokeOAuth2TokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RevokeOAuth2TokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParsePostOAuth2TokenResponse parses an HTTP response from a PostOAuth2TokenWithResponse call
func ParsePostOAuth2TokenResponse(rsp *http.Response) (*PostOAuth2TokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostOAuth2TokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OAuth2Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOgpResponse parses an HTTP response from a GetOgpWithResponse call
func ParseGetOgpResponse(rsp *http.Response) (*GetOgpResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetOgpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ogp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPublicUserIconResponse parses an HTTP response from a GetPublicUserIconWithResponse call
func ParseGetPublicUserIconResponse(rsp *http.Response) (*GetPublicUserIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetPublicUserIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStampPalettesResponse parses an HTTP response from a GetStampPalettesWithResponse call
func ParseGetStampPalettesResponse(rsp *http.Response) (*GetStampPalettesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStampPalettesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StampPalette
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateStampPaletteResponse parses an HTTP response from a CreateStampPaletteWithResponse call
func ParseCreateStampPaletteResponse(rsp *http.Response) (*CreateStampPaletteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateStampPaletteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest StampPalette
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteStampPaletteResponse parses an HTTP response from a DeleteStampPaletteWithResponse call
func ParseDeleteStampPaletteResponse(rsp *http.Response) (*DeleteStampPaletteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStampPaletteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStampPaletteResponse parses an HTTP response from a GetStampPaletteWithResponse call
func ParseGetStampPaletteResponse(rsp *http.Response) (*GetStampPaletteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStampPaletteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StampPalette
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditStampPaletteResponse parses an HTTP response from a EditStampPaletteWithResponse call
func ParseEditStampPaletteResponse(rsp *http.Response) (*EditStampPaletteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditStampPaletteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStampsResponse parses an HTTP response from a GetStampsWithResponse call
func ParseGetStampsResponse(rsp *http.Response) (*GetStampsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStampsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Stamp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateStampResponse parses an HTTP response from a CreateStampWithResponse call
func ParseCreateStampResponse(rsp *http.Response) (*CreateStampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateStampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Stamp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteStampResponse parses an HTTP response from a DeleteStampWithResponse call
func ParseDeleteStampResponse(rsp *http.Response) (*DeleteStampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteStampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStampResponse parses an HTTP response from a GetStampWithResponse call
func ParseGetStampResponse(rsp *http.Response) (*GetStampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Stamp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditStampResponse parses an HTTP response from a EditStampWithResponse call
func ParseEditStampResponse(rsp *http.Response) (*EditStampResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditStampResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetStampImageResponse parses an HTTP response from a GetStampImageWithResponse call
func ParseGetStampImageResponse(rsp *http.Response) (*GetStampImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetStampImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseChangeStampImageResponse parses an HTTP response from a ChangeStampImageWithResponse call
func ParseChangeStampImageResponse(rsp *http.Response) (*ChangeStampImageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeStampImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetTagResponse parses an HTTP response from a GetTagWithResponse call
func ParseGetTagResponse(rsp *http.Response) (*GetTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MyUserDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditMeResponse parses an HTTP response from a EditMeWithResponse call
func ParseEditMeResponse(rsp *http.Response) (*EditMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMyExternalAccountsResponse parses an HTTP response from a GetMyExternalAccountsWithResponse call
func ParseGetMyExternalAccountsResponse(rsp *http.Response) (*GetMyExternalAccountsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyExternalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ExternalProviderUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseLinkExternalAccountResponse parses an HTTP response from a LinkExternalAccountWithResponse call
func ParseLinkExternalAccountResponse(rsp *http.Response) (*LinkExternalAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &LinkExternalAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseUnlinkExternalAccountResponse parses an HTTP response from a UnlinkExternalAccountWithResponse call
func ParseUnlinkExternalAccountResponse(rsp *http.Response) (*UnlinkExternalAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &UnlinkExternalAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseRegisterFCMDeviceResponse parses an HTTP response from a RegisterFCMDeviceWithResponse call
func ParseRegisterFCMDeviceResponse(rsp *http.Response) (*RegisterFCMDeviceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RegisterFCMDeviceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMyIconResponse parses an HTTP response from a GetMyIconWithResponse call
func ParseGetMyIconResponse(rsp *http.Response) (*GetMyIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseChangeMyIconResponse parses an HTTP response from a ChangeMyIconWithResponse call
func ParseChangeMyIconResponse(rsp *http.Response) (*ChangeMyIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeMyIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseChangeMyPasswordResponse parses an HTTP response from a ChangeMyPasswordWithResponse call
func ParseChangeMyPasswordResponse(rsp *http.Response) (*ChangeMyPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeMyPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMyQRCodeResponse parses an HTTP response from a GetMyQRCodeWithResponse call
func ParseGetMyQRCodeResponse(rsp *http.Response) (*GetMyQRCodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyQRCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMySessionsResponse parses an HTTP response from a GetMySessionsWithResponse call
func ParseGetMySessionsResponse(rsp *http.Response) (*GetMySessionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMySessionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []LoginSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevokeMySessionResponse parses an HTTP response from a RevokeMySessionWithResponse call
func ParseRevokeMySessionResponse(rsp *http.Response) (*RevokeMySessionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RevokeMySessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMyStampHistoryResponse parses an HTTP response from a GetMyStampHistoryWithResponse call
func ParseGetMyStampHistoryResponse(rsp *http.Response) (*GetMyStampHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyStampHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []StampHistoryEntry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMyStarsResponse parses an HTTP response from a GetMyStarsWithResponse call
func ParseGetMyStarsResponse(rsp *http.Response) (*GetMyStarsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyStarsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddMyStarResponse parses an HTTP response from a AddMyStarWithResponse call
func ParseAddMyStarResponse(rsp *http.Response) (*AddMyStarResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddMyStarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseRemoveMyStarResponse parses an HTTP response from a RemoveMyStarWithResponse call
func ParseRemoveMyStarResponse(rsp *http.Response) (*RemoveMyStarResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveMyStarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMyChannelSubscriptionsResponse parses an HTTP response from a GetMyChannelSubscriptionsWithResponse call
func ParseGetMyChannelSubscriptionsResponse(rsp *http.Response) (*GetMyChannelSubscriptionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyChannelSubscriptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserSubscribeState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetChannelSubscribeLevelResponse parses an HTTP response from a SetChannelSubscribeLevelWithResponse call
func ParseSetChannelSubscribeLevelResponse(rsp *http.Response) (*SetChannelSubscribeLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &SetChannelSubscribeLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMyUserTagsResponse parses an HTTP response from a GetMyUserTagsWithResponse call
func ParseGetMyUserTagsResponse(rsp *http.Response) (*GetMyUserTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyUserTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddMyUserTagResponse parses an HTTP response from a AddMyUserTagWithResponse call
func ParseAddMyUserTagResponse(rsp *http.Response) (*AddMyUserTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddMyUserTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRemoveMyUserTagResponse parses an HTTP response from a RemoveMyUserTagWithResponse call
func ParseRemoveMyUserTagResponse(rsp *http.Response) (*RemoveMyUserTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveMyUserTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseEditMyUserTagResponse parses an HTTP response from a EditMyUserTagWithResponse call
func ParseEditMyUserTagResponse(rsp *http.Response) (*EditMyUserTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditMyUserTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMyTokensResponse parses an HTTP response from a GetMyTokensWithResponse call
func ParseGetMyTokensResponse(rsp *http.Response) (*GetMyTokensResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyTokensResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ActiveOAuth2Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRevokeMyTokenResponse parses an HTTP response from a RevokeMyTokenWithResponse call
func ParseRevokeMyTokenResponse(rsp *http.Response) (*RevokeMyTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RevokeMyTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetMyUnreadChannelsResponse parses an HTTP response from a GetMyUnreadChannelsWithResponse call
func ParseGetMyUnreadChannelsResponse(rsp *http.Response) (*GetMyUnreadChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetMyUnreadChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UnreadChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReadChannelResponse parses an HTTP response from a ReadChannelWithResponse call
func ParseReadChannelResponse(rsp *http.Response) (*ReadChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ReadChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditUserResponse parses an HTTP response from a EditUserWithResponse call
func ParseEditUserResponse(rsp *http.Response) (*EditUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserDMChannelResponse parses an HTTP response from a GetUserDMChannelWithResponse call
func ParseGetUserDMChannelResponse(rsp *http.Response) (*GetUserDMChannelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserDMChannelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DMChannel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserIconResponse parses an HTTP response from a GetUserIconWithResponse call
func ParseGetUserIconResponse(rsp *http.Response) (*GetUserIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseChangeUserIconResponse parses an HTTP response from a ChangeUserIconWithResponse call
func ParseChangeUserIconResponse(rsp *http.Response) (*ChangeUserIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeUserIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetDirectMessagesResponse parses an HTTP response from a GetDirectMessagesWithResponse call
func ParseGetDirectMessagesResponse(rsp *http.Response) (*GetDirectMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetDirectMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDirectMessageResponse parses an HTTP response from a PostDirectMessageWithResponse call
func ParsePostDirectMessageResponse(rsp *http.Response) (*PostDirectMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostDirectMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseChangeUserPasswordResponse parses an HTTP response from a ChangeUserPasswordWithResponse call
func ParseChangeUserPasswordResponse(rsp *http.Response) (*ChangeUserPasswordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeUserPasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetUserTagsResponse parses an HTTP response from a GetUserTagsWithResponse call
func ParseGetUserTagsResponse(rsp *http.Response) (*GetUserTagsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetUserTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddUserTagResponse parses an HTTP response from a AddUserTagWithResponse call
func ParseAddUserTagResponse(rsp *http.Response) (*AddUserTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &AddUserTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserTag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRemoveUserTagResponse parses an HTTP response from a RemoveUserTagWithResponse call
func ParseRemoveUserTagResponse(rsp *http.Response) (*RemoveUserTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &RemoveUserTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseEditUserTagResponse parses an HTTP response from a EditUserTagWithResponse call
func ParseEditUserTagResponse(rsp *http.Response) (*EditUserTagResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditUserTagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetServerVersionResponse parses an HTTP response from a GetServerVersionWithResponse call
func ParseGetServerVersionResponse(rsp *http.Response) (*GetServerVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetServerVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Version
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWebhooksResponse parses an HTTP response from a GetWebhooksWithResponse call
func ParseGetWebhooksResponse(rsp *http.Response) (*GetWebhooksResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Webhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateWebhookResponse parses an HTTP response from a CreateWebhookWithResponse call
func ParseCreateWebhookResponse(rsp *http.Response) (*CreateWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Webhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteWebhookResponse parses an HTTP response from a DeleteWebhookWithResponse call
func ParseDeleteWebhookResponse(rsp *http.Response) (*DeleteWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetWebhookResponse parses an HTTP response from a GetWebhookWithResponse call
func ParseGetWebhookResponse(rsp *http.Response) (*GetWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Webhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditWebhookResponse parses an HTTP response from a EditWebhookWithResponse call
func ParseEditWebhookResponse(rsp *http.Response) (*EditWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &EditWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Webhook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWebhookResponse parses an HTTP response from a PostWebhookWithResponse call
func ParsePostWebhookResponse(rsp *http.Response) (*PostWebhookResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetWebhookIconResponse parses an HTTP response from a GetWebhookIconWithResponse call
func ParseGetWebhookIconResponse(rsp *http.Response) (*GetWebhookIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseChangeWebhookIconResponse parses an HTTP response from a ChangeWebhookIconWithResponse call
func ParseChangeWebhookIconResponse(rsp *http.Response) (*ChangeWebhookIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &ChangeWebhookIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetWebhookMessagesResponse parses an HTTP response from a GetWebhookMessagesWithResponse call
func ParseGetWebhookMessagesResponse(rsp *http.Response) (*GetWebhookMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWebRTCAuthenticateResponse parses an HTTP response from a PostWebRTCAuthenticateWithResponse call
func ParsePostWebRTCAuthenticateResponse(rsp *http.Response) (*PostWebRTCAuthenticateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostWebRTCAuthenticateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebRTCAuthenticateResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWebRTCStateResponse parses an HTTP response from a GetWebRTCStateWithResponse call
func ParseGetWebRTCStateResponse(rsp *http.Response) (*GetWebRTCStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetWebRTCStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebRTCUserStates
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseWsResponse parses an HTTP response from a WsWithResponse call
func ParseWsResponse(rsp *http.Response) (*WsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &WsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}
